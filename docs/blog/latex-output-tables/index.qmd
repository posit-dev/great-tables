---
title: Great Tables and LaTeX Output
html-table-processing: none
author: Rich Iannone
date: 2024-11-15
jupyter: python3
format:
  html:
    code-fold: true
    code-summary: "Show the Code"
---

We've been doing quite a bit of work on getting **Great Tables** to produce LaTeX output tables. For those publishing workflows involving LaTeX documents, it's useful to have a reproducible solution for generating data tables as native LaTeX tables.

In this post, we will provide examples of generating LaTeX outputs of tables using the `as_latex()` method, which is new in Great Tables `v0.14.0`. We'll go over some LaTeX workflows in Quarto and the current options for Great Tables within that publishing system. Then, we will address some of the caveats and current limitations for exporting tables to LaTeX while providing an outlook on how those will be addressed in the future.

## Generating a LaTeX table with Great Tables

When making a LaTeX output table with Great Tables, the code shouldn't be that much different from a table meant for HTML output. While HTML tables are rendered automatically in notebooks (as GT objects come with an HTML representation), getting the table as LaTeX requires the use of the new `as_latex()` method. Here is an example where a basic table is generated, and the LaTeX table code is returned and printed.

```{python}
from great_tables import GT
from great_tables.data import gtcars
import polars as pl

gtcars_pl = (
    pl.from_pandas(gtcars)
    .select(["mfr", "model", "hp", "trq", "mpg_c", "msrp"])
)

gt_tbl = (
    GT(
        gtcars[["mfr", "model", "hp", "trq", "msrp"]].head(5),
    )
    .tab_header(
        title="Some Cars from the gtcars Dataset",
        subtitle="Five Cars are shown here"
    )
    .tab_spanner(
        label="Make and Model",
        columns=["mfr", "model"],
        id="make_model"
    )
    .tab_spanner(
        label="Performance",
        columns=["hp", "trq", "msrp"]
    )
    .tab_spanner(
        label="Everything but the cost",
        columns=["mfr", "model", "hp", "trq"]
    )
    .fmt_integer(columns=["hp", "trq"])
    .fmt_currency(columns="msrp")
    .tab_source_note("Cars are all 2015 models.")
    .tab_source_note("Horsepower and Torque values are estimates.")
)

print(gt_tbl.as_latex())
```

The table example shows how some of Great Tables' structural components are represented in LaTeX. We can add a title to the table with `tab_header()` and it will be placed in a caption (where the title and subtitle will be sized appropriately). Spanners, which are something of a pain to manually author, work well here, and we can use an unlimited number of spanner levels. Number formatting is handled correctly here with `fmt_integer()` and `fmt_currency()`. Finally, source notes are placed below the table in a minipage environment.

A frequent bugbear with any programmatic generation of LaTeX tables is LaTeX escaping. Not escaping correctly often leads to LaTeX rendering errors and this can break an entire publishing workflow. Thankfully, Great Tables will automatically and correctly escape characters in LaTeX and this will happen with:

- any text in the input table (e.g., cell values containing square brackets)
- any *new* text added to the table (e.g., titles, source notes, new column labels, etc.)
- any formatting performed via the `fmt_*()` methods

We wanted to get off to a good start on this and a big part of this involves LaTeX output that is well-tested and consistently error-free when processed by a LaTeX engine.

## Using LaTeX output from Great Tables in Quarto

Aside from printing out the LaTeX table code, there is support for using Great Tables in Quarto when the output type is `"pdf"`. To make the gtcars example work in that environment, three things need to be done:

1. ensure that the output type for the document is `"pdf"`
2. set all code cells with GT tables to output `asis` (alternatively, this can be done in the document front matter)
3. use the `as_latex()` method on a GT object and explicitly print the text with `print()`

Here's an example .qmd file with these pieces in place...

````
---
format: pdf
---

Using Great Tables in a Quarto PDF document.

```{{python}}
#| output: asis

gt_tbl = (
   ...
)

print(gt_tbl.as_latex())
```
````

...and this is what the table looks like in the rendered PDF:

![](./gtcars_latex_table.png)

If you'd like to experiment with Great Tables' LaTeX rendering, you can get the text of a working .qmd file in the details below. Make sure your installation of Quarto is [up to date](https://quarto.org/docs/get-started/) and that you have Great Tables upgraded to `v0.14.0`.

<details>
````
---
format: pdf
---

Example using the `gtcars` dataset.

```{{python}}
#| output: asis

from great_tables import GT
from great_tables.data import gtcars
import polars as pl

gtcars_pl = (
    pl.from_pandas(gtcars)
    .select(["mfr", "model", "hp", "trq", "mpg_c", "msrp"])
)

gt_tbl = (
    GT(
        gtcars[["mfr", "model", "hp", "trq", "msrp"]].head(5),
    )
    .tab_header(
        title="Some Cars from the gtcars Dataset",
        subtitle="Five Cars are shown here"
    )
    .tab_spanner(
        label="Make and Model",
        columns=["mfr", "model"],
        id="make_model"
    )
    .tab_spanner(
        label="Performance",
        columns=["hp", "trq"]
    )
    .tab_spanner(
        label="Everything but the cost",
        columns=["mfr", "model", "hp", "trq"]
    )
    .fmt_integer(columns=["hp", "trq"])
    .fmt_currency(columns="msrp")
    .tab_source_note("Cars are all 2015 models.")
    .tab_source_note("Horsepower and Torque values are estimates.")
    .tab_options(table_width="600pt")
)

print(gt_tbl.as_latex())
```
````
</details>

## Current limitations of LaTeX table output

The `as_latex()` method is still experimental and has some limitations. The following functionality that is supported in HTML output tables is not currently supported in LaTeX output tables:

- the rendering of the stub and row group labels (via the =rowname_col and =groupname_col args in the GT() class)
- the use of the `md()` helper function to signal conversion of Markdown text
- units notation within the `cols_labels()` and `tab_spanner()` methods
- the `fmt_markdown()`, `fmt_units()`, `fmt_image()`, and `fmt_nanoplot()` methods
- the `sub_missing()` and `sub_zero()` methods
- most options in the `tab_options()` method, particularly those that are specific to styling text, borders, or adding fill colors to cells

Some of these limitations are short-term, notably the ones dealing with the use of the table stub and row groups. We plan to address this soon but having those structural components in a table now will raise an error when using `.as_latex()`.

Currently, we don't see a solution for Markdown-to-LaTeX conversion. We depend on the `commonmark` library to perform Markdown-to-HTML transformation but the library doesn't support LaTeX output.

Styling a LaTeX table is currently not possible. Having a `tab_style()` statement in your GT code and subsequently using `.as_latex()` won't raise an error, but it will warn and essentially no-op. Many of the options available in `tab_options()` are those that perform styling

As development continues, we will work to expand the capabilities of the `as_latex()` method to reduce these limitations and more clearly document what is and is not supported.

## Capabilities of Quarto with HTML tables in LaTeX and Typst output

If the current limitations of Great Tables' LaTeX output are just too great, there are other avenues to explore. Quarto can parse HTML tables and translate them to native LaTeX or Typst tables. What you'll get is some cell styling preserved, and conversion of subscripts and superscripts to these output formats. There are shortcomings in these approaches as well, you won't be able to use column spanners for one thing, and styles are translated differently between LaTeX and Typst.

Here's how the gtcars table (sans spanners) looks in a `"pdf"` (LaTeX) document:

<details>
````
---
format: pdf
---

```{{python}}
#| echo: false

from great_tables import GT, style, loc
from great_tables.data import gtcars
import polars as pl

gtcars_pl = (
    pl.from_pandas(gtcars)
    .select(["mfr", "model", "hp", "trq", "mpg_c", "msrp"])
)

gt_tbl = (
    GT(
        gtcars[["mfr", "model", "hp", "trq", "msrp"]].head(5),
    )
    .tab_header(
        title="Some Cars from the gtcars Dataset",
        subtitle="Five Cars are shown here"
    )
    .fmt_integer(columns=["hp", "trq"])
    .fmt_currency(columns="msrp")
    .tab_source_note("Cars are all 2015 models.")
    .tab_source_note("Horsepower and Torque values are estimates.")
    .tab_options(table_width="600pt")
    .tab_style(
        style=style.fill(color="lightblue"),
        locations=loc.body()
    )
    .tab_style(
        style=style.fill(color="papayawhip"),
        locations=loc.header()
    )
)

gt_tbl
```
````
</details>

![](./GT_html_latex.png)

And here's the table rendered through `"typst"`:

<details>
````
---
format: typst
---

```{{python}}
#| echo: false

from great_tables import GT, style, loc
from great_tables.data import gtcars
import polars as pl

gtcars_pl = (
    pl.from_pandas(gtcars)
    .select(["mfr", "model", "hp", "trq", "mpg_c", "msrp"])
)

gt_tbl = (
    GT(
        gtcars[["mfr", "model", "hp", "trq", "msrp"]].head(5),
    )
    .tab_header(
        title="Some Cars from the gtcars Dataset",
        subtitle="Five Cars are shown here"
    )
    .fmt_integer(columns=["hp", "trq"])
    .fmt_currency(columns="msrp")
    .tab_source_note("Cars are all 2015 models.")
    .tab_source_note("Horsepower and Torque values are estimates.")
    .tab_style(
        style=style.fill(color="lightblue"),
        locations=loc.body()
    )
    .tab_style(
        style=style.fill(color="papayawhip"),
        locations=loc.header()
    )
)

gt_tbl
```
````
</details>

![](./GT_html_typst.png)

It's always good to have alternatives and these automatic HTML-to-LaTeX and HTML-to-Typst conversions are quite impressive (and available now)!

## Let's LaTeX!

While this is an early preview of a new rendering capability in Great Tables, we are optimistic that it can be greatly improved in due course. If you're experimenting with this feature, please let us know about any problems you bump into by using the Great Tables [issue tracker](https://github.com/posit-dev/great-tables/issues).

The goal is to make LaTeX output dependable, work within several common LaTeX-publishing workflows, and be fully featured enough to make this table-making route in LaTeX preferable to other solutions in this space.
