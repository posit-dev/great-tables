project:
  type: website

website:
  title: great_tables
  site-url: https://posit-dev.github.io/great-tables/
  description: "Absolutely Delightful Table-making in Python"
  page-navigation: true
  google-analytics: "G-CN7Z82M6R7"
  navbar:
    left:
      - text: Get Started
        file: get-started/index.qmd
      - text: Examples
        file: examples/index.qmd
      - href: reference/index.qmd
        text: Reference
      - href: blog/index.qmd
        text: Blog
    right:
      - icon: github
        href: https://github.com/posit-dev/great-tables
      - icon: rss
        href: blog/index.xml
  sidebar:
    - id: examples
      contents: examples-qmd/*
    - title: "Get Started"
      contents:
        - get-started/index.qmd
        - get-started/overview.qmd
        - section: Table Structure
          contents:
            - get-started/basic-header.qmd
            - get-started/basic-stub.qmd
            - get-started/basic-column-labels.qmd
        - section: Format
          contents:
            - get-started/basic-formatting.qmd
            - get-started/nanoplots.qmd
        - section: Style
          contents:
            - get-started/basic-styling.qmd
            - get-started/targeted-styles.qmd
            - get-started/colorizing-with-data.qmd
        - section: Theming
          contents:
            - get-started/table-theme-options.qmd
            - get-started/table-theme-premade.qmd
        - section: Selecting table parts
          contents:
            - get-started/column-selection.qmd
            - get-started/row-selection.qmd
            - get-started/loc-selection.qmd
        - section: Extra
          contents:
            - get-started/contributing.qmd

format:
  html:
    theme: cosmo
    css:
      - styles.css
      - reference/_styles-quartodoc.css
    toc: true
    page-layout: full

filters:
  - interlinks

interlinks:
  fast: true
  sources:
    numpy:
      url: https://numpy.org/doc/stable/
    python:
      url: https://docs.python.org/3/

html-table-processing: none

quartodoc:
  package: great_tables
  dir: reference
  title: API Reference
  style: pkgdown
  css: reference/_styles-quartodoc.css
  dynamic: true
  render_interlinks: true
  renderer:
    style: markdown
    table_style: description-list
  sections:
    - title: Table Creation
      desc: >
        All tables created in **Great Tables** begin by using [`GT()`](`great_tables.GT`). With this
        class, we supply the input data table and some basic options for creating a stub and row
        groups (with the `rowname_col=` and `groupname_col=` arguments).
      contents:
        - name: GT
          children: linked


    - title: Creating or modifying parts of a table
      desc: >
        A table can contain a few useful components for conveying additional information. These
        include a header (with a titles and subtitle), a footer (with source notes), and additional
        areas for labels (row group labels, column spanner labels, the stubhead label). We can
        perform styling on targeted table locations with the
        [`tab_style()`](`great_tables.GT.tab_style`) method.
      contents:
        - GT.tab_header
        - GT.tab_spanner
        - GT.tab_stub
        - GT.tab_stubhead
        - GT.tab_source_note
        - GT.tab_style
        - GT.tab_options
    - title: Formatting column data
      desc: >
        Columns of data can be formatted with the `fmt_*()` methods. We can specify the rows of
        these columns quite precisely with the `rows` argument. We get to apply these methods
        exactly once to each data cell (last call wins). Need to do custom formatting? Use the
        [`fmt()`](`great_tables.GT.fmt`) method and define your own formatter.
      contents:
        - GT.fmt_number
        - GT.fmt_integer
        - GT.fmt_percent
        - GT.fmt_scientific
        - GT.fmt_currency
        - GT.fmt_bytes
        - GT.fmt_roman
        - GT.fmt_date
        - GT.fmt_time
        - GT.fmt_datetime
        - GT.fmt_markdown
        - GT.fmt_units
        - GT.fmt_image
        - GT.fmt_icon
        - GT.fmt_flag
        - GT.fmt_nanoplot
        - GT.fmt
        - GT.data_color
        - GT.sub_missing
        - GT.sub_zero
    - title: Modifying columns
      desc: >
        The `cols_*()` methods allow for modifications that act on entire columns. This includes
        alignment of the data in columns ([`cols_align()`](`great_tables.GT.cols_align`)), hiding
        columns from view ([`cols_hide()`](`great_tables.GT.cols_hide`)), re-labeling the column
        labels ([`cols_label()`](`great_tables.GT.cols_label`)), and moving columns around (with the
        `cols_move*()` methods).
      contents:
        - GT.cols_align
        - GT.cols_width
        - GT.cols_label
        - GT.cols_move
        - GT.cols_move_to_start
        - GT.cols_move_to_end
        - GT.cols_hide
    - title: Location Targeting and Styling Classes
      desc: >
        Location targeting is a powerful feature of **Great Tables**. It allows for the precise
        selection of table locations for styling (using the
        [`tab_style()`](`great_tables.GT.tab_style`) method). The styling classes allow for the
        specification of the styling properties to be applied to the targeted locations.
      contents:
        - loc.header
        - loc.title
        - loc.subtitle
        - loc.stubhead
        - loc.column_header
        - loc.spanner_labels
        - loc.column_labels
        - loc.stub
        - loc.row_groups
        - loc.body
        - loc.footer
        - loc.source_notes
        - style.fill
        - style.text
        - style.borders
    - title: Helper functions
      desc: >
        An assortment of helper functions is available in the **Great Tables** package. The
        [`md()`](`great_tables.md`) and [`html()`](`great_tables.html`) helper functions can used
        during label creation with the [`tab_header()`](`great_tables.GT.tab_header`),
        [`tab_spanner()`](`great_tables.GT.tab_spanner`),
        [`tab_stubhead()`](`great_tables.GT.tab_stubhead`), and
        [`tab_source_note()`](`great_tables.GT.tab_source_note`) methods.
      contents:
        - GT.with_id
        - GT.with_locale
        - md
        - html
        - from_column
        - google_font
        - system_fonts
        - define_units
        - nanoplot_options
    - title: Table options
      desc: >
        With the `opt_*()` functions, we have an easy way to set commonly-used table options without
        having to use `tab_options()` directly.
      contents:
        - GT.opt_align_table_header
        - GT.opt_row_striping
        - GT.opt_all_caps
        - GT.opt_vertical_padding
        - GT.opt_horizontal_padding
        - GT.opt_table_outline
        - GT.opt_table_font
        - GT.opt_stylize
    - title: Export
      desc: >
        There may come a day when you need to export a table to some specific format. A great method
        for that is `save()`, which allows us to save the table as a standalone image file. You can
        also get the table code as an HTML fragment with the `as_raw_html()` method.
      contents:
        - GT.save
        - GT.show
        - GT.as_raw_html
        - GT.as_latex
    - title: Pipeline
      desc: >
        Sometimes, you might want to programmatically manipulate the table while still benefiting
        from the chained API that **Great Tables** offers. `pipe()` is designed to tackle this
        issue.
      contents:
        - GT.pipe
    - title: Value formatting functions
      desc: >
        If you have single values (or lists of them) in need of formatting, we have a set of
        `val_fmt_*()` functions that have been adapted from the corresponding `fmt_*()` methods.
      contents:
        - vals.fmt_number
        - vals.fmt_integer
        - vals.fmt_scientific
        - vals.fmt_percent
        - vals.fmt_currency
        - vals.fmt_roman
        - vals.fmt_bytes
        - vals.fmt_date
        - vals.fmt_time
        - vals.fmt_markdown
        - vals.fmt_image
    - title: Built in datasets
      desc: >
        The **Great Tables** package is equipped with sixteen datasets that come in all shapes and
        sizes. Many examples thoughout the help docs use these datasets to quickly demonstrate the
        awesome features of the package! Please note that using any of these datasets requires the
        Pandas library to be installed.
      contents:
        - data.countrypops
        - data.sza
        - data.gtcars
        - data.sp500
        - data.pizzaplace
        - data.exibble
        - data.towny
        - data.peeps
        - data.films
        - data.metro
        - data.gibraltar
        - data.constants
        - data.illness
        - data.reactions
        - data.photolysis
        - data.nuclides
