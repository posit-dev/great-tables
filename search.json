[
  {
    "objectID": "examples/sports-earnings/index.html",
    "href": "examples/sports-earnings/index.html",
    "title": "great_tables",
    "section": "",
    "text": "import polars as pl\nimport polars.selectors as cs\nfrom great_tables import GT, md\n\n\ndef create_bar(prop_fill: float, max_width: int, height: int) -&gt; str:\n    \"\"\"Create divs to represent prop_fill as a bar.\"\"\"\n    width = round(max_width * prop_fill, 2)\n    px_width = f\"{width}px\"\n    return f\"\"\"\\\n    &lt;div style=\"width: {max_width}px; background-color: lightgrey;\"&gt;\\\n        &lt;div style=\"height:{height}px;width:{px_width};background-color:green;\"&gt;&lt;/div&gt;\\\n    &lt;/div&gt;\\\n    \"\"\"\n\n\ndf = pl.read_csv(\"./sports_earnings.csv\")\n\nres = (\n    df.with_columns(\n        (pl.col(\"Off-the-Field Earnings\") / pl.col(\"Total Earnings\")).alias(\"raw_perc\"),\n        (pl.col(\"Sport\").str.to_lowercase() + \".png\").alias(\"icon\"),\n    )\n    .head(9)\n    .with_columns(\n        pl.col(\"raw_perc\")\n          .map_elements(lambda x: create_bar(x, max_width=75, height=20))\n          .alias(\"Off-the-Field Earnings Perc\")\n    )\n    .select(\"Rank\", \"Name\", \"icon\", \"Sport\", \"Total Earnings\", \"Off-the-Field Earnings\", \"Off-the-Field Earnings Perc\")\n)\n\n\n\n(\n    GT(res, rowname_col=\"Rank\")\n    .tab_header(\"Highest Paid Athletes in 2023\")\n    .tab_spanner(\"Earnings\", cs.contains(\"Earnings\"))\n    #.fmt_number(cs.starts_with(\"Total\"), scale_by = 1/1_000_000, decimals=1)\n    .cols_label(**{\n        \"Total Earnings\": \"Total $M\",\n        \"Off-the-Field Earnings\": \"Off field $M\",\n        \"Off-the-Field Earnings Perc\": \"Off field %\"\n    })\n    .fmt_number([\"Total Earnings\", \"Off-the-Field Earnings\"], scale_by = 1/1_000_000, decimals=1)\n    .fmt_image(\"icon\", path=\"./\")\n    .tab_source_note(\n        md(\n            '&lt;br&gt;&lt;div style=\"text-align: center;\"&gt;'\n            \"Original table: [@LisaHornung_](https://twitter.com/LisaHornung_/status/1752981867769266231)\"\n            \" | Sports icons: [Firza Alamsyah](https://thenounproject.com/browse/collection-icon/sports-96427)\"\n            \" | Data: Forbes\"\n            \"&lt;/div&gt;\"\n            \"&lt;br&gt;\"\n        )\n    )\n)\n\n\n\n\n  \n    Highest Paid Athletes in 2023\n  \n\n  \n  Name\n  icon\n  Sport\n  \n    Earnings\n  \n\n\n  Total $M\n  Off field $M\n  Off field %\n\n\n\n  1\n  Cristiano Ronaldo\n  \n  Soccer\n  136.0\n  90.0\n                      \n\n\n  2\n  Lionel Messi\n  \n  Soccer\n  130.0\n  65.0\n                      \n\n\n  3\n  Kylian Mbapp√©\n  \n  Soccer\n  120.0\n  20.0\n                      \n\n\n  4\n  LeBron James\n  \n  Basketball\n  119.5\n  75.0\n                      \n\n\n  5\n  Canelo Alvarez\n  \n  Boxing\n  110.0\n  10.0\n                      \n\n\n  6\n  Dustin Johnson\n  \n  Golf\n  107.0\n  5.0\n                      \n\n\n  7\n  Phil Mickelson\n  \n  Golf\n  106.0\n  2.0\n                      \n\n\n  8\n  Stephen Curry\n  \n  Basketball\n  100.4\n  52.0\n                      \n\n\n  9\n  Roger Federer\n  \n  Tennis\n  95.1\n  95.0\n                      \n\n\n  \n  \n  \n    Original table: @LisaHornung_ | Sports icons: Firza Alamsyah | Data: Forbes"
  },
  {
    "objectID": "articles/intro.html",
    "href": "articles/intro.html",
    "title": "great_tables",
    "section": "",
    "text": "Absolutely Delightful Table-making in Python\nWith Great Tables anyone can make wonderful-looking tables in Python. The philosophy here is that we can construct a wide variety of useful tables by working with a cohesive set of table components. You can mix and match things like a header and footer, attach a stub (which contains row labels), arrange spanner labels over top of the column labels, and much more. Not only that, but you can format the cell values in a variety of awesome ways.\nIt all begins with table data in the form of a Pandas or Polars DataFrame. You then decide how to compose your output table with the elements and formatting you need for the task at hand. Finally, the table is rendered by printing it at the console, including it in an notebook environment, or rendering it inside a Quarto document.\nThe Great Tables package is designed to be both straightforward yet powerful. The emphasis is on simple methods for the everyday display table needs (but power when you need it). Here is a brief example of how to use Great Tables to create a table from the included sp500 dataset:\nThere are 16 datasets provided by Great Tables: countrypops, sza, gtcars, sp500, pizzaplace, exibble, towny, peeps, films, metro, gibraltar, constants, illness, reactions, photolysis, and nuclides.\nAll of this tabular data is great for experimenting with the functionality available inside Great Tables and we make extensive use of these datasets in our documentation.\nBeyond the methods shown in the simple sp500-based example, there are many possible ways to create super-customized tables. Check out the documentation website to get started via introductory articles for making Great Tables. There‚Äôs a handy Reference section that has detailed help for every method and function in the package.\nLet‚Äôs talk about how to make Great Tables! There are a few locations where there is much potential for discussion.\nOne such place is in GitHub Discussions. This discussion board is especially great for Q&A, and many people have had their problems solved in there.\nAnother fine venue for discussion is in our Discord server. This is a good option for asking about the development of Great Tables, pitching ideas that may become features, and sharing your table creations!\nFinally, there is the X account. There you‚Äôll find tweets about Great Tables (including sneak previews about in-development features) and other table-generation packages.\nThese are all great places to ask questions about how to use the package, discuss some ideas, engage with others, and much more!"
  },
  {
    "objectID": "articles/intro.html#installation",
    "href": "articles/intro.html#installation",
    "title": "great_tables",
    "section": "INSTALLATION",
    "text": "INSTALLATION\nThe Great Tables package can be installed from PyPI with:\n$ pip install great_tables\nIf you encounter a bug, have usage questions, or want to share ideas to make this package better, please feel free to file an issue."
  },
  {
    "objectID": "articles/intro.html#code-of-conduct",
    "href": "articles/intro.html#code-of-conduct",
    "title": "great_tables",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nPlease note that the Great Tables project is released with a contributor code of conduct.By participating in this project you agree to abide by its terms."
  },
  {
    "objectID": "articles/intro.html#license",
    "href": "articles/intro.html#license",
    "title": "great_tables",
    "section": "üìÑ License",
    "text": "üìÑ License\nGreat Tables is licensed under the MIT license.\n¬© Posit Software, PBC."
  },
  {
    "objectID": "articles/intro.html#governance",
    "href": "articles/intro.html#governance",
    "title": "great_tables",
    "section": "üèõÔ∏è Governance",
    "text": "üèõÔ∏è Governance\nThis project is primarily maintained by Rich Iannone and Michael Chow. Other authors may occasionally assist with some of these duties."
  },
  {
    "objectID": "blog/introduction-0.13.0/index.html",
    "href": "blog/introduction-0.13.0/index.html",
    "title": "Great Tables v0.13.0: Applying styles to all table locations",
    "section": "",
    "text": "We did something in Great Tables (0.13.0) that‚Äôll make your tables that much more customizable: super fine-grained ways of setting styles throughout the table. Before you were largely constrained to styling through the following strategies:\n\nuse a limited set of styles (e.g., background color, font weight, etc.) to different table locations like the stub, the column labels, etc., through tab_options()\nuse tab_style() with a larger set of styling options for the table body cells (specified by loc.body())\n\nIn v0.13.0, we can target much more than just the table body! Here is the expanded set of loc.*() methods along with the locations that they can target.\n\nThis augmentation of the loc module to include all locations in the table means that there won‚Äôt be a spot in the table to which you can‚Äôt add styling. This is terrific because it gives you free rein to fully customize the look of your table.\nLet‚Äôs make a table and see how this new feature could be used.\n\nStarting things off with a big GT table\nThe table we‚Äôll make uses the nuclides dataset (available in the great_tables.data module). Through use of the tab_*() methods, quite a few table components (hence locations) will be added. We have hidden the code here because it is quite lengthy but you‚Äôre encouraged to check it out to glean some interesting GT tricks.\n\n\nShow the code\nfrom great_tables import GT, md, style, loc, google_font\nfrom great_tables.data import nuclides\nimport polars as pl\nimport polars.selectors as cs\n\nnuclides_mini = (\n    pl.from_pandas(nuclides)\n    .filter(pl.col(\"element\") == \"C\")\n    .with_columns(pl.col(\"nuclide\").str.replace(r\"[0-9]+$\", \"\"))\n    .with_columns(mass_number=pl.col(\"z\") + pl.col(\"n\"))\n    .with_columns(\n        isotope=pl.concat_str(pl.col(\"element\") + \"-\" + pl.col(\"mass_number\").cast(pl.String))\n    )\n    .select([\"isotope\", \"atomic_mass\", \"half_life\", \"isospin\", \"decay_1\", \"decay_2\", \"decay_3\"])\n)\n\ngt_tbl = (\n    GT(nuclides_mini, rowname_col=\"isotope\")\n    .tab_header(\n        title=\"Isotopes of Carbon\",\n        subtitle=\"There are two stable isotopes of carbon and twelve that are unstable.\",\n    )\n    .tab_spanner(label=\"Decay Mode\", columns=cs.starts_with(\"decay\"))\n    .tab_source_note(md(\"Data obtained from the *nuclides* dataset.\"))\n    .tab_stubhead(label=\"Isotope\")\n    .fmt_scientific(columns=\"half_life\")\n    .fmt_number(\n        columns=\"atomic_mass\",\n        decimals=4,\n        scale_by=1 / 1e6,\n    )\n    .sub_missing(columns=\"half_life\", missing_text=md(\"**STABLE**\"))\n    .sub_missing(columns=cs.starts_with(\"decay\"))\n    .cols_label(\n        atomic_mass=\"Atomic Mass\",\n        half_life=\"Half Life, s\",\n        isospin=\"Isospin\",\n        decay_1=\"1\",\n        decay_2=\"2\",\n        decay_3=\"3\",\n    )\n    .cols_align(align=\"center\", columns=[cs.starts_with(\"decay\"), \"isospin\"])\n    .opt_align_table_header(align=\"left\")\n    .opt_table_font(font=google_font(name=\"IBM Plex Sans\"))\n    .opt_vertical_padding(scale=0.5)\n    .opt_horizontal_padding(scale=2)\n)\n\ngt_tbl\n\n\n\n\n\n\n\n  \n    Isotopes of Carbon\n  \n  \n    There are two stable isotopes of carbon and twelve that are unstable.\n  \n\n  Isotope\n  Atomic Mass\n  Half Life, s\n  Isospin\n  \n    Decay Mode\n  \n\n\n  1\n  2\n  3\n\n\n\n  \n    C-8\n    8.0376\n    3.51 √ó 10‚àí21\n    2\n    2P\n    ‚Äî\n    ‚Äî\n  \n  \n    C-9\n    9.0310\n    1.26 √ó 10‚àí1\n    3/2\n    EC+B+\n    B+P\n    B+A\n  \n  \n    C-10\n    10.0169\n    1.93 √ó 101\n    1\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-11\n    11.0114\n    1.22 √ó 103\n    1/2\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-12\n    12.0000\n    STABLE\n    0\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-13\n    13.0034\n    STABLE\n    1/2\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-14\n    14.0032\n    1.80 √ó 1011\n    1\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-15\n    15.0106\n    2.45\n    3/2\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-16\n    16.0147\n    7.47 √ó 10‚àí1\n    2\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-17\n    17.0226\n    1.93 √ó 10‚àí1\n    None\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-18\n    18.0268\n    9.20 √ó 10‚àí2\n    3\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-19\n    19.0348\n    4.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-20\n    20.0403\n    1.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-22\n    22.0576\n    6.10 √ó 10‚àí3\n    None\n    B-\n    B-N\n    B-2N\n  \n\n  \n  \n  \n    Data obtained from the nuclides dataset.\n  \n\n\n\n\n\n\n        \n\n\nThis table will serve as a great starting point for demonstrating all the things you can now do with tab_style(). And the following checklist will serve as a rough plan for how we will style the table:\n\nuse loc.body() to emphasize isotope half-life values\nemploy loc.stub() to draw attention to isotope names (and also point out the ‚ÄòSTABLE‚Äô rows)\nuse style.css() for creating custom CSS styles (e.g., to indent row labels for stable isotopes)\nwork with composite locations and style the whole header and footer quite simply\nset the default table body fill with tab_options()\n\nReally this‚Äôll be tab_style() like you‚Äôve never seen it before, so let‚Äôs get on with it.\n\n\nStyling the body\nFirst, we‚Äôll use loc.body() to emphasize half life values in two ways:\n\nMake the values in the atomic_mass and half_life use a monospace font.\nfill the background of isotopes with STABLE half lives to be PaleTurquoise.\n\n\ngt_tbl = (\n    gt_tbl\n    .tab_style(\n        style=style.text(font=google_font(name=\"IBM Plex Mono\")),\n        locations=loc.body(columns=[\"atomic_mass\", \"half_life\"])\n    )\n    .tab_style(\n        style=[style.text(color=\"Navy\"), style.fill(color=\"PaleTurquoise\")],\n        locations=loc.body(columns=\"half_life\", rows=pl.col(\"half_life\").is_not_null())\n    )\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Isotopes of Carbon\n  \n  \n    There are two stable isotopes of carbon and twelve that are unstable.\n  \n\n  Isotope\n  Atomic Mass\n  Half Life, s\n  Isospin\n  \n    Decay Mode\n  \n\n\n  1\n  2\n  3\n\n\n\n  \n    C-8\n    8.0376\n    3.51 √ó 10‚àí21\n    2\n    2P\n    ‚Äî\n    ‚Äî\n  \n  \n    C-9\n    9.0310\n    1.26 √ó 10‚àí1\n    3/2\n    EC+B+\n    B+P\n    B+A\n  \n  \n    C-10\n    10.0169\n    1.93 √ó 101\n    1\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-11\n    11.0114\n    1.22 √ó 103\n    1/2\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-12\n    12.0000\n    STABLE\n    0\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-13\n    13.0034\n    STABLE\n    1/2\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-14\n    14.0032\n    1.80 √ó 1011\n    1\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-15\n    15.0106\n    2.45\n    3/2\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-16\n    16.0147\n    7.47 √ó 10‚àí1\n    2\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-17\n    17.0226\n    1.93 √ó 10‚àí1\n    None\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-18\n    18.0268\n    9.20 √ó 10‚àí2\n    3\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-19\n    19.0348\n    4.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-20\n    20.0403\n    1.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-22\n    22.0576\n    6.10 √ó 10‚àí3\n    None\n    B-\n    B-N\n    B-2N\n  \n\n  \n  \n  \n    Data obtained from the nuclides dataset.\n  \n\n\n\n\n\n\n        \n\n\nNote these important pieces in the code:\n\nsetting monospace font: we used google_font() (added in the previous release) to apply the monospaced font IBM Plex Mono.\nfilling unstable half lives to turquoise: because the half life cells with the value STABLE are actually missing in the underlying data, and filled in using GT.sub_missing(), we used the polars expression pl.col(\"half_life\").is_not_null() to target everything that isn‚Äôt STABLE.\n\nThis is mainly a reminder that Polars expressions are quite something. And targeting cells in the body with loc.body(rows=...) can be powerful by extension.\n\n\nDon‚Äôt forget the stub!\nWe mustn‚Äôt forget the stub. It‚Äôs a totally separate location, being off to the side and having the important responsibility of holding the row labels. Here, we are going to do two things:\n\nChange the fill color (to ‚ÄòLinen‚Äô) and make the text bold for the entire stub\nHighlight the rows where we have stable isotopes (the extent is both for the stub and the body cells)\n\n\ngt_tbl = (\n    gt_tbl\n    .tab_style(\n        style=[style.fill(color=\"Linen\"), style.text(weight=\"bold\")],\n        locations=loc.stub()\n    )\n    .tab_style(\n        style=style.fill(color=\"LightCyan\"),\n        locations=[\n            loc.body(rows=pl.col(\"half_life\").is_null()),\n            loc.stub(rows=pl.col(\"half_life\").is_null())\n        ]\n    )\n )\n\ngt_tbl\n\n\n\n\n\n\n  \n    Isotopes of Carbon\n  \n  \n    There are two stable isotopes of carbon and twelve that are unstable.\n  \n\n  Isotope\n  Atomic Mass\n  Half Life, s\n  Isospin\n  \n    Decay Mode\n  \n\n\n  1\n  2\n  3\n\n\n\n  \n    C-8\n    8.0376\n    3.51 √ó 10‚àí21\n    2\n    2P\n    ‚Äî\n    ‚Äî\n  \n  \n    C-9\n    9.0310\n    1.26 √ó 10‚àí1\n    3/2\n    EC+B+\n    B+P\n    B+A\n  \n  \n    C-10\n    10.0169\n    1.93 √ó 101\n    1\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-11\n    11.0114\n    1.22 √ó 103\n    1/2\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-12\n    12.0000\n    STABLE\n    0\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-13\n    13.0034\n    STABLE\n    1/2\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-14\n    14.0032\n    1.80 √ó 1011\n    1\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-15\n    15.0106\n    2.45\n    3/2\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-16\n    16.0147\n    7.47 √ó 10‚àí1\n    2\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-17\n    17.0226\n    1.93 √ó 10‚àí1\n    None\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-18\n    18.0268\n    9.20 √ó 10‚àí2\n    3\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-19\n    19.0348\n    4.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-20\n    20.0403\n    1.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-22\n    22.0576\n    6.10 √ó 10‚àí3\n    None\n    B-\n    B-N\n    B-2N\n  \n\n  \n  \n  \n    Data obtained from the nuclides dataset.\n  \n\n\n\n\n\n\n        \n\n\nFor task #1, a simple .tab_style(..., locations=loc.stub()) targeted the entire stub.\nTask #2 is more interesting. Like loc.body(), loc.stub() has a rows= argument that can target specific rows with Polars expressions. We used the same Polars expression as in the previous section to target those rows that belong to the stable isotopes.\nWe‚Äôve dressed up the stub so that it is that much more prominent. And that linen-colored stub goes so well with the light-cyan rows, representative of carbon-12 and carbon-13!\n\n\nUsing custom style rules with the new style.css()\nAside from decking out the loc module with all manner of location methods, we‚Äôve added a little something to the style module: style.css()! What‚Äôs it for? It lets you supply style declarations to its single rule= argument.\nAs an example, I might want to indent some text in one or more table cells. You can‚Äôt really do that with the style.text() method since it doesn‚Äôt have an indent= argument. So, in Great Tables 0.13.0 you can manually indent the row label text for the ‚ÄòSTABLE‚Äô rows using a CSS style rule:\n\ngt_tbl = (\n    gt_tbl\n    .tab_style(\n        style=style.css(rule=\"text-indent: 4px;\"),\n        locations=loc.stub(rows=pl.col(\"half_life\").is_null())\n    )\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Isotopes of Carbon\n  \n  \n    There are two stable isotopes of carbon and twelve that are unstable.\n  \n\n  Isotope\n  Atomic Mass\n  Half Life, s\n  Isospin\n  \n    Decay Mode\n  \n\n\n  1\n  2\n  3\n\n\n\n  \n    C-8\n    8.0376\n    3.51 √ó 10‚àí21\n    2\n    2P\n    ‚Äî\n    ‚Äî\n  \n  \n    C-9\n    9.0310\n    1.26 √ó 10‚àí1\n    3/2\n    EC+B+\n    B+P\n    B+A\n  \n  \n    C-10\n    10.0169\n    1.93 √ó 101\n    1\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-11\n    11.0114\n    1.22 √ó 103\n    1/2\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-12\n    12.0000\n    STABLE\n    0\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-13\n    13.0034\n    STABLE\n    1/2\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-14\n    14.0032\n    1.80 √ó 1011\n    1\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-15\n    15.0106\n    2.45\n    3/2\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-16\n    16.0147\n    7.47 √ó 10‚àí1\n    2\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-17\n    17.0226\n    1.93 √ó 10‚àí1\n    None\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-18\n    18.0268\n    9.20 √ó 10‚àí2\n    3\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-19\n    19.0348\n    4.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-20\n    20.0403\n    1.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-22\n    22.0576\n    6.10 √ó 10‚àí3\n    None\n    B-\n    B-N\n    B-2N\n  \n\n  \n  \n  \n    Data obtained from the nuclides dataset.\n  \n\n\n\n\n\n\n        \n\n\nWe targeted the cells in the stub that corresponded to the stable isotopes (carbon-12 and -13) with a Polars expression (same one as in the previous code cell) and now we have a 4px indentation of the ‚ÄòC-12‚Äô and ‚ÄòC-13‚Äô text! This new bonus functionality really allows almost any type of styling possible, provided you have those CSS skillz.\n\n\nThe combined location helpers: loc.column_header() and loc.footer()\nLook, I know we brought up the expression fine-grained before‚Äîright in the first paragraph‚Äîbut sometimes you need just the opposite. There are lots of little locations in a GT table and some make for logical groupings. To that end, we have the concept of combined location helpers.\nLet‚Äôs set a grey background fill on the stubhead, column header, and footer:\n\ngt_tbl = (\n    gt_tbl\n    .tab_style(\n        style=[style.text(v_align=\"middle\"), style.fill(color=\"#EEEEEE\")],\n        locations=[loc.stubhead(), loc.column_header(), loc.footer()]\n    )\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Isotopes of Carbon\n  \n  \n    There are two stable isotopes of carbon and twelve that are unstable.\n  \n\n  Isotope\n  Atomic Mass\n  Half Life, s\n  Isospin\n  \n    Decay Mode\n  \n\n\n  1\n  2\n  3\n\n\n\n  \n    C-8\n    8.0376\n    3.51 √ó 10‚àí21\n    2\n    2P\n    ‚Äî\n    ‚Äî\n  \n  \n    C-9\n    9.0310\n    1.26 √ó 10‚àí1\n    3/2\n    EC+B+\n    B+P\n    B+A\n  \n  \n    C-10\n    10.0169\n    1.93 √ó 101\n    1\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-11\n    11.0114\n    1.22 √ó 103\n    1/2\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-12\n    12.0000\n    STABLE\n    0\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-13\n    13.0034\n    STABLE\n    1/2\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-14\n    14.0032\n    1.80 √ó 1011\n    1\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-15\n    15.0106\n    2.45\n    3/2\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-16\n    16.0147\n    7.47 √ó 10‚àí1\n    2\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-17\n    17.0226\n    1.93 √ó 10‚àí1\n    None\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-18\n    18.0268\n    9.20 √ó 10‚àí2\n    3\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-19\n    19.0348\n    4.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-20\n    20.0403\n    1.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-22\n    22.0576\n    6.10 √ó 10‚àí3\n    None\n    B-\n    B-N\n    B-2N\n  \n\n  \n  \n  \n    Data obtained from the nuclides dataset.\n  \n\n\n\n\n\n\n        \n\n\nThe loc.column_header() location always targets both loc.column_labels() and loc.spanner_labels().\nA good strategy for your tables would be to style with combined location helpers first and then drill into the specific cells of those super locations with more fine-grained styles in a later tab_style() call.\n\n\nStyling the title and the subtitle\nAlthough it really doesn‚Äôt appear to have separate locations, the table header (produced by way of tab_header()) can have two of them: the title and the subtitle (the latter is optional). These can be targeted via loc.title() and loc.subtitle(). Let‚Äôs focus in on the title location and set an aliceblue background fill on the title, along with some font and border adjustments.\n\ngt_tbl = (\n    gt_tbl\n    .tab_style(\n        style=[\n            style.text(size=\"24px\"),\n            style.fill(color=\"aliceblue\"),\n            style.borders(sides=\"bottom\", color=\"#BFDFF6\", weight=\"2px\")\n        ],\n        locations=loc.title()\n    )\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Isotopes of Carbon\n  \n  \n    There are two stable isotopes of carbon and twelve that are unstable.\n  \n\n  Isotope\n  Atomic Mass\n  Half Life, s\n  Isospin\n  \n    Decay Mode\n  \n\n\n  1\n  2\n  3\n\n\n\n  \n    C-8\n    8.0376\n    3.51 √ó 10‚àí21\n    2\n    2P\n    ‚Äî\n    ‚Äî\n  \n  \n    C-9\n    9.0310\n    1.26 √ó 10‚àí1\n    3/2\n    EC+B+\n    B+P\n    B+A\n  \n  \n    C-10\n    10.0169\n    1.93 √ó 101\n    1\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-11\n    11.0114\n    1.22 √ó 103\n    1/2\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-12\n    12.0000\n    STABLE\n    0\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-13\n    13.0034\n    STABLE\n    1/2\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-14\n    14.0032\n    1.80 √ó 1011\n    1\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-15\n    15.0106\n    2.45\n    3/2\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-16\n    16.0147\n    7.47 √ó 10‚àí1\n    2\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-17\n    17.0226\n    1.93 √ó 10‚àí1\n    None\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-18\n    18.0268\n    9.20 √ó 10‚àí2\n    3\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-19\n    19.0348\n    4.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-20\n    20.0403\n    1.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-22\n    22.0576\n    6.10 √ó 10‚àí3\n    None\n    B-\n    B-N\n    B-2N\n  \n\n  \n  \n  \n    Data obtained from the nuclides dataset.\n  \n\n\n\n\n\n\n        \n\n\nLooks good. Notice that the title location is separate from the subtitle one, the background fill reveals the extent of its area.\nA subtitle is an optional part of the header. We do have one in our table example, so let‚Äôs style that as well. The style.css() method will be used to give the subtitle text some additional top and bottom padding, and, we‚Äôll put in a fancy background involving a linear gradient.\n\ngt_tbl = (\n    gt_tbl\n    .tab_style(\n        style=style.css(rule=\"padding-top: 5px;\"\n            \"padding-bottom: 5px;\"\n            \"background-image: linear-gradient(120deg, #d4fc79 0%, #96f6a1 100%);\"\n        ),\n        locations=loc.subtitle()\n    )\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Isotopes of Carbon\n  \n  \n    There are two stable isotopes of carbon and twelve that are unstable.\n  \n\n  Isotope\n  Atomic Mass\n  Half Life, s\n  Isospin\n  \n    Decay Mode\n  \n\n\n  1\n  2\n  3\n\n\n\n  \n    C-8\n    8.0376\n    3.51 √ó 10‚àí21\n    2\n    2P\n    ‚Äî\n    ‚Äî\n  \n  \n    C-9\n    9.0310\n    1.26 √ó 10‚àí1\n    3/2\n    EC+B+\n    B+P\n    B+A\n  \n  \n    C-10\n    10.0169\n    1.93 √ó 101\n    1\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-11\n    11.0114\n    1.22 √ó 103\n    1/2\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-12\n    12.0000\n    STABLE\n    0\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-13\n    13.0034\n    STABLE\n    1/2\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-14\n    14.0032\n    1.80 √ó 1011\n    1\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-15\n    15.0106\n    2.45\n    3/2\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-16\n    16.0147\n    7.47 √ó 10‚àí1\n    2\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-17\n    17.0226\n    1.93 √ó 10‚àí1\n    None\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-18\n    18.0268\n    9.20 √ó 10‚àí2\n    3\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-19\n    19.0348\n    4.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-20\n    20.0403\n    1.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-22\n    22.0576\n    6.10 √ó 10‚àí3\n    None\n    B-\n    B-N\n    B-2N\n  \n\n  \n  \n  \n    Data obtained from the nuclides dataset.\n  \n\n\n\n\n\n\n        \n\n\nNone of what was done above could be done prior to v0.13.0. The style.css() method makes this all possible.\nThe combined location helper for the title and the subtitle locations is loc.header(). As mentioned before, it can be used as a shorthand for locations=[loc.title(), loc_subtitle()] and it‚Äôs useful here where we want to change the font for the title and subtitle text.\n\ngt_tbl = (\n    gt_tbl\n    .tab_style(\n        style=style.text(font=google_font(\"IBM Plex Serif\")),\n        locations=loc.header()\n    )\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Isotopes of Carbon\n  \n  \n    There are two stable isotopes of carbon and twelve that are unstable.\n  \n\n  Isotope\n  Atomic Mass\n  Half Life, s\n  Isospin\n  \n    Decay Mode\n  \n\n\n  1\n  2\n  3\n\n\n\n  \n    C-8\n    8.0376\n    3.51 √ó 10‚àí21\n    2\n    2P\n    ‚Äî\n    ‚Äî\n  \n  \n    C-9\n    9.0310\n    1.26 √ó 10‚àí1\n    3/2\n    EC+B+\n    B+P\n    B+A\n  \n  \n    C-10\n    10.0169\n    1.93 √ó 101\n    1\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-11\n    11.0114\n    1.22 √ó 103\n    1/2\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-12\n    12.0000\n    STABLE\n    0\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-13\n    13.0034\n    STABLE\n    1/2\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-14\n    14.0032\n    1.80 √ó 1011\n    1\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-15\n    15.0106\n    2.45\n    3/2\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-16\n    16.0147\n    7.47 √ó 10‚àí1\n    2\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-17\n    17.0226\n    1.93 √ó 10‚àí1\n    None\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-18\n    18.0268\n    9.20 √ó 10‚àí2\n    3\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-19\n    19.0348\n    4.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-20\n    20.0403\n    1.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-22\n    22.0576\n    6.10 √ó 10‚àí3\n    None\n    B-\n    B-N\n    B-2N\n  \n\n  \n  \n  \n    Data obtained from the nuclides dataset.\n  \n\n\n\n\n\n\n        \n\n\nThough the order of things matters when setting styles via tab_style(), it‚Äôs not a problem here to set a style for the combined ‚Äòheader‚Äô location after doing so for the ‚Äòtitle‚Äô and ‚Äòsubtitle‚Äô locations because the ‚Äòfont‚Äô attribute wasn‚Äôt set by tab_style() for those smaller locations.\n\n\nHow tab_style() fits in with tab_options()\nWhen it comes to styling, you can use tab_options() for some of the basics and use tab_style() for the more demanding styling tasks. And you could combine the usage of both in your table. Let‚Äôs set a default honeydew background fill on the body values:\n\ngt_tbl = gt_tbl.tab_options(table_background_color=\"HoneyDew\")\n\ngt_tbl\n\n\n\n\n\n\n  \n    Isotopes of Carbon\n  \n  \n    There are two stable isotopes of carbon and twelve that are unstable.\n  \n\n  Isotope\n  Atomic Mass\n  Half Life, s\n  Isospin\n  \n    Decay Mode\n  \n\n\n  1\n  2\n  3\n\n\n\n  \n    C-8\n    8.0376\n    3.51 √ó 10‚àí21\n    2\n    2P\n    ‚Äî\n    ‚Äî\n  \n  \n    C-9\n    9.0310\n    1.26 √ó 10‚àí1\n    3/2\n    EC+B+\n    B+P\n    B+A\n  \n  \n    C-10\n    10.0169\n    1.93 √ó 101\n    1\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-11\n    11.0114\n    1.22 √ó 103\n    1/2\n    EC+B+\n    ‚Äî\n    ‚Äî\n  \n  \n    C-12\n    12.0000\n    STABLE\n    0\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-13\n    13.0034\n    STABLE\n    1/2\n    ‚Äî\n    ‚Äî\n    ‚Äî\n  \n  \n    C-14\n    14.0032\n    1.80 √ó 1011\n    1\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-15\n    15.0106\n    2.45\n    3/2\n    B-\n    ‚Äî\n    ‚Äî\n  \n  \n    C-16\n    16.0147\n    7.47 √ó 10‚àí1\n    2\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-17\n    17.0226\n    1.93 √ó 10‚àí1\n    None\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-18\n    18.0268\n    9.20 √ó 10‚àí2\n    3\n    B-\n    B-N\n    ‚Äî\n  \n  \n    C-19\n    19.0348\n    4.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-20\n    20.0403\n    1.63 √ó 10‚àí2\n    None\n    B-\n    B-N\n    B-2N\n  \n  \n    C-22\n    22.0576\n    6.10 √ó 10‚àí3\n    None\n    B-\n    B-N\n    B-2N\n  \n\n  \n  \n  \n    Data obtained from the nuclides dataset.\n  \n\n\n\n\n\n\n        \n\n\nIn the example, we asked for the HoneyDew background fill on the entire table with tab_options(). However, even though tab_options() was used after those tab_style() invocations, the ‚ÄòHoneyDew‚Äô background color was only applied to the locations that didn‚Äôt have a background color set through tab_style(). The important takeaway here is that the precedence (or priority) is *always* given totab_style()`, regardless of the order of invocation.\n\n\nWrapping up\nWe‚Äôd like to thank Tim Paine for getting the expanded loc work off the ground. Additionally, we are grateful to Jerry Wu for his contributions to the v0.13.0 release of the package.\nWe‚Äôd be very pleased to receive comments or suggestions on the new functionality. GitHub Issues or GitHub Discussions are both fine venues for getting in touch with us. Finally, if ever you want to talk about tables with us, you‚Äôre always welcome to jump into our Discord Server."
  },
  {
    "objectID": "blog/introduction-0.12.0/index.html",
    "href": "blog/introduction-0.12.0/index.html",
    "title": "Great Tables v0.12.0: Google Fonts and zebra stripes",
    "section": "",
    "text": "In Great Tables 0.12.0 we focused on adding options for customizing the appearance of a table. In this post, we‚Äôll present two new features:\n\nusing typefaces from Google Fonts via tab_style() and opt_table_font()\nadding table striping via tab_options() and opt_row_striping()\n\nLet‚Äôs have a look at how these new features can be used!\n\nUsing fonts from Google Fonts\nGoogle Fonts is a free service that allows use of hosted typefaces in your own websites. In Great Tables, we added the google_font() helper function to easily incorporate such fonts in your tables. There are two ways to go about this:\n\nuse google_font() with opt_table_font() to set a Google Font for the entire table\ninvoke google_font() within tab_style(styles=style.text(font=...)) to set the font within a location\n\nLet‚Äôs start with this small table that uses the default set of fonts for the entire table.\n\n\nShow the code\nfrom great_tables import GT, exibble, style, loc\n\ngt_tbl = (\n    GT(exibble.head(), rowname_col=\"row\", groupname_col=\"group\")\n    .cols_hide(columns=[\"char\", \"fctr\", \"date\", \"time\"])\n    .tab_header(\n        title=\"A small piece of the exibble dataset\",\n        subtitle=\"Displaying the first five rows (of eight)\",\n    )\n    .tab_source_note(\n        source_note=\"This dataset is included in Great Tables.\"\n    )\n)\n\ngt_tbl\n\n\n\n\n\n\n\n  \n    A small piece of the exibble dataset\n  \n  \n    Displaying the first five rows (of eight)\n  \n\n  \n  num\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    This dataset is included in Great Tables.\n  \n\n\n\n\n\n\n        \n\n\nNow, with opt_table_font() + google_font(), we‚Äôll change the table‚Äôs font to one from Google Fonts. I like Noto Serif so let‚Äôs use that here!\n\nfrom great_tables import GT, exibble, style, loc, google_font\n\n(\n    gt_tbl\n    .opt_table_font(font=google_font(name=\"Noto Serif\"))\n)\n\n\n\n\n\n\n  \n    A small piece of the exibble dataset\n  \n  \n    Displaying the first five rows (of eight)\n  \n\n  \n  num\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    This dataset is included in Great Tables.\n  \n\n\n\n\n\n\n        \n\n\nLooking good! And we don‚Äôt have to apply the font to the entire table. We might just wanted to use a Google Font in the table body. For that use case, tab_style() is the preferred method. Here‚Äôs an example that uses the IBM Plex Mono typeface.\n\n(\n    gt_tbl\n    .tab_style(\n        style=style.text(font=google_font(name=\"IBM Plex Mono\")),\n        locations=loc.body()\n    )\n)\n\n\n\n\n\n\n  \n    A small piece of the exibble dataset\n  \n  \n    Displaying the first five rows (of eight)\n  \n\n  \n  num\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    This dataset is included in Great Tables.\n  \n\n\n\n\n\n\n        \n\n\nNice! And it‚Äôs refreshing to see tables with fonts different from default set, as good as it might be. We kept the google_font() helper function as simple as possible, requiring only the font name in its name= argument. There are hundreds of fonts hosted on Google Fonts so look through the site, experiment, and find the fonts that you think look best in your tables!\n\n\nStriping rows in your table\nSome people like having row striping (a.k.a. zebra stripes) in their display tables. We also know that some advise against the practice. We understand it‚Äôs a controversial table issue, however, we also want to give you the creative freedom to just include the stripes. To that end, we now have that option in the package. There are two ways to enable this look:\n\ninvoking opt_row_striping() to quickly set row stripes in the table body\nusing some combination of three row_striping_* arguments in tab_options()\n\nLet‚Äôs use that example table with opt_row_striping().\n\ngt_tbl.opt_row_striping()\n\n\n\n\n\n\n  \n    A small piece of the exibble dataset\n  \n  \n    Displaying the first five rows (of eight)\n  \n\n  \n  num\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    This dataset is included in Great Tables.\n  \n\n\n\n\n\n\n        \n\n\nIt‚Äôs somewhat subtle but there is an alternating, slightly gray background (starting on the \"row_2\" row). The color is #808080 but with an alpha (transparency) value of 0.05.\nIf this is not exactly what you want, there is an alternative to this. The tab_options() method has three new arguments:\n\nrow_striping_background_color: color to use for row striping\nrow_striping_include_stub: should striping include cells in the stub?\nrow_striping_include_table_body: should striping include cells in the body?\n\nWith these new options, we can choose to stripe the entire row (stub cells + body cells) and use a darker color like \"lightblue\".\n\n(\n    gt_tbl\n    .tab_options(\n        row_striping_background_color=\"lightblue\",\n        row_striping_include_stub=True,\n        row_striping_include_table_body=True,\n    )\n)\n\n\n\n\n\n\n  \n    A small piece of the exibble dataset\n  \n  \n    Displaying the first five rows (of eight)\n  \n\n  \n  num\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    This dataset is included in Great Tables.\n  \n\n\n\n\n\n\n        \n\n\nThese alternating fills can be a good idea in some table display circumstances. Now, you can make that call and the functionality is there to support your decision.\n\n\nWrapping up\nWe are excited that this new functionality is now available in Great Tables. As ever, please let us know through GitHub Issues whether you ran into problems with any feature (new or old), or, if you have suggestions for further improvement!"
  },
  {
    "objectID": "blog/introduction-0.3.0/index.html",
    "href": "blog/introduction-0.3.0/index.html",
    "title": "Great Tables v0.3.0: So Many Style Options!",
    "section": "",
    "text": "As our work on Great Tables continues, we want you to be able to produce increasingly sophisticated tables. The look of an HTML table really matters and we believe aesthetics can elevate the presentation of tabular data. In the v0.3.0 release, we‚Äôve implemented features that are concerned with modifying the visual aspects of a table. Let‚Äôs get down to what‚Äôs new in this version.\n\nModifying the widths of columns\nBefore v0.3.0, you could not alter the widths of individual columns. This meant that to great extent your content decided the width of individual columns. Even though browsers do an adequate job in sizing the widths of table columns, it doesn‚Äôt always result in a pleasing-to-look-at table. What if you want more space? Maybe you want consistently-sized columns? There‚Äôs many reasons to want to have a choice in the matter and the new cols_width() method now makes this possible.\nHere‚Äôs an example where the widths of all columns are set with our preferred length values (in px).\n\nimport warnings\nfrom great_tables import GT, exibble\n\nwarnings.filterwarnings(\"ignore\")\nexibble_mini = exibble[[\"num\", \"char\", \"date\", \"datetime\", \"row\"]].head(5)\n\n(\n    GT(exibble_mini).cols_width(\n        cases={\n            \"num\": \"30px\",\n            \"char\": \"100px\",\n            \"date\": \"150px\",\n            \"datetime\": \"200px\",\n            \"row\": \"50px\"\n        }\n    )\n)\n\n\n\n\n\n  \n  \n  \n  \n  \n\n\n\n\n\n  num\n  char\n  date\n  datetime\n  row\n\n\n\n  \n    0.1111\n    apricot\n    2015-01-15\n    2018-01-01 02:22\n    row_1\n  \n  \n    2.222\n    banana\n    2015-02-15\n    2018-02-02 14:33\n    row_2\n  \n  \n    33.33\n    coconut\n    2015-03-15\n    2018-03-03 03:44\n    row_3\n  \n  \n    444.4\n    durian\n    2015-04-15\n    2018-04-04 15:55\n    row_4\n  \n  \n    5550.0\n    \n    2015-05-15\n    2018-05-05 04:00\n    row_5\n  \n\n\n\n\n\n\n        \n\n\nYou don‚Äôt have to define widths for all columns with cols_width(), and you‚Äôre free to use either px or % values when defining widths. See the reference page for more information and relevant examples.\n\n\nSetting options across the entire table with tab_options()\nThe new tab_options() method gives you the freedom to specify any of dozens of global style and layout options for the table. Want a font that‚Äôs used across all cells? Use the table_font_names= option. Do you need to make the text smaller, but only in the stub? Use stub_font_size= for that. The number of options is perhaps overwhelming at first but we think you‚Äôll enjoy having them around nonetheless. It makes styling the table (and developing your own table themes) a relatively simple task.\nHere‚Äôs an example that creates a table with a few common components and then uses tab_options() to set up a collection of fonts for the table with the (also new) system_fonts() function:\n\nfrom great_tables import md, system_fonts\n\ngt_tbl = (\n    GT(\n        exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n        rowname_col=\"row\",\n        groupname_col=\"group\",\n    )\n    .tab_header(\n        title=md(\"Data listing from **exibble**\"),\n        subtitle=md(\"`exibble` is a **Great Tables** dataset.\"),\n    )\n    .fmt_number(columns=\"num\")\n    .fmt_currency(columns=\"currency\")\n    .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n)\n\ngt_tbl.tab_options(table_font_names=system_fonts(name=\"industrial\"))\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nNote that table_font_names= accepts a list of fonts that operate as fallbacks for users across different systems (i.e., they may not have the font you have). And the system_fonts() helper function in Great Tables makes this easy by providing you with themed, local font stacks that are meant to work across different computing platforms.\nHere‚Äôs another example where we set the width of the table to span across the entire page (or containing element).\n\ngt_tbl.tab_options(table_width=\"100%\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nOne more where the background color of the table is set to \"lightcyan\":\n\ngt_tbl.tab_options(table_background_color=\"lightcyan\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nThere are many more options available in tab_options(), so have a look at its reference page for more information and useful examples.\n\n\nUsing the new opt_*() methods to do more complex tasks with table options\nWhile tab_options() is a great method for setting global table options, sometimes you want to set a number of them at once for a combined effect. For that type of operation, we have the opt_*() series of methods. A common thing you might do is align the content in the table header, we can make that an easy thing with opt_align_table_header():\n\ngt_tbl.opt_align_table_header(align=\"left\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nWith that, you don‚Äôt have to hunt through the myriad options within tab_options() to find the two args you need to get the job done.\nThe opt_all_caps() method transforms the text within the column labels, the stub, and in all row groups so that we get an all-capitalized (yet somewhat sized down) look that better differentiates the labels from the data. It‚Äôs rather easy to use, just do this:\n\ngt_tbl.opt_all_caps()\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nThis sets nine options you‚Äôd otherwise set in tab_options() all at once, making life generally easier.\nHere‚Äôs one last example, this time using opt_vertical_padding(). You‚Äôd use that if you‚Äôre dissatisfied with the level of top/bottom padding within cells of all locations (e.g., in the table body, in the column labels, etc.). You can either make a table taller or more ‚Äòcompressed‚Äô with a single argument: scale=. Here‚Äôs an example where the amount of vertical padding is reduced, resulting in a table taking up less vertical space.\n\ngt_tbl.opt_vertical_padding(scale=0.5)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nWe have the following methods available in the opt_*() family\n\nopt_align_table_header()\nopt_all_caps()\nopt_vertical_padding()\nopt_horizontal_padding()\n\nand we plan to add more opt_*() methods in future releases.\n\n\nA new formatting method: fmt_image()\nWouldn‚Äôt it be great to add graphics to your table? The fmt_image() method provides an easy way to add image files on disk into table body cells. The cells need to contain some reference to an image file. The path= and file_pattern= arguments give you some flexibility in defining exactly where the image files live.\nHere‚Äôs an example using the metro dataset that‚Äôs included within Great Tables.\n\nfrom great_tables.data import metro\nfrom importlib_resources import files\n\nimg_paths = files(\"great_tables\") / \"data/metro_images\"\nmetro_mini = metro[[\"name\", \"lines\", \"passengers\"]].head(5)\n\n(\n    GT(metro_mini)\n    .fmt_image(columns=\"lines\", path=img_paths, file_pattern=\"metro_{}.svg\")\n    .fmt_integer(columns=\"passengers\")\n    .cols_label(\n        name=\"Station\",\n        lines=\"Metro Lines\",\n        passengers=\"Passengers per Year (2021)\"\n    )\n    .tab_options(table_width=\"700px\")\n)\n\n\n\n\n\n\n\n  Station\n  Metro Lines\n  Passengers per Year (2021)\n\n\n\n  \n    Argentine\n    \n    2,079,212\n  \n  \n    Bastille\n      \n    8,069,243\n  \n  \n    B√©rault\n    \n    2,106,827\n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n     \n    1,909,005\n  \n  \n    Charles de Gaulle‚Äî√âtoile\n      \n    4,291,663\n  \n\n\n\n\n\n\n        \n\n\nNotice that path=img_paths specified the folder the images live in, and file_pattern=\"metro_{}.svg\" provided a template for converting each value in the lines column to an SVG file name.\nThe fmt_image() method supports three kinds of files as inputs, either: (1) complete http/https or local paths to the files; (2) the file names, where a common path can be provided via the path= arg; or (3) a fragment of the file name, as shown in the example above.\nThe package has some graphics stored in the data/metro_images directory. They are SVGs and they look very nice in the example table!\nSee the fmt_image() reference page for more information on this new method.\n\n\nWrapping up\nThis v0.3.0 release has some great new methods that add value to most any table-making endeavor. We also fixed a few bugs along the way so that you‚Äôll have a overall smoother experience when building beautiful tables. As ever, we‚Äôll work toward more and more improvements to give you more creative possibilities!"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Great Blogposts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nApr 16, 2025\n\n\nGreat Tables: Becoming the Polars .style Property\n\n\nMichael Chow\n\n\n\n\nFeb 11, 2025\n\n\nHow We Used Great Tables to Supercharge Reporting in Pointblank\n\n\nRich Iannone\n\n\n\n\nJan 24, 2025\n\n\nStyle Table Body with mask= in loc.body()\n\n\nJerry Wu\n\n\n\n\nDec 19, 2024\n\n\nGreat Tables v0.15.0: Flags, Icons, and Other Formatting Goodies\n\n\nRich Iannone\n\n\n\n\nDec 19, 2024\n\n\nContributing to Public Transit Data Analysis and Tooling\n\n\nMichael Chow\n\n\n\n\nDec 13, 2024\n\n\nRendering images anywhere in Great Tables\n\n\nJerry Wu\n\n\n\n\nNov 13, 2024\n\n\nGreat Tables: Generating LaTeX Output for PDF\n\n\nRich Iannone\n\n\n\n\nOct 10, 2024\n\n\nGreat Tables v0.13.0: Applying styles to all table locations\n\n\nRich Iannone and Michael Chow\n\n\n\n\nSep 30, 2024\n\n\nGreat Tables v0.12.0: Google Fonts and zebra stripes\n\n\nRich Iannone\n\n\n\n\nJul 8, 2024\n\n\nGreat Tables for Scientific Publishing\n\n\nRich Iannone\n\n\n\n\nMay 16, 2024\n\n\nPyCon 2024: Making Beautiful, Publication Quality Tables is Possible in 2024\n\n\nMichael Chow\n\n\n\n\nApr 24, 2024\n\n\nGreat Tables is now BYODF (Bring Your Own DataFrame)\n\n\nMichael Chow\n\n\n\n\nApr 4, 2024\n\n\nThe Design Philosophy of Great Tables\n\n\nRich Iannone and Michael Chow\n\n\n\n\nMar 19, 2024\n\n\nGreat Tables v0.4.0: Nanoplots and More\n\n\nRich Iannone\n\n\n\n\nFeb 16, 2024\n\n\nGreat Tables v0.3.0: So Many Style Options!\n\n\nRich Iannone\n\n\n\n\nFeb 8, 2024\n\n\nUsing Polars to Win at Super Bowl Squares\n\n\nMichael Chow\n\n\n\n\nJan 24, 2024\n\n\nGreat Tables v0.2.0: Easy Data Coloring\n\n\nRich Iannone\n\n\n\n\nJan 8, 2024\n\n\nGreat Tables: The Polars DataFrame Styler of Your Dreams\n\n\nMichael Chow\n\n\n\n\nJan 4, 2024\n\n\nIntroducing Great Tables\n\n\nRich Iannone\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/introduction-0.4.0/index.html",
    "href": "blog/introduction-0.4.0/index.html",
    "title": "Great Tables v0.4.0: Nanoplots and More",
    "section": "",
    "text": "The recent v0.4.0 release of Great Tables contains nanoplots as a major new feature. So, in this post I‚Äôll concentrate on showing you all the things you can do with nanoplots. What are nanoplots? Well, with nanoplots you can do this:\n\n\nShow the code\nfrom great_tables import GT, md\nfrom great_tables.data import illness\nimport polars as pl\n\nillness_mini = (\n    pl.from_pandas(illness)\n    .head(10)\n    .select(\n        \"test\", values=pl.concat_str(pl.exclude(\"test\", \"units\"), separator=\" \", ignore_nulls=True)\n    )\n    .slice(1, 9)\n)\n\n(\n    GT(illness_mini, rowname_col=\"test\")\n    .fmt_nanoplot(columns=\"values\")\n    .tab_header(md(\"Partial summary of daily tests&lt;br&gt;performed on YF patient\"))\n    .tab_stubhead(label=md(\"**Test**\"))\n    .cols_label(values=md(\"*Progression*\"))\n    .cols_align(align=\"center\", columns=\"values\")\n    .tab_source_note(source_note=\"Measurements from Day 3 through to Day 8.\")\n)\n\n\n\n\n\n\n\n  \n    Partial summary of daily testsperformed on YF patient\n  \n\n  Test\n  Progression\n\n\n\n  \n    WBC\n    30.34.005.264.269.9210.524.830.319.04.0010.0\n  \n  \n    Neutrophils\n    27.22.004.874.727.9218.222.127.216.62.008.00\n  \n  \n    RBC\n    5.982.685.725.984.234.834.122.683.324.005.50\n  \n  \n    Hb\n    16075153135126115758795120160\n  \n  \n    PLT\n    30025.667.038.627.426.274.136.225.6100300\n  \n  \n    ALT\n    12.8K9.0012.8K12.6K6.43K4.26K1.62K6735129.0050.0\n  \n  \n    AST\n    23.7K15.023.7K21.4K14.7K8.69K2.19K1.14K78215.040.0\n  \n  \n    TBIL\n    1630117144137158127105163018.8\n  \n  \n    DBIL\n    144071.410594.614411883.612606.80\n  \n\n  \n  \n  \n    Measurements from Day 3 through to Day 8.\n  \n\n\n\n\n\n\n        \n\n\nWhile the emphasis here will be on the aforementioned nanoplots feature, the last two releases (v0.3.1 and v0.4.0) overall gave us a nice collection of improvements which includes:\n\nthe fmt_nanoplot() method for adding nanoplots to your table\nimproved HTML table representations in different code environments\nintegration of Polars selectors in the columns= arg of all formatting (fmt_*()) methods\nthe save() method for saving a GT table as an image file\nrendering a GT table as an HTML string though as_raw_html()\n\nNow let‚Äôs dive into the wonderful world of nanoplots!\n\nNanoplots, small interactive plots in your table\nNanoplots are small yet information-laden plots that fit nicely into table cells. They are interactive, allowing for more information to be shown on hovering (or through touch when that interaction is available). Nanoplots try to show individual data points with reasonably good visibility (space is limited, this is going in a table after all!) and the plot representations change depending on the data fed into them.\nWe can generate nanoplots via the fmt_nanoplot() method. Let‚Äôs make two nanoplots of the two different available plot types: \"line\" and \"bar\":\n\nrandom_numbers_df = pl.DataFrame(\n    {\n        \"i\": range(1, 5),\n        \"lines\": [\n            \"20 23 6 7 37 23 21 4 7 16\",\n            \"2.3 6.8 9.2 2.42 3.5 12.1 5.3 3.6 7.2 3.74\",\n            \"-12 -5 6 3.7 0 8 -7.4\",\n            \"2 0 15 7 8 10 1 24 17 13 6\",\n        ],\n    }\n).with_columns(bars=pl.col(\"lines\"))\n\n(\n    GT(random_numbers_df, rowname_col=\"i\")\n    .fmt_nanoplot(columns=\"lines\", plot_type=\"line\")\n    .fmt_nanoplot(columns=\"bars\", plot_type=\"bar\")\n)\n\n\n\n\n\n\n\n  \n  lines\n  bars\n\n\n\n  \n    1\n    3742023673723214716\n    3702023673723214716\n  \n  \n    2\n    12.12.302.306.809.202.423.5012.15.303.607.203.74\n    12.102.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    3\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    4\n    2402015781012417136\n    2402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nAs can be seen, the method accepts bundles of values per cell that are formatted as strings (with spaces between each of the values). You can also use Polars list columns as acceptable input.\n\n\nAdding reference lines and highlighted areas\nIt‚Äôs possible to add in a reference line and a reference area to individual plots. These may be useful to highlight a particular statistic (e.g., median or minimum value) or a bounded region of interest (e.g., the area between the first and third quartiles). Here is an example of how to use these options via the reference_line= and reference_area= arguments:\n\n(\n    GT(random_numbers_df, rowname_col=\"i\")\n    .fmt_nanoplot(\n        columns=\"lines\",\n        reference_line=\"mean\",\n        reference_area=[\"min\", \"q1\"]\n    )\n    .fmt_nanoplot(\n        columns=\"bars\",\n        plot_type=\"bar\",\n        reference_line=\"max\",\n        reference_area=[\"max\", \"median\"])\n)\n\n\n\n\n\n\n\n  \n  lines\n  bars\n\n\n\n  \n    1\n    16.43742023673723214716\n    37.03742023673723214716\n  \n  \n    2\n    5.6212.12.302.306.809.202.423.5012.15.303.607.203.74\n    12.112.12.302.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    3\n    ‚àí0.968.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n    8.008.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    4\n    9.362402015781012417136\n    24.02402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nHaving a reference line and/or area can be valuable in different situations. We make it easy by allowing you to mix-and-match numeric values and a set of keywords (these are: \"mean\", \"median\", \"min\", \"max\", \"q1\", \"q3\", \"first\", or \"last\").\n\n\nSimple bars\nWe can also have single-value bar plots and line plots. These will run in the horizontal direction and such plots are meant for easy value comparisons (which works great in tables). To make this work, give fmt_nanoplot() a column of numeric values. The following example shows how fmt_nanoplot() can be used to create single-value bar and line plots.\n\nsingle_vals_df = pl.DataFrame(\n    {\n        \"i\": range(1, 6),\n        \"bars\": [4.1, 1.3, -5.3, 0, 8.2],\n        \"lines\": [12.44, 6.34, 5.2, -8.2, 9.23]\n    }\n)\n\n(\n    GT(single_vals_df, rowname_col=\"i\")\n    .fmt_nanoplot(columns=\"bars\", plot_type=\"bar\")\n    .fmt_nanoplot(columns=\"lines\", plot_type=\"line\")\n)\n\n\n\n\n\n\n\n  \n  bars\n  lines\n\n\n\n  \n    1\n    4.10\n    12.4\n  \n  \n    2\n    1.30\n    6.34\n  \n  \n    3\n    ‚àí5.30\n    5.20\n  \n  \n    4\n    0\n    ‚àí8.20\n  \n  \n    5\n    8.20\n    9.23\n  \n\n\n\n\n\n\n        \n\n\nNotice that there is some light interactivity available here as well! When hovering over a plotted bar or line the data value will appear.\n\n\nCustomizing with nanoplot_options()\nWe provide a lot of options for customizing your nanoplots. With the nanoplot_options() helper function, it‚Äôs possible to change the look and feel for a set of nanoplots. The options= argument of fmt_nanoplot() is where you‚Äôd need to invoke that helper function. Some possibilities for customization include determining which nanoplot elements are present, changing the sizes and colors of different elements, and a whole lot more! Here‚Äôs an example where both line- and bar-based nanoplots retain their basic compositional elements, but their appearance is quite different.\n\nfrom great_tables import nanoplot_options\n\n(\n    GT(random_numbers_df)\n    .fmt_nanoplot(\n        columns=\"lines\",\n        options=nanoplot_options(\n            data_point_radius=8,\n            data_point_stroke_color=\"black\",\n            data_point_stroke_width=3,\n            data_point_fill_color=\"white\",\n            data_line_type=\"straight\",\n            data_line_stroke_color=\"green\",\n            data_line_stroke_width=5,\n            data_area_fill_color=\"green\",\n            show_data_area=False,\n        ),\n    )\n    .fmt_nanoplot(\n        columns=\"bars\",\n        plot_type=\"bar\",\n        options=nanoplot_options(\n            data_bar_stroke_color=\"brown\",\n            data_bar_fill_color=\"yellow\",\n            data_bar_negative_stroke_color=\"black\",\n            data_bar_negative_fill_color=\"blue\",\n        ),\n    )\n)\n\n\n\n\n\n\n\n  i\n  lines\n  bars\n\n\n\n  \n    1\n    3742023673723214716\n    3702023673723214716\n  \n  \n    2\n    12.12.302.306.809.202.423.5012.15.303.607.203.74\n    12.102.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    3\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    4\n    2402015781012417136\n    2402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nWe want you to have a lot of creative control for how these tiny plots are displayed. So, when you need it, nanoplot_options() is there for you!\n\n\nWrapping up\nWe‚Äôre always excited to offer new and exciting features that make summary tables fun and useful. The new nanoplots functionality is something we will continue to iterate on since there is definitely room for plotting innovation in tables for display. And there‚Äôs a lot more to nanoplots than these examples can show. For much more information on this, check out the Get Started guide on nanoplots. Please let us know through GitHub Issues whether you ran into problems with this (or any other) feature, or, if you have suggestions for improvement!"
  },
  {
    "objectID": "blog/pointblank-intro/index.html",
    "href": "blog/pointblank-intro/index.html",
    "title": "How We Used Great Tables to Supercharge Reporting in Pointblank",
    "section": "",
    "text": "The Great Tables package allows you to make tables, and they‚Äôre really great when part of a report, a book, or a web page. The API is meant to be easy to work with so DataFrames could be made into publication-quality tables without a lot of hassle. And having nice-looking tables in the mix elevates the quality of the medium you‚Äôre working in.\nWe were inspired by this and decided to explore what it could mean to introduce a package where reporting is largely in the form of beautiful tables. To this end, we started work on a new Python package that generates tables (c/o Great Tables) as reporting objects. This package is called Pointblank, its focus is that of data validation, and the reporting tables it can produce informs users on the results of a data validation workflow. In this post we‚Äôll go through how Pointblank:\n\nenables you to validate many types of DataFrames and SQL databases\nprovides easy-to-understand validation result tables and thorough drilldowns\ngives you nice previews of data tables across a range of backends\n\n\nValidating data with Pointblank\nJust like Great Tables, Pointblank‚Äôs primary input is a table and the goal of that library is to perform checks of the tabular data. Other libraries in this domain include Great Expectations, pandera, Soda, and PyDeequ.\nBelow is the main validation report table that users are likely to see quite often. Each row is a validation step, with columns reporting details about each step and their results.\n\n\nShow the code\nimport pointblank as pb\n\nvalidation = (\n    pb.Validate(\n        data=pb.load_dataset(dataset=\"small_table\", tbl_type=\"polars\"),\n        label=\"An example validation\",\n        thresholds=(0.1, 0.2, 0.5),\n    )\n    .col_vals_gt(columns=\"d\", value=1000)\n    .col_vals_le(columns=\"c\", value=5)\n    .col_exists(columns=[\"date\", \"date_time\"])\n    .interrogate()\n)\n\nvalidation\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n  \n    Pointblank Validation\n  \n  \n    An example validationPolarsWARN0.1STOP0.2NOTIFY0.5\n  \n\n  \n  \n  STEP\n  COLUMNS\n  VALUES\n  TBL\n  EVAL\n  UNITS\n  PASS\n  FAIL\n  W\n  S\n  N\n  EXT\n\n\n\n  \n    #CF142B\n    1\n    \n        \n        \n\n    col_vals_gt\n    \n        \n            \n            \n        \n    \n\n        \n         col_vals_gt()\n        \n    d\n    1000\n    \n    \n        \n            \n            \n            \n        \n    \n\n    ‚úì\n    13\n    70.54\n    60.46\n    ‚óè\n    ‚óè\n    ‚óã\n    CSV\n  \n  \n    #CF142B\n    2\n    \n        \n        \n\n    col_vals_lte\n    \n        \n            \n            \n        \n    \n\n        \n         col_vals_le()\n        \n    c\n    5\n    \n    \n        \n            \n            \n            \n        \n    \n\n    ‚úì\n    13\n    50.38\n    80.62\n    ‚óè\n    ‚óè\n    ‚óè\n    CSV\n  \n  \n    #4CA64C\n    3\n    \n        \n        \n\n    col_exists\n    \n        \n            \n            \n            \n        \n    \n\n        \n         col_exists()\n        \n    date\n    ‚Äî\n    \n    \n        \n            \n            \n            \n        \n    \n\n    ‚úì\n    1\n    11.00\n    00.00\n    ‚óã\n    ‚óã\n    ‚óã\n    ‚Äî\n  \n  \n    #4CA64C\n    4\n    \n        \n        \n\n    col_exists\n    \n        \n            \n            \n            \n        \n    \n\n        \n         col_exists()\n        \n    date_time\n    ‚Äî\n    \n    \n        \n            \n            \n            \n        \n    \n\n    ‚úì\n    1\n    11.00\n    00.00\n    ‚óã\n    ‚óã\n    ‚óã\n    ‚Äî\n  \n\n  \n  \n  \n    2025-02-11 17:51:12 UTC&lt; 1 s2025-02-11 17:51:12 UTC\n  \n\n\n\n\n\n\n        \n\n\nThe first validation step (cols_val_gt()) checks the d column in the data, to ensure each value is greater than 1000. Notice that the red bar on the left indicates it failed, and the FAIL column says it has 6 failing values out of 13 UNITS.\nThe table is chock full of the information you need when doing data validation tasks. And it‚Äôs also easy on the eyes. Some cool features include:\n\na header with information on the type of input table plus important validation options\nvertical color strips on the left side to indicate overall status of the rows\nicons in several columns (space saving and they let you know what‚Äôs up)\n‚ÄòCSV‚Äô buttons that, when clicked, provide you with a CSV file\na footer with timing information for the analysis\n\nIt‚Äôs a nice table and it scales nicely to the large variety of validation types and options available in the Pointblank library. Viewing this table is a central part of using that library and the great thing about the reporting being a table like this is that it can be shared by placing it in a publication environment of your choosing (for example, it could be put in a Quarto document).\nHere is the code that was used to generate the data validation above:\n\nimport pointblank as pb\n\nvalidation = (\n    pb.Validate(\n        data=pb.load_dataset(dataset=\"small_table\", tbl_type=\"polars\"),\n        label=\"An example validation\",\n        thresholds=(0.1, 0.2, 0.5),\n    )\n    .col_vals_gt(columns=\"d\", value=1000)\n    .col_vals_le(columns=\"c\", value=5)\n    .col_exists(columns=[\"date\", \"date_time\"])\n    .interrogate()\n)\n\nvalidation\n\nPointblank makes it easy to get started by giving you a simple entry point (Validate()), allowing you to define as many validation steps as needed. Each validation step is specified by calling methods like .cols_vals_gt(), which is short for checking that ‚Äúcolumn values are greater than‚Äù some specified value.\nPointblank enables you to validate many types of DataFrames and SQL databases. Pointblank supports Pandas and Polars through Narwhals, and numerous backends (like DuckDB and MySQL) are also supported though our Ibis integration.\n\n\nExploring data validation failures\nNote that the above validation report table showed 6 failures in the first validation step. You might want to know exactly what failed, giving you a chance to fix the underlying data quality issues. To do that, you can use the get_step_report() method:\n\nvalidation.get_step_report(i=1)\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n  \n    Report for Validation Step 1\n  \n  \n    ASSERTION d &gt; 10006 / 13 TEST UNIT FAILURES IN COLUMN 6EXTRACT OF 6 ROWS WITH TEST UNIT FAILURES IN RED:\n  \n\n  \n  date_timeDatetime\n  dateDate\n  aInt64\n  bString\n  cInt64\n  dFloat64\n  eBoolean\n  fString\n\n\n\n  \n    5\n    2016-01-09 12:36:00\n    2016-01-09\n    8\n    3-ldm-038\n    7\n    283.94\n    True\n    low\n  \n  \n    7\n    2016-01-15 18:46:00\n    2016-01-15\n    7\n    1-knw-093\n    3\n    843.34\n    True\n    high\n  \n  \n    9\n    2016-01-20 04:30:00\n    2016-01-20\n    3\n    5-bce-642\n    9\n    837.93\n    False\n    high\n  \n  \n    10\n    2016-01-20 04:30:00\n    2016-01-20\n    3\n    5-bce-642\n    9\n    837.93\n    False\n    high\n  \n  \n    11\n    2016-01-26 20:07:00\n    2016-01-26\n    4\n    2-dmx-010\n    7\n    833.98\n    True\n    low\n  \n  \n    12\n    2016-01-28 02:51:00\n    2016-01-28\n    2\n    7-dmx-010\n    8\n    108.34\n    False\n    low\n  \n\n\n\n\n\n\n        \n\n\nThe use of a table for reporting is ideal here! The main features of this step report table include:\n\na header with summarized information\nthe selected rows that contain the failures\na highlighted column of interest\n\nDifferent types of validation methods will have step report tables that organize the pertinent information in a way that makes sense for the validation performed.\n\n\nPreviewing datasets across backends\nBecause many of the backends Pointblank supports have varying ways to view the underlying data, we provide a unified preview() function. It gives you a beautiful and consistent view of any data table. Here is how it looks against a 2,000 row DuckDB table that‚Äôs included in the package (game_revenue):\n\n\nShow the code\npb.preview(pb.load_dataset(dataset=\"game_revenue\", tbl_type=\"duckdb\"))\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n  \n    DuckDBRows2,000Columns11\n  \n\n  \n  player_idstring\n  session_idstring\n  session_starttimestamp\n  timetimestamp\n  item_typestring\n  item_namestring\n  item_revenuefloat64\n  session_durationfloat64\n  start_daydate\n  acquisitionstring\n  countrystring\n\n\n\n  \n    1\n    ECPANOIXLZHF896\n    ECPANOIXLZHF896-eol2j8bs\n    2015-01-01 01:31:03+00:00\n    2015-01-01 01:31:27+00:00\n    iap\n    offer2\n    8.99\n    16.3\n    2015-01-01\n    google\n    Germany\n  \n  \n    2\n    ECPANOIXLZHF896\n    ECPANOIXLZHF896-eol2j8bs\n    2015-01-01 01:31:03+00:00\n    2015-01-01 01:36:57+00:00\n    iap\n    gems3\n    22.49\n    16.3\n    2015-01-01\n    google\n    Germany\n  \n  \n    3\n    ECPANOIXLZHF896\n    ECPANOIXLZHF896-eol2j8bs\n    2015-01-01 01:31:03+00:00\n    2015-01-01 01:37:45+00:00\n    iap\n    gold7\n    107.99\n    16.3\n    2015-01-01\n    google\n    Germany\n  \n  \n    4\n    ECPANOIXLZHF896\n    ECPANOIXLZHF896-eol2j8bs\n    2015-01-01 01:31:03+00:00\n    2015-01-01 01:42:33+00:00\n    ad\n    ad_20sec\n    0.76\n    16.3\n    2015-01-01\n    google\n    Germany\n  \n  \n    5\n    ECPANOIXLZHF896\n    ECPANOIXLZHF896-hdu9jkls\n    2015-01-01 11:50:02+00:00\n    2015-01-01 11:55:20+00:00\n    ad\n    ad_5sec\n    0.03\n    35.2\n    2015-01-01\n    google\n    Germany\n  \n  \n    1996\n    NAOJRDMCSEBI281\n    NAOJRDMCSEBI281-j2vs9ilp\n    2015-01-21 01:57:50+00:00\n    2015-01-21 02:02:50+00:00\n    ad\n    ad_survey\n    1.332\n    25.8\n    2015-01-11\n    organic\n    Norway\n  \n  \n    1997\n    NAOJRDMCSEBI281\n    NAOJRDMCSEBI281-j2vs9ilp\n    2015-01-21 01:57:50+00:00\n    2015-01-21 02:22:14+00:00\n    ad\n    ad_survey\n    1.35\n    25.8\n    2015-01-11\n    organic\n    Norway\n  \n  \n    1998\n    RMOSWHJGELCI675\n    RMOSWHJGELCI675-vbhcsmtr\n    2015-01-21 02:39:48+00:00\n    2015-01-21 02:40:00+00:00\n    ad\n    ad_5sec\n    0.03\n    8.4\n    2015-01-10\n    other_campaign\n    France\n  \n  \n    1999\n    RMOSWHJGELCI675\n    RMOSWHJGELCI675-vbhcsmtr\n    2015-01-21 02:39:48+00:00\n    2015-01-21 02:47:12+00:00\n    iap\n    offer5\n    26.09\n    8.4\n    2015-01-10\n    other_campaign\n    France\n  \n  \n    2000\n    GJCXNTWEBIPQ369\n    GJCXNTWEBIPQ369-9elq67md\n    2015-01-21 03:59:23+00:00\n    2015-01-21 04:06:29+00:00\n    ad\n    ad_5sec\n    0.12\n    18.5\n    2015-01-14\n    organic\n    United States\n  \n\n\n\n\n\n\n        \n\n\nNotice that the table displays only 10 rows by default, 5 from the top and 5 from the bottom. The grey text on the left of the table indicates the row number, and a blue line helps demarcate the top and bottom rows.\nThe preview() function had a few design goals in mind:\n\nget the dimensions of the table and display them prominently in the header\nprovide the column names and the column types\nhave a consistent line height along with a sensible limit to the column width\nuse a monospaced typeface having high legibility\nshould work for all sorts of tables!\n\nThis is a nice drop-in replacement for looking at DataFrames or Ibis tables (the types of tables that Pointblank can work with). If you were to inspect the DuckDB table materialized by pb.load_dataset(dataset=\"game_revenue\", tbl_type=\"duckdb\") without preview() you‚Äôd get this:\n\n\nShow the code\npb.load_dataset(dataset=\"game_revenue\", tbl_type=\"duckdb\")\n\n\nDatabaseTable: game_revenue\n  player_id        string\n  session_id       string\n  session_start    timestamp('UTC', 6)\n  time             timestamp('UTC', 6)\n  item_type        string\n  item_name        string\n  item_revenue     float64\n  session_duration float64\n  start_day        date\n  acquisition      string\n  country          string\n\n\n\nWhich is not nearly as good.\n\n\nIn closing\nWe hope this post is a good introduction to Pointblank and that it provides some insight on how Great Tables makes sense for reporting in a different library. If you‚Äôd like to learn more about Pointblank, please visit the project website and check out the many examples."
  },
  {
    "objectID": "blog/introduction-0.2.0/index.html",
    "href": "blog/introduction-0.2.0/index.html",
    "title": "Great Tables v0.2.0: Easy Data Coloring",
    "section": "",
    "text": "We enjoy working on Great Tables because we want everybody to easily make beautiful tables. Tables don‚Äôt have to be boring, they really could be captivating and insightful. With every release we get closer and closer to realizing our mission and, as such, we‚Äôre happy to announce the v0.2.0 release that‚Äôs now on PyPI.\nThe really big feature that‚Äôs available with this release is the data_color() method. It gives you several options for colorizing data cells based on the underlying data. The method automatically scales color values according to the data in order to emphasize differences or reveal trends. The example below emphasizes large currency values with a \"darkgreen\" fill color.\n\nfrom great_tables import GT, exibble\n\n(\n    GT(exibble[[\"currency\", \"date\", \"row\"]].head(4), rowname_col=\"row\")\n    .data_color(\n        columns=\"currency\",\n        palette=[\"lightblue\", \"darkgreen\"]\n    )\n)\n\n\n\n\n\n\n\n  \n  currency\n  date\n\n\n\n  \n    row_1\n    49.95\n    2015-01-15\n  \n  \n    row_2\n    17.95\n    2015-02-15\n  \n  \n    row_3\n    1.39\n    2015-03-15\n  \n  \n    row_4\n    65100.0\n    2015-04-15\n  \n\n\n\n\n\n\n        \n\n\nNote that we use columns= to specify which columns get the colorizing treatment (just currency here) and the palette= is given as a list of color values. From this we can see that the 65100.0 value polarizes the data coloring process; it is \"darkgreen\" while all other values are \"lightblue\" (with no interpolated colors in between). Also, isn‚Äôt it nice that the text adapts to the background color?\nThe above example is suitable for emphasizing large values, but, maybe you consider the extreme value to be something that‚Äôs out of bounds? For that, we can use the domain= and na_value= arguments to gray-out the extreme values. We‚Äôll also nicely format the currency column in this next example.\n\n(\n    GT(exibble[[\"currency\", \"date\", \"row\"]].head(4), rowname_col=\"row\")\n    .data_color(\n        columns=\"currency\",\n        palette=[\"lightblue\", \"darkgreen\"],\n        domain=[0, 50],\n        na_color=\"lightgray\"\n    )\n    .fmt_currency(\n        columns=\"currency\",\n        currency=\"GBP\",\n        use_subunits=False\n    )\n)\n\n\n\n\n\n\n\n  \n  currency\n  date\n\n\n\n  \n    row_1\n    ¬£50\n    2015-01-15\n  \n  \n    row_2\n    ¬£18\n    2015-02-15\n  \n  \n    row_3\n    ¬£1\n    2015-03-15\n  \n  \n    row_4\n    ¬£65,100\n    2015-04-15\n  \n\n\n\n\n\n\n        \n\n\nNow the very large value is in \"lightgray\", making all other values easier to compare. We did setting domain=[0, 50] and specifying na_color=\"lightgray\". This caused the out-of-bounds value of 65100 to have a light gray background. Notice that the values are also formatted as currencies, and this is thanks to fmt_currency() which never interferes with styling.\nHere‚Äôs a more inspirational example that uses a heavily-manipulated version of the countrypops dataset (thanks again, Polars!) along with a color treatment that‚Äôs mediated by data_color(). Here, the population values can be easily compared by the amount of \"purple\" within them.\n\nfrom great_tables.data import countrypops\nimport polars as pl\nimport polars.selectors as cs\n\nwide_pops = (\n    pl.from_pandas(countrypops)\n    .filter(\n        pl.col(\"country_code_2\").is_in([\"FM\", \"GU\", \"KI\", \"MH\", \"MP\", \"NR\", \"PW\"])\n        & pl.col(\"year\").is_in([2000, 2010, 2020])\n    )\n    .pivot(index=\"country_name\", on=\"year\", values=\"population\")\n    .sort(\"2020\", descending=True)\n)\n\n(\n    GT(wide_pops, rowname_col=\"country_name\")\n    .tab_header(\n        title=\"Populations of Select Countries in Oceania\",\n        subtitle=\"Population values are from 2000, 2010, and 2020.\",\n    )\n    .tab_spanner(label=\"Total Population\", columns=cs.all())\n    .fmt_integer(columns=[\"2000\", \"2010\", \"2020\"])\n    .data_color(palette=[\"white\", \"purple\"], domain=[0, 1.7e5])\n)\n\n\n\n\n\n\n  \n    Populations of Select Countries in Oceania\n  \n  \n    Population values are from 2000, 2010, and 2020.\n  \n\n  \n  \n    Total Population\n  \n\n\n  2000\n  2010\n  2020\n\n\n\n  \n    Guam\n    160,188\n    164,905\n    169,231\n  \n  \n    Kiribati\n    88,826\n    107,995\n    126,463\n  \n  \n    Micronesia (Federated States)\n    111,709\n    107,588\n    112,106\n  \n  \n    Northern Mariana Islands\n    80,338\n    54,087\n    49,587\n  \n  \n    Marshall Islands\n    54,224\n    53,416\n    43,413\n  \n  \n    Palau\n    19,726\n    18,540\n    17,972\n  \n  \n    Nauru\n    10,377\n    10,241\n    12,315\n  \n\n\n\n\n\n\n        \n\n\nThis was just a sampler of what you can do with the all-new data_color() method. Take a look at these pages for more information:\n\nThe Colorizing with Data page in the Get Started Guide, which provides more details on how to use data_color()\nThe guide on Basic Styling covers general styling (e.g., bold text, underlines, etc.) with tab_style()\nThe reference pages for data_color() and tab_style()\n\nTo conclude, we‚Äôre happy that this new functionality is now in the Great Tables package! We hope you find it useful for your table-generation work. And we‚Äôll keep improving upon it so that you‚Äôll have more possibilities to make beautiful, and colorful, tables for presentation."
  },
  {
    "objectID": "blog/open-transit-tools/index.html",
    "href": "blog/open-transit-tools/index.html",
    "title": "Contributing to Public Transit Data Analysis and Tooling",
    "section": "",
    "text": "Hello! Michael Chow here. In 2025, I‚Äôll be focusing on contributing to open source data standards and tooling for public transit. If you work on analytics at a public transit agency, please reach out on linkedin or bluesky‚ÄîI would love to hear about your work, and how I could be useful!\n(I will also be at the TRB Annual Meeting 2025 in Washington D.C.)\nAt this point, you might be wondering three things:"
  },
  {
    "objectID": "blog/open-transit-tools/index.html#why-focus-on-open-source-in-public-transit",
    "href": "blog/open-transit-tools/index.html#why-focus-on-open-source-in-public-transit",
    "title": "Contributing to Public Transit Data Analysis and Tooling",
    "section": "Why focus on open source in public transit?",
    "text": "Why focus on open source in public transit?\nPeople doing analytics in public transit are active in developing open data standards (like GTFS, GTFS-RT, and TIDES). These open data sources are complex‚Äîthey cover schedules that change from week to week, buses moving in realtime, and passenger events. As people like me work more and more on open source tools, we start to lose touch with data analysis in realistic, complex settings. Working on open source transit data is an opportunity for me to ensure my open source tooling work helps people solve real, complex problems.\nAn inspiration for this angle is the book R for Data Science, which uses realistic datasets‚Äîlike NYC flights data‚Äîto teach data analysis using an ecosystem of packages called the Tidyverse. The Tidyverse packages have dozens of example datasets, and I think this focus on working through examples is part of what made their design so great.\nA few years ago, I worked with the Cal-ITP project to build out a warehouse for their GTFS schedule and realtime data. This left a profound impression on me: transit data is perfect for educating on data analyses in R and Python, as well as analytics engineering with tools like dbt or sqlmesh. Many analysts in public transit are querying warehouses, which opens up interesting use-cases with tools like dbplyr (in R) and ibis (in Python).\n(I‚Äôm also inspired by tools like tidytransit, and other communities like pharmaverse.org.)\nHere are some relevant talks:\n\nTidy Transit: Real Life Data Modeling for Public Transportation (Hunter Owens, Cal-ITP)\nThe Accidental Analytics Engineer (Michael Chow)"
  },
  {
    "objectID": "blog/open-transit-tools/index.html#why-is-this-on-the-great-tables-blog",
    "href": "blog/open-transit-tools/index.html#why-is-this-on-the-great-tables-blog",
    "title": "Contributing to Public Transit Data Analysis and Tooling",
    "section": "Why is this on the Great Tables blog?",
    "text": "Why is this on the Great Tables blog?\nIt gives me the opportunity to show off a lot of interesting, transit related tables!\n\nGreat Tables data: Paris metro lines\nIf you‚Äôve seen the Great Tables documentation for GT.fmt_image(), then you‚Äôve basked in this beautiful example from our Paris metro dataset.\n\n\nCode\nfrom great_tables import GT\nfrom great_tables.data import metro\nfrom importlib_resources import files\n\nimg_paths = files(\"great_tables\") / \"data/metro_images\"\n\nmetro_mini = metro[[\"name\", \"lines\", \"passengers\"]].head(5)\n\n(\n    GT(metro_mini)\n    .fmt_image(columns=\"lines\", path=img_paths, file_pattern=\"metro_{}.svg\")\n    .fmt_integer(columns=\"passengers\")\n)\n\n\n\n\n\n\n\n\n  name\n  lines\n  passengers\n\n\n\n  \n    Argentine\n    \n    2,079,212\n  \n  \n    Bastille\n      \n    8,069,243\n  \n  \n    B√©rault\n    \n    2,106,827\n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n     \n    1,909,005\n  \n  \n    Charles de Gaulle‚Äî√âtoile\n      \n    4,291,663\n  \n\n\n\n\n\n\n        \n\n\n\n\nAmtrak interactive route table\nOur 2022 Annual Posit Table Contest received the most incredible entry‚Äîan interactive table of Amtrak routes. The table uses the library reactable in R (which we recently ported to Python!).\nHere is a link to to the interactive Amtrak table by Josh Fangmeier. And I‚Äôll drop a handy screenshot below.\n\n\n\n\n\n\n\n\nCal-ITP trips table\nOur 2024 contest saw a great set of transit tables submitted by Tiffany Ku at CalTrans (submission, github repo). The submission showed service patterns using stop times binned by hour. It produced these for all California operators!\nHere is the reasoning given behind the table:\n\nWe can see what service patterns look like across operators by hour of the day. In one table, we can quickly see a summary snapshot of what this service pattern is and see the type of riders the operator typically serves. Here‚Äôs the same chart made in a paper about for transit in Calgary, Canada."
  },
  {
    "objectID": "blog/open-transit-tools/index.html#what-are-you-hoping-to-contribute",
    "href": "blog/open-transit-tools/index.html#what-are-you-hoping-to-contribute",
    "title": "Contributing to Public Transit Data Analysis and Tooling",
    "section": "What are you hoping to contribute?",
    "text": "What are you hoping to contribute?\nI‚Äôm hoping to focus on two things:\n\nWorkshops to support R and Python analyst teams (and help me appreciate their needs).\nCollaboration on creating open source tools and guides for analyzing transit data.\n\n\nWorkshops\nBeyond my obvious potential involvement as a table fanatic, I‚Äôm really interested in making the daily lives of R and Python users at public transit agencies easier.\n\nWorkshops on R. Think Tidyverse, Shiny, Quarto, querying warehouses.\nWorkshops on Python. Let‚Äôs say Polars, Quarto, publishing notebooks, Great Tables, dashboards.\nAnalytics engineering. How to get analysts to use your data models üòì.\n\nI‚Äôm open to whatever topics seem most useful, even if they aren‚Äôt in the list above.\n\n\n\n\n\n\nScheduling a workshop\n\n\n\nIf you‚Äôre a public transit agency, reach out on linkedin or bluesky, and I will send my calendly for scheduling.\n\n\n\n\nCollaboration\nI‚Äôm interested in understanding major challenges analytics teams working on public transit face, and the kind of strategic and tooling support they‚Äôd most benefit from. If you‚Äôre working on analytics in public transit, I would love to hear about what you‚Äôre working on, and the tools you use most.\nOne topic I‚Äôve discussed with a few agencies is ghost buses, which is when a bus is scheduled but never shows up. This is an interesting analysis because it combines GTFS schedule data with GTFS-RT realtime bus data.\nAnother is passenger events (e.g.¬†people tapping on or off a bus). This data is challenging because different vendors data record and deliver this data in different ways. This can make it hard for analysts across agencies to discuss analyses‚Äîevery analysis is different in its own way."
  },
  {
    "objectID": "blog/open-transit-tools/index.html#in-summary",
    "href": "blog/open-transit-tools/index.html#in-summary",
    "title": "Contributing to Public Transit Data Analysis and Tooling",
    "section": "In summary",
    "text": "In summary\nAnalytics in public transit is a really neat, impactful area‚Äîwith an active community working on open source data standards and tooling. As a data science tool builder on the open source team at Posit, PBC, my mission is to create value and give it away to teams using Python or R for code first data science. I‚Äôd love to support open source work in public transit however is most useful."
  },
  {
    "objectID": "blog/tables-for-scientific-publishing/index.html",
    "href": "blog/tables-for-scientific-publishing/index.html",
    "title": "Great Tables for Scientific Publishing",
    "section": "",
    "text": "Great Tables version 0.10.0 has be released today and it contains a host of new features to support tables meant for scientific publishing.\nIn this post, we‚Äôll review the big pieces that scientific tables need:\nWe‚Äôve added six new datasets, to help quickly show off scientific publishing! We‚Äôll use the new reactions and gibraltar datasets to create examples in the fields of Atmospheric Chemistry and Meteorology, respectively."
  },
  {
    "objectID": "blog/tables-for-scientific-publishing/index.html#unit-and-scientific-notation",
    "href": "blog/tables-for-scientific-publishing/index.html#unit-and-scientific-notation",
    "title": "Great Tables for Scientific Publishing",
    "section": "Unit and scientific notation",
    "text": "Unit and scientific notation\nWe added the reactions dataset to serve as the basis for examples in the discipline of Atmospheric Chemistry. The dataset contains reaction rate constants for gas-phase reactions of 1,683 organic compounds. Each of these compounds can potentially undergo reaction with hydroxyl radicals (OH), nitrate radicals (NO3), or chlorine atoms (Cl). These reaction rate constants are typically very small values in units of cm3 molecules‚Äì1 s‚Äì1. In the upcoming example, we‚Äôll pare down this massive dataset to only 11 rows representing the class of organic compounds known as mercaptans.\nTo make this table work well in a scientific reporting context, we need three pieces:\n\nway to represent units, like cm3\nmethod for typesetting chemical formulae, as in CH4\nformatting for very small numbers in scientific notation.\n\nGreat Tables provides the necessary functionality for all three requirements. Here is a summary table that tabulates rate constants for mercaptan compounds undergoing reaction with OH, O3, and Cl:\n\n\nShow the Code\nfrom great_tables import GT\nfrom great_tables.data import reactions\nimport polars as pl\nimport polars.selectors as ps\n\nreactions_mini = (\n    pl.from_pandas(reactions)\n    .filter(pl.col(\"cmpd_type\") == \"mercaptan\")\n    .select([\n        \"cmpd_name\",\n        \"cmpd_formula\",\n        ps.ends_with(\"k298\")\n    ])\n    .with_columns(\n        cmpd_formula=pl.concat_str(\n            \"%\" + pl.col(\"cmpd_formula\") + \"%\"\n        )\n    )\n)\n\n(\n    GT(reactions_mini, rowname_col=\"cmpd_name\")\n    .tab_header(title=\"Gas-phase reactions of selected mercaptan compounds\")\n    .tab_spanner(\n        columns=ps.ends_with(\"k298\"),\n        label=\"Reaction Rate Constant (298 K),&lt;br&gt;{{cm^3 molecules^‚Äì1 s^‚Äì1}}\"\n    )\n    .fmt_units(columns=\"cmpd_formula\")\n    .fmt_scientific(columns=ps.ends_with(\"k298\"))\n    .sub_missing()\n    .cols_hide(columns=\"O3_k298\")\n    .cols_label(\n        cmpd_formula=\"\",\n        OH_k298=\"OH\",\n        NO3_k298=\"{{%NO3%}}\",\n        Cl_k298=\"Cl\",\n    )\n    .opt_stylize(style=1, color=\"blue\")\n    .opt_horizontal_padding(scale=3)\n    .opt_table_font(stack=\"humanist\")\n)\n\n\n\n\n\n\n\n  \n    Gas-phase reactions of selected mercaptan compounds\n  \n\n  \n  \n  \n    Reaction Rate Constant (298 K),cm3 molecules‚Äì1 s‚Äì1\n  \n\n\n  OH\n  NO3\n  Cl\n\n\n\n  \n    methanethiol\n    CH4S\n    3.50 √ó 10‚àí11\n    9.20 √ó 10‚àí13\n    2.00 √ó 10‚àí10\n  \n  \n    ethanethiol\n    C2H6S\n    4.50 √ó 10‚àí11\n    1.21 √ó 10‚àí12\n    1.75 √ó 10‚àí10\n  \n  \n    propanethiol\n    C3H8S\n    5.30 √ó 10‚àí11\n    ‚Äî\n    2.14 √ó 10‚àí10\n  \n  \n    2-propanethiol\n    C3H8S\n    3.90 √ó 10‚àí11\n    ‚Äî\n    2.70 √ó 10‚àí10\n  \n  \n    1-butanethiol\n    C4H10S\n    5.60 √ó 10‚àí11\n    ‚Äî\n    ‚Äî\n  \n  \n    2-methyl-1-propanethiol\n    C4H10S\n    4.60 √ó 10‚àí11\n    ‚Äî\n    ‚Äî\n  \n  \n    2-butanethiol\n    C4H10S\n    3.80 √ó 10‚àí11\n    ‚Äî\n    1.65 √ó 10‚àí10\n  \n  \n    t-butylsulfide\n    C4H10S\n    2.90 √ó 10‚àí11\n    ‚Äî\n    ‚Äî\n  \n  \n    2-methylbutanethiol\n    C5H12S\n    5.20 √ó 10‚àí11\n    ‚Äî\n    ‚Äî\n  \n  \n    n-pentanethiol\n    C5H12S\n    ‚Äî\n    ‚Äî\n    1.97 √ó 10‚àí10\n  \n  \n    1,2-ethanedithiol\n    C2H6S2\n    3.80 √ó 10‚àí11\n    ‚Äî\n    ‚Äî\n  \n\n\n\n\n\n\n        \n\n\nThis is a nice-looking table! And note these pieces:\n\nThe label= argument to functions like .tab_spanner() supports the use of curly braces ({{/}}) for the specialized units notation. So using \"{{cm^3 molecules^‚Äì1 s^‚Äì1}}\" in the input will become cm3 molecules‚Äì1 s‚Äì1 in the output\nThe .fmt_units() method converts values that are already in units notation in the table body. For example, a cell with text \"%CH4S%\" becomes CH4S (the surrounding % indicates that the text should be interpreted as chemistry notation).\nThe .fmt_scientific() method formats values (in this case, very small values) to scientific notation (e.g., 3.50 √ó 10‚Äì11). Not doing so would make the table look very strange to a researcher that is familar with this sort of data.\n\nThe combination of units notation (and chemistry notation, which is a part of that) really makes the presentation of this table complete and understandable to a practioner of the field. Great Tables supports the use of units notation in spanner labels (with .tab_spanner()) and also in column labels (with .cols_labels()). The column label ‚ÄòNO3‚Äô was created with the latter method by supplying the text \"{{%NO3%}}\" as the column label for the NO3_k298 column."
  },
  {
    "objectID": "blog/tables-for-scientific-publishing/index.html#nanoplots",
    "href": "blog/tables-for-scientific-publishing/index.html#nanoplots",
    "title": "Great Tables for Scientific Publishing",
    "section": "Nanoplots",
    "text": "Nanoplots\nWe added the nanoplots feature to Great Tables in v0.4.0 (check out the intro blog post for a quick explainer) so that tables can contain small, info-packed plots that fit reasonably well into a table context. They are interactive in that hovering over the data points provides additional plot information. This approach brings together the advantages of plots (elucidation of trends in data) and tables (access to numerical values representing the data points) in a single summary visualization.\nVersion 0.10.0 of Great Tables adds the gibraltar dataset, which provides meteorological data (temeperature, humidity, wind speed, etc.) for the entire month of May 2024 at Gibraltar Airport Station.\nNanoplots, as mentioned, are great for condensing a lot of information into a small area. Our example here with the gibraltar dataset takes all of the temperature and humidity data for the first 10 days of May 2023 and displays them in easy-to-explore nanoplots across two columns:\n\n\nShow the Code\nfrom great_tables import GT, nanoplot_options\nfrom great_tables.data import gibraltar\nimport polars as pl\n\nnano_opts = nanoplot_options(\n    data_point_radius=4,\n    data_point_stroke_width=4,\n    data_point_stroke_color=\"black\",\n    data_point_fill_color=\"white\",\n    data_line_stroke_width=4,\n    data_line_stroke_color=\"gray\",\n    show_data_line=True,\n    show_data_points=True,\n    show_data_area=False,\n  )\n\ngibraltar_mini = (\n    pl.from_pandas(gibraltar)\n    .filter(pl.col(\"date\") &lt;= \"2023-05-10\")\n    .with_columns(pl.col(\"humidity\") * 100)\n    .select([\"date\", \"temp\", \"humidity\"])\n    .group_by(\"date\")\n    .agg(pl.col(\"temp\"), pl.col(\"humidity\"))\n    .sort(\"date\")\n)\n\n(\n  GT(gibraltar_mini)\n  .tab_header(\n    title=\"Meteorological Summary of Gibraltar Station\",\n    subtitle=\"Data taken from May 1-10, 2023.\"\n  )\n  .fmt_nanoplot(\n    columns=\"temp\", autoscale=True, options=nano_opts\n  )\n  .fmt_nanoplot(\n    columns=\"humidity\", autoscale=True, options=nano_opts\n  )\n  .fmt_date(\n    columns=\"date\",\n    date_style=\"wd_m_day_year\"\n  )\n  .cols_label(\n    date=\"Date\",\n    temp=\"Temperature, {{:degree:C}}\",\n    humidity=\"Humidity, % (RH)\",\n  )\n  .cols_align(\n    align=\"left\",\n    columns=[\"temp\", \"humidity\"]\n  )\n)\n\n\n\n\n\n\n\n  \n    Meteorological Summary of Gibraltar Station\n  \n  \n    Data taken from May 1-10, 2023.\n  \n\n  Date\n  Temperature, ¬∞C\n  Humidity, % (RH)\n\n\n\n  \n    Mon, May 1, 2023\n    30.016.118.918.917.818.918.917.817.817.818.918.917.817.817.217.817.217.817.818.921.121.122.222.222.222.222.222.221.121.121.121.120.020.020.020.020.018.920.018.918.917.817.217.217.217.217.217.2\n    1003768737773687373736464737372888277777364686060606464646873737378787883838883888894949494949494\n  \n  \n    Tue, May 2, 2023\n    30.016.117.217.217.217.217.817.817.817.817.817.817.817.817.817.818.918.918.918.918.918.918.918.920.021.121.121.122.222.222.222.222.222.222.222.222.221.121.120.020.018.918.918.918.918.918.9\n    100371001001001009494949494949494888888888888888888888378736864646064606060646468687878838383838383\n  \n  \n    Wed, May 3, 2023\n    30.016.118.918.918.920.018.918.918.920.020.018.918.918.918.918.920.020.020.020.021.121.120.020.021.121.121.121.122.221.121.121.121.121.121.121.121.120.020.020.020.020.020.018.918.918.918.9\n    10037838383737878837373787878737368687373686873736868646864686868686868687378787378787883838383\n  \n  \n    Thu, May 4, 2023\n    30.016.118.917.817.217.217.217.217.217.217.217.216.117.217.817.817.817.817.817.218.917.820.021.121.122.222.822.222.822.822.823.926.125.026.126.125.025.025.025.025.026.125.023.922.822.822.822.822.221.1\n    10037838388888888888882828882736883838382787768686869656965656561475447474741413941394447504747445360\n  \n  \n    Fri, May 5, 2023\n    30.016.121.121.121.121.121.121.121.121.121.120.018.917.217.217.217.217.817.817.817.817.817.818.918.918.918.920.020.020.021.121.120.023.925.023.922.822.822.222.222.220.020.020.020.018.918.918.9\n    10037.060.056.056.053.053.053.053.053.056.064.064.082.094.094.094.088.088.088.088.088.088.083.083.083.083.078.078.078.073.073.078.057.054.053.057.057.060.064.069.078.078.078.083.088.088.088.0\n  \n  \n    Sat, May 6, 2023\n    30.016.118.918.918.918.917.817.817.817.217.217.817.217.217.818.920.021.122.222.223.923.922.822.822.822.823.925.023.925.025.025.025.025.022.822.822.822.221.121.121.121.120.020.0\n    10037.088.094.094.083.088.088.083.088.094.088.082.082.077.078.073.068.064.064.053.053.057.057.057.057.057.050.050.044.047.047.047.044.057.047.047.050.064.060.053.064.068.078.0\n  \n  \n    Sun, May 7, 2023\n    30.016.120.020.018.920.020.020.020.020.020.021.120.020.020.020.020.020.021.121.122.222.823.925.026.126.126.125.022.822.823.923.922.822.823.923.922.823.922.822.822.222.823.923.923.922.822.8\n    10037.078.078.083.078.078.078.078.078.078.068.078.073.073.073.078.078.073.073.064.065.061.054.047.047.051.057.065.065.061.061.065.065.061.061.065.061.065.065.069.061.053.047.047.047.047.0\n  \n  \n    Mon, May 8, 2023\n    30.016.122.221.121.120.020.018.918.918.917.818.917.818.917.817.817.817.817.817.818.918.918.918.918.920.018.920.021.121.121.121.121.121.120.020.021.120.021.121.122.222.823.922.822.822.222.221.121.118.918.918.9\n    100376068737878888388888394889494941001001009494949494888888787878787878838378837878736965696573737878888888\n  \n  \n    Tue, May 9, 2023\n    30.016.120.021.122.823.922.822.822.221.117.817.818.918.918.917.817.817.217.217.217.217.817.817.817.817.817.817.818.920.018.918.921.122.827.830.030.030.027.227.828.928.928.927.227.227.227.227.226.126.125.0\n    10037.083.073.057.050.053.053.057.064.094.094.088.088.094.010094.094.010010094.094.088.088.088.088.088.088.083.078.083.083.078.069.045.037.037.037.048.042.042.040.040.048.048.045.045.045.047.047.050.0\n  \n  \n    Wed, May 10, 2023\n    30.016.125.025.025.025.025.025.023.923.923.923.923.922.822.822.822.221.122.223.922.822.222.222.222.222.222.222.822.822.822.822.222.822.822.822.822.222.222.222.221.121.121.121.120.020.020.020.020.020.0\n    10037505050505050535353504750535053686047507369696969696565656569656161616464646973736873737373737373\n  \n\n\n\n\n\n\n        \n\n\nOnce we have the data aggregated in the form of list columns, the .fmt_nanoplot() method shows us the trends of temperature and relative humidity values throughout the day (from 00:00 to 24:00). One interesting observation that can be made from the table is that on May 9, 2023 there was a late-day temperature increase that coincided with a corresponding decrease in relative humidity. Making such an observation without nanoplots would be quite a bit more difficult and would require some serious determination, necessitating a careful scanning of numbers across a row cells.\nUnits notation is ever useful and it is applied in one of the column labels of this table. It could potentially be difficult to format even simple things like the units of temperature. In this case we wanted to add in the temperature units of ¬∞C for the temperature column. Units notation has a collection of symbols available, including \":degree:\" (colons encapsulate the collection of symbol keywords), for insertion within units notation text. The example takes advantage of the available symbols and so having ¬∞C as part of a label is not too hard to express."
  },
  {
    "objectID": "blog/tables-for-scientific-publishing/index.html#hope-all-your-science-y-tables-are-great",
    "href": "blog/tables-for-scientific-publishing/index.html#hope-all-your-science-y-tables-are-great",
    "title": "Great Tables for Scientific Publishing",
    "section": "Hope all your (science-y) tables are great!",
    "text": "Hope all your (science-y) tables are great!\nWe did scientific work pretty heavily in the past and so we understand that great tables in the realm of science publication is something that could and should be possible. We‚Äôll keep doing more to make this even better in upcoming releases."
  },
  {
    "objectID": "blog/superbowl-squares/index.html",
    "href": "blog/superbowl-squares/index.html",
    "title": "Using Polars to Win at Super Bowl Squares",
    "section": "",
    "text": "The Super Bowl is upon us, and with it the glittering squares of chance. Maybe you‚Äôve seen Super Bowl Squares at your work. Maybe you‚Äôve played it with your pals. Or maybe you have no idea what it is.\nWhether you‚Äôre a Squares-head or not, this post will help you win with data."
  },
  {
    "objectID": "blog/superbowl-squares/index.html#what-is-super-bowl-squares",
    "href": "blog/superbowl-squares/index.html#what-is-super-bowl-squares",
    "title": "Using Polars to Win at Super Bowl Squares",
    "section": "What is Super Bowl Squares?",
    "text": "What is Super Bowl Squares?\nSuper Bowl Squares is a betting game, where you bet on the final digits of each team in a game.\nFor example, here are some scores with the final digit bolded:\n\nHome team score: 14\nAway team score: 7\n\nSo the final digits would be:\n\nHome team digit: 4\nAway team digit: 7\n\nLet‚Äôs say you choose the digits above, and write this as 4/7‚Äîmeaning a final digit of 4 for home and 7 for away. You would mark yourself on this square:\n\n\nCode\ndf = (\n    pl.DataFrame({\"x\": list(range(10))})\n    .join(pl.DataFrame({\"y\": list(range(10)), \"z\": \"_._\"}), how=\"cross\")\n    .with_columns(\n        z=pl.when((pl.col(\"x\") == 7) & (pl.col(\"y\") == 4)).then(pl.lit(\"4/7\")).otherwise(\"z\")\n    )\n    .pivot(index=\"x\", values=\"z\", on=\"y\")\n    .with_row_index()\n)\n\n(\n    GT(df, rowname_col=\"x\")\n    .tab_header(\"Example Superbowl Square\")\n    .tab_spanner(\"Home\", cs.all())\n    .tab_style(style.fill(\"green\"), loc.body(columns=\"4\", rows=pl.col(\"index\") == 7))\n    .tab_style(style.text(color=\"#FFFFFF\", weight=\"bold\"), loc.body())\n    .cols_hide(\"index\")\n    .tab_stubhead(\"Away\")\n)\n\n\n\n\n\n\n\n  \n    Example Superbowl Square\n  \n\n  Away\n  \n    Home\n  \n\n\n  0\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n\n\n\n  \n    0\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n  \n    1\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n  \n    2\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n  \n    3\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n  \n    4\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n  \n    5\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n  \n    6\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n  \n    7\n    _._\n    _._\n    _._\n    _._\n    4/7\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n  \n    8\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n  \n    9\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n    _._\n  \n\n\n\n\n\n\n        \n\n\nIf the final score ends up being Home 4, Away 7‚Äîding ding ding, big winner‚Äîyou win the pool, and hopefully take home some combination of money and glory. For more details on playing, see this WikiHow article."
  },
  {
    "objectID": "blog/superbowl-squares/index.html#why-analyze-squares",
    "href": "blog/superbowl-squares/index.html#why-analyze-squares",
    "title": "Using Polars to Win at Super Bowl Squares",
    "section": "Why analyze squares?",
    "text": "Why analyze squares?\nNot all options in a Super Bowl Squares are created equal. This is because there are specific point values you can add to your score. For example, touchdowns often to result in 7 points, and its common to score 3 points via a field goal. This means that ending up with a final digit of 5 is uncommon.\nAnalyzing the chance of each square winning let‚Äôs you pick the best ones. (In some versions of Super Bowl Squares, the squares get randomly assigned to people. In that case, knowing the chance of winning tells you whether you got a bum deal or not ;)."
  },
  {
    "objectID": "blog/superbowl-squares/index.html#what-squares-are-most-likely-to-win",
    "href": "blog/superbowl-squares/index.html#what-squares-are-most-likely-to-win",
    "title": "Using Polars to Win at Super Bowl Squares",
    "section": "What squares are most likely to win?",
    "text": "What squares are most likely to win?\nWe looked back at games for the KC Chiefs (away), and games for the San Francisco 49ers (home), and calculated the proportion of the time each team ended with a specific digit. Putting this together for the two teams, here is the chance of winning on a given square:\n\n\nCode\nimport polars as pl\nimport polars.selectors as cs\nfrom great_tables import GT, md\n\n\n# Utilities -----\n\n\ndef calc_n(df: pl.DataFrame, colname: str):\n    \"\"\"Count the number of final digits observed across games.\"\"\"\n\n    return df.select(final_digit=pl.col(colname).mod(10)).group_by(\"final_digit\").agg(n=pl.len())\n\n\ndef team_final_digits(game: pl.DataFrame, team_code: str) -&gt; pl.DataFrame:\n    \"\"\"Calculate a team's proportion of digits across games (both home and away).\"\"\"\n\n    home_n = calc_n(game.filter(pl.col(\"home_team\") == team_code), \"home_score\")\n    away_n = calc_n(game.filter(pl.col(\"away_team\") == team_code), \"away_score\")\n\n    joined = (\n        home_n.join(away_n, \"final_digit\")\n        .select(\"final_digit\", n=pl.col(\"n\") + pl.col(\"n_right\"))\n        .with_columns(prop=pl.col(\"n\") / pl.col(\"n\").sum())\n    )\n\n    return joined\n\n\n# Analysis -----\n\ngames = pl.read_csv(\"./games.csv\").filter(\n    pl.col(\"game_id\") != \"2023_22_SF_KC\",\n    pl.col(\"season\") &gt;= 2015,\n)\n\n# Individual probabilities of final digits per team\nhome = team_final_digits(games, \"KC\")\naway = team_final_digits(games, \"SF\")\n\n# Cross and multiply p(digit | team=KC)p(digit | team=SF) to get\n# the joint probability p(digit_KC, digit_SF | KC, SF)\njoint = (\n    home.join(away, how=\"cross\")\n    .with_columns(joint=pl.col(\"prop\") * pl.col(\"prop_right\"))\n    .sort(\"final_digit\", \"final_digit_right\")\n    .pivot(values=\"joint\", on=\"final_digit_right\", index=\"final_digit\")\n    .with_columns((cs.exclude(\"final_digit\") * 100).round(1))\n)\n\n# Display -----\n\n(\n    GT(joint, rowname_col=\"final_digit\")\n    .data_color(domain=[0, 4], palette=[\"red\", \"grey\", \"blue\"])\n    .tab_header(\n        \"Super Bowl Squares | Final Score Probabilities\",\n        \"Based on all NFL regular season and playoff games (2015-2023)\",\n    )\n    .tab_stubhead(\"\")\n    .tab_spanner(\"San Francisco 49ers\", cs.all())\n    .tab_stubhead(\"KC Chiefs\")\n    .tab_source_note(\n        md(\n            '&lt;span style=\"float: right;\"&gt;Source data: [Lee Sharpe, nflverse](https://github.com/nflverse/nfldata)&lt;/span&gt;'\n        )\n    )\n)\n\n\n\n\n\n\n\n  \n    Super Bowl Squares | Final Score Probabilities\n  \n  \n    Based on all NFL regular season and playoff games (2015-2023)\n  \n\n  KC Chiefs\n  \n    San Francisco 49ers\n  \n\n\n  0\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n\n\n\n  \n    0\n    2.3\n    1.5\n    0.6\n    2.4\n    1.7\n    0.9\n    1.2\n    3.2\n    1.1\n    0.8\n  \n  \n    1\n    1.8\n    1.2\n    0.5\n    1.9\n    1.3\n    0.7\n    0.9\n    2.6\n    0.9\n    0.6\n  \n  \n    2\n    1.1\n    0.7\n    0.3\n    1.2\n    0.8\n    0.4\n    0.6\n    1.6\n    0.5\n    0.4\n  \n  \n    3\n    1.7\n    1.1\n    0.5\n    1.8\n    1.3\n    0.7\n    0.9\n    2.5\n    0.8\n    0.6\n  \n  \n    4\n    1.8\n    1.2\n    0.5\n    1.9\n    1.3\n    0.7\n    0.9\n    2.6\n    0.9\n    0.6\n  \n  \n    5\n    0.7\n    0.5\n    0.2\n    0.7\n    0.5\n    0.3\n    0.4\n    1.0\n    0.3\n    0.2\n  \n  \n    6\n    1.0\n    0.6\n    0.2\n    1.0\n    0.7\n    0.4\n    0.5\n    1.4\n    0.5\n    0.3\n  \n  \n    7\n    2.3\n    1.5\n    0.6\n    2.4\n    1.7\n    0.9\n    1.2\n    3.4\n    1.1\n    0.8\n  \n  \n    8\n    0.8\n    0.5\n    0.2\n    0.8\n    0.6\n    0.3\n    0.4\n    1.1\n    0.4\n    0.3\n  \n  \n    9\n    1.0\n    0.7\n    0.3\n    1.1\n    0.8\n    0.4\n    0.5\n    1.5\n    0.5\n    0.4\n  \n\n  \n  \n  \n    Source data: Lee Sharpe, nflverse\n  \n\n\n\n\n\n\n        \n\n\nNotice how much higher the chance of winning on any score involving 7 is. This shows up in two places on the table:\n\nAcross the 7 row (i.e.¬†KC Chiefs end with a 7)\nDown the 7 column (i.e.¬†S.F. 49ers ends with a 7)\n\nMoreover, the 7/7 square has the highest chance (3.4%). Some other good squares are 7/0 (or 0/7), and 0/0."
  },
  {
    "objectID": "blog/superbowl-squares/index.html#go-forth-and-win-the-respect-of-your-coworkers",
    "href": "blog/superbowl-squares/index.html#go-forth-and-win-the-respect-of-your-coworkers",
    "title": "Using Polars to Win at Super Bowl Squares",
    "section": "Go forth and win the respect of your coworkers",
    "text": "Go forth and win the respect of your coworkers\nWe hope this square will make you the envy of your coworkers. Here at Great Tables, we‚Äôre not just interested in the beautiful display of tables, but your success in defeating the person in the cubicle next to you.\nAs a final shout out, we used the python data analysis tool Polars for all the data analysis. Using Polars with Great Tables was a total delight. To learn more about how we analyzed the data, along with the code, see the appendix below!\n\n\n\n\n\n\nAppendix: analysis and code\n\n\n\n\n\nAppendix: analysis and code\n\nMethod\nIn order to calculate the probability of a given square winning, we focused on the joint probability of observing a final digit for the home team AND a final digit for the away team.\nThis can be expressed as p(home_digit, away_digit | home=\"SF\", away=\"KC\"). Note that the probability is conditioned on the teams playing in the Super Bowl. In order to estimate this, we p(digit | team=\"SF\")*p(digit | team=\"KC\").\nThis essentially makes two assumptions:\n\nThat the final digit does not depend on whether a team is home or away (though it may depend on the team playing).\nThat the final digit for a given team is independent of the team they are playing.\n\nAnother way to think about this is that digit is being modeled as if each team is drawing a ball numbered 0-9 from their own urn. We are modelling the chance of observing a pair of numbers, corresponding to a draw from each team‚Äôs urns.\nThe code for this analysis is in this python script on github, and is included below:\n\n\nCode\n\nimport polars as pl\nimport polars.selectors as cs\nfrom great_tables import GT, md\n\n\n# Utilities -----\n\n\ndef calc_n(df: pl.DataFrame, colname: str):\n    \"\"\"Count the number of final digits observed across games.\"\"\"\n\n    return df.select(final_digit=pl.col(colname).mod(10)).group_by(\"final_digit\").agg(n=pl.len())\n\n\ndef team_final_digits(game: pl.DataFrame, team_code: str) -&gt; pl.DataFrame:\n    \"\"\"Calculate a team's proportion of digits across games (both home and away).\"\"\"\n\n    home_n = calc_n(game.filter(pl.col(\"home_team\") == team_code), \"home_score\")\n    away_n = calc_n(game.filter(pl.col(\"away_team\") == team_code), \"away_score\")\n\n    joined = (\n        home_n.join(away_n, \"final_digit\")\n        .select(\"final_digit\", n=pl.col(\"n\") + pl.col(\"n_right\"))\n        .with_columns(prop=pl.col(\"n\") / pl.col(\"n\").sum())\n    )\n\n    return joined\n\n\n# Analysis -----\n\ngames = pl.read_csv(\"./games.csv\").filter(\n    pl.col(\"game_id\") != \"2023_22_SF_KC\",\n    pl.col(\"season\") &gt;= 2015,\n)\n\n# Individual probabilities of final digits per team\nhome = team_final_digits(games, \"KC\")\naway = team_final_digits(games, \"SF\")\n\n# Cross and multiply p(digit | team=KC)p(digit | team=SF) to get\n# the joint probability p(digit_KC, digit_SF | KC, SF)\njoint = (\n    home.join(away, how=\"cross\")\n    .with_columns(joint=pl.col(\"prop\") * pl.col(\"prop_right\"))\n    .sort(\"final_digit\", \"final_digit_right\")\n    .pivot(values=\"joint\", on=\"final_digit_right\", index=\"final_digit\")\n    .with_columns((cs.exclude(\"final_digit\") * 100).round(1))\n)\n\n# Display -----\n\n(\n    GT(joint, rowname_col=\"final_digit\")\n    .data_color(domain=[0, 4], palette=[\"red\", \"grey\", \"blue\"])\n    .tab_header(\n        \"Super Bowl Squares | Final Score Probabilities\",\n        \"Based on all NFL regular season and playoff games (2015-2023)\",\n    )\n    .tab_stubhead(\"\")\n    .tab_spanner(\"San Francisco 49ers\", cs.all())\n    .tab_stubhead(\"KC Chiefs\")\n    .tab_source_note(\n        md(\n            '&lt;span style=\"float: right;\"&gt;Source data: [Lee Sharpe, nflverse](https://github.com/nflverse/nfldata)&lt;/span&gt;'\n        )\n    )\n)\n\n\n\n\n\n\n  \n    Super Bowl Squares | Final Score Probabilities\n  \n  \n    Based on all NFL regular season and playoff games (2015-2023)\n  \n\n  KC Chiefs\n  \n    San Francisco 49ers\n  \n\n\n  0\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n\n\n\n  \n    0\n    2.3\n    1.5\n    0.6\n    2.4\n    1.7\n    0.9\n    1.2\n    3.2\n    1.1\n    0.8\n  \n  \n    1\n    1.8\n    1.2\n    0.5\n    1.9\n    1.3\n    0.7\n    0.9\n    2.6\n    0.9\n    0.6\n  \n  \n    2\n    1.1\n    0.7\n    0.3\n    1.2\n    0.8\n    0.4\n    0.6\n    1.6\n    0.5\n    0.4\n  \n  \n    3\n    1.7\n    1.1\n    0.5\n    1.8\n    1.3\n    0.7\n    0.9\n    2.5\n    0.8\n    0.6\n  \n  \n    4\n    1.8\n    1.2\n    0.5\n    1.9\n    1.3\n    0.7\n    0.9\n    2.6\n    0.9\n    0.6\n  \n  \n    5\n    0.7\n    0.5\n    0.2\n    0.7\n    0.5\n    0.3\n    0.4\n    1.0\n    0.3\n    0.2\n  \n  \n    6\n    1.0\n    0.6\n    0.2\n    1.0\n    0.7\n    0.4\n    0.5\n    1.4\n    0.5\n    0.3\n  \n  \n    7\n    2.3\n    1.5\n    0.6\n    2.4\n    1.7\n    0.9\n    1.2\n    3.4\n    1.1\n    0.8\n  \n  \n    8\n    0.8\n    0.5\n    0.2\n    0.8\n    0.6\n    0.3\n    0.4\n    1.1\n    0.4\n    0.3\n  \n  \n    9\n    1.0\n    0.7\n    0.3\n    1.1\n    0.8\n    0.4\n    0.5\n    1.5\n    0.5\n    0.4\n  \n\n  \n  \n  \n    Source data: Lee Sharpe, nflverse"
  },
  {
    "objectID": "blog/superbowl-squares/index.html#appendix-analysis-and-code",
    "href": "blog/superbowl-squares/index.html#appendix-analysis-and-code",
    "title": "Using Polars to Win at Super Bowl Squares",
    "section": "Appendix: analysis and code",
    "text": "Appendix: analysis and code\n\nMethod\nIn order to calculate the probability of a given square winning, we focused on the joint probability of observing a final digit for the home team AND a final digit for the away team.\nThis can be expressed as p(home_digit, away_digit | home=\"SF\", away=\"KC\"). Note that the probability is conditioned on the teams playing in the Super Bowl. In order to estimate this, we p(digit | team=\"SF\")*p(digit | team=\"KC\").\nThis essentially makes two assumptions:\n\nThat the final digit does not depend on whether a team is home or away (though it may depend on the team playing).\nThat the final digit for a given team is independent of the team they are playing.\n\nAnother way to think about this is that digit is being modeled as if each team is drawing a ball numbered 0-9 from their own urn. We are modelling the chance of observing a pair of numbers, corresponding to a draw from each team‚Äôs urns.\nThe code for this analysis is in this python script on github, and is included below:\n\n\nCode\n\nimport polars as pl\nimport polars.selectors as cs\nfrom great_tables import GT, md\n\n\n# Utilities -----\n\n\ndef calc_n(df: pl.DataFrame, colname: str):\n    \"\"\"Count the number of final digits observed across games.\"\"\"\n\n    return df.select(final_digit=pl.col(colname).mod(10)).group_by(\"final_digit\").agg(n=pl.len())\n\n\ndef team_final_digits(game: pl.DataFrame, team_code: str) -&gt; pl.DataFrame:\n    \"\"\"Calculate a team's proportion of digits across games (both home and away).\"\"\"\n\n    home_n = calc_n(game.filter(pl.col(\"home_team\") == team_code), \"home_score\")\n    away_n = calc_n(game.filter(pl.col(\"away_team\") == team_code), \"away_score\")\n\n    joined = (\n        home_n.join(away_n, \"final_digit\")\n        .select(\"final_digit\", n=pl.col(\"n\") + pl.col(\"n_right\"))\n        .with_columns(prop=pl.col(\"n\") / pl.col(\"n\").sum())\n    )\n\n    return joined\n\n\n# Analysis -----\n\ngames = pl.read_csv(\"./games.csv\").filter(\n    pl.col(\"game_id\") != \"2023_22_SF_KC\",\n    pl.col(\"season\") &gt;= 2015,\n)\n\n# Individual probabilities of final digits per team\nhome = team_final_digits(games, \"KC\")\naway = team_final_digits(games, \"SF\")\n\n# Cross and multiply p(digit | team=KC)p(digit | team=SF) to get\n# the joint probability p(digit_KC, digit_SF | KC, SF)\njoint = (\n    home.join(away, how=\"cross\")\n    .with_columns(joint=pl.col(\"prop\") * pl.col(\"prop_right\"))\n    .sort(\"final_digit\", \"final_digit_right\")\n    .pivot(values=\"joint\", on=\"final_digit_right\", index=\"final_digit\")\n    .with_columns((cs.exclude(\"final_digit\") * 100).round(1))\n)\n\n# Display -----\n\n(\n    GT(joint, rowname_col=\"final_digit\")\n    .data_color(domain=[0, 4], palette=[\"red\", \"grey\", \"blue\"])\n    .tab_header(\n        \"Super Bowl Squares | Final Score Probabilities\",\n        \"Based on all NFL regular season and playoff games (2015-2023)\",\n    )\n    .tab_stubhead(\"\")\n    .tab_spanner(\"San Francisco 49ers\", cs.all())\n    .tab_stubhead(\"KC Chiefs\")\n    .tab_source_note(\n        md(\n            '&lt;span style=\"float: right;\"&gt;Source data: [Lee Sharpe, nflverse](https://github.com/nflverse/nfldata)&lt;/span&gt;'\n        )\n    )\n)\n\n\n\n\n\n\n  \n    Super Bowl Squares | Final Score Probabilities\n  \n  \n    Based on all NFL regular season and playoff games (2015-2023)\n  \n\n  KC Chiefs\n  \n    San Francisco 49ers\n  \n\n\n  0\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n\n\n\n  \n    0\n    2.3\n    1.5\n    0.6\n    2.4\n    1.7\n    0.9\n    1.2\n    3.2\n    1.1\n    0.8\n  \n  \n    1\n    1.8\n    1.2\n    0.5\n    1.9\n    1.3\n    0.7\n    0.9\n    2.6\n    0.9\n    0.6\n  \n  \n    2\n    1.1\n    0.7\n    0.3\n    1.2\n    0.8\n    0.4\n    0.6\n    1.6\n    0.5\n    0.4\n  \n  \n    3\n    1.7\n    1.1\n    0.5\n    1.8\n    1.3\n    0.7\n    0.9\n    2.5\n    0.8\n    0.6\n  \n  \n    4\n    1.8\n    1.2\n    0.5\n    1.9\n    1.3\n    0.7\n    0.9\n    2.6\n    0.9\n    0.6\n  \n  \n    5\n    0.7\n    0.5\n    0.2\n    0.7\n    0.5\n    0.3\n    0.4\n    1.0\n    0.3\n    0.2\n  \n  \n    6\n    1.0\n    0.6\n    0.2\n    1.0\n    0.7\n    0.4\n    0.5\n    1.4\n    0.5\n    0.3\n  \n  \n    7\n    2.3\n    1.5\n    0.6\n    2.4\n    1.7\n    0.9\n    1.2\n    3.4\n    1.1\n    0.8\n  \n  \n    8\n    0.8\n    0.5\n    0.2\n    0.8\n    0.6\n    0.3\n    0.4\n    1.1\n    0.4\n    0.3\n  \n  \n    9\n    1.0\n    0.7\n    0.3\n    1.1\n    0.8\n    0.4\n    0.5\n    1.5\n    0.5\n    0.4\n  \n\n  \n  \n  \n    Source data: Lee Sharpe, nflverse"
  },
  {
    "objectID": "get-started/nanoplots.html",
    "href": "get-started/nanoplots.html",
    "title": "Nanoplots",
    "section": "",
    "text": "Warning\n\n\n\nfmt_nanoplot() is still experimental.\nNanoplots are tiny plots you can use in your table. They are simple by design, mainly because there isn‚Äôt a lot of space to work with. With that simplicity, however, you do get a set of very succinct data visualizations that adapt nicely to the amount of data you feed into them. Here‚Äôs some of the main features:",
    "crumbs": [
      "Get Started",
      "Format",
      "Nanoplots"
    ]
  },
  {
    "objectID": "get-started/nanoplots.html#a-simple-line-based-nanoplot",
    "href": "get-started/nanoplots.html#a-simple-line-based-nanoplot",
    "title": "Nanoplots",
    "section": "A simple line-based nanoplot",
    "text": "A simple line-based nanoplot\nLet‚Äôs make some simple plots with a Polars DataFrame. Here we are using lists to define data values for each cell in the numbers column. The fmt_nanoplot() method understands that these are input values for a line plot (the default type of nanoplot).\n\nfrom great_tables import GT\nimport polars as pl\n\nrandom_numbers_df = pl.DataFrame(\n    {\n        \"example\": [\"Row \" + str(x) for x in range(1, 5)],\n        \"numbers\": [\n            \"20 23 6 7 37 23 21 4 7 16\",\n            \"2.3 6.8 9.2 2.42 3.5 12.1 5.3 3.6 7.2 3.74\",\n            \"-12 -5 6 3.7 0 8 -7.4\",\n            \"2 0 15 7 8 10 1 24 17 13 6\",\n        ],\n    }\n)\n\nGT(random_numbers_df).fmt_nanoplot(columns=\"numbers\")\n\n\n\n\n\n\n\n  example\n  numbers\n\n\n\n  \n    Row 1\n    3742023673723214716\n  \n  \n    Row 2\n    12.12.302.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    Row 3\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    Row 4\n    2402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nThis looks a lot like the familiar sparklines you might see in tables where space for plots is limited. The input values, strings of space-separated values, can be considered here as y values and they are evenly spaced along the imaginary x axis.\nHovering over (or touching) the values is something of a treat! You might notice that:\n\ndata values are automatically formatted for you in a compact fashion\nthe plot elements also display pertinent values\n\nThis sort of interactively is baked into the rendered SVG graphics that fmt_nanoplot() generates from your data and selection of options.\nPolars lets us express ‚Äòlists-of-values-per-cell‚Äô in different ways and Great Tables is pretty good at understanding different column dtypes. So, you can alternatively create the same table as above with the following code.\nrandom_numbers_df = pl.DataFrame(\n    {\n        \"example\": [\"Row \" + str(x) for x in range(1, 5)],\n        \"numbers\": [\n            { \"val\": [20, 23, 6, 7, 37, 23, 21, 4, 7, 16] },\n            { \"val\": [2.3, 6.8, 9.2, 2.42, 3.5, 12.1, 5.3, 3.6, 7.2, 3.74] },\n            { \"val\": [-12, -5, 6, 3.7, 0, 8, -7.4] },\n            { \"val\": [2, 0, 15, 7, 8, 10, 1, 24, 17, 13, 6] },\n        ],\n    }\n)\n\nGT(random_numbers_df).fmt_nanoplot(columns=\"numbers\")\nBoth forms of the numbers column in the two DataFrames look the same to fmt_nanoplot(). The key for the list of values (here, \"val\") can be anything as long as it‚Äôs repeated down the column. So the choice is yours on how you want to prepare those column values.",
    "crumbs": [
      "Get Started",
      "Format",
      "Nanoplots"
    ]
  },
  {
    "objectID": "get-started/nanoplots.html#the-reference-line-and-the-reference-area",
    "href": "get-started/nanoplots.html#the-reference-line-and-the-reference-area",
    "title": "Nanoplots",
    "section": "The reference line and the reference area",
    "text": "The reference line and the reference area\nYou can insert two additional things which may be useful: a reference line and a reference area. You can define them either through literal values or via keywords (these are: \"mean\", \"median\", \"min\", \"max\", \"q1\", \"q3\", \"first\", or \"last\"). Here‚Äôs a reference line that corresponds to the mean data value of each nanoplot:\n\nGT(random_numbers_df).fmt_nanoplot(columns=\"numbers\", reference_line=\"mean\")\n\n\n\n\n\n\n\n  example\n  numbers\n\n\n\n  \n    Row 1\n    16.43742023673723214716\n  \n  \n    Row 2\n    5.6212.12.302.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    Row 3\n    ‚àí0.968.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    Row 4\n    9.362402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nThis example uses a reference area that bounds the minimum value to the median value:\n\nGT(random_numbers_df).fmt_nanoplot(columns=\"numbers\", reference_area=[\"min\", \"median\"])\n\n\n\n\n\n\n\n  example\n  numbers\n\n\n\n  \n    Row 1\n    3742023673723214716\n  \n  \n    Row 2\n    12.12.302.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    Row 3\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    Row 4\n    2402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nAs an added touch, you don‚Äôt need to worry about the order of the keywords provided to reference_area= (which could be potentially problematic if providing a literal value and a keyword).",
    "crumbs": [
      "Get Started",
      "Format",
      "Nanoplots"
    ]
  },
  {
    "objectID": "get-started/nanoplots.html#using-autoscale-to-have-a-common-y-axis-scale-across-plots",
    "href": "get-started/nanoplots.html#using-autoscale-to-have-a-common-y-axis-scale-across-plots",
    "title": "Nanoplots",
    "section": "Using autoscale= to have a common y-axis scale across plots",
    "text": "Using autoscale= to have a common y-axis scale across plots\nThere are lots of options. Like, if you want to ensure that the scale is shared across all of the nanoplots (so you can better get a sense of overall magnitude), you can set autoscale= to True:\n\nGT(random_numbers_df).fmt_nanoplot(columns=\"numbers\", autoscale=True)\n\n\n\n\n\n\n\n  example\n  numbers\n\n\n\n  \n    Row 1\n    37-122023673723214716\n  \n  \n    Row 2\n    37.0‚àí12.02.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    Row 3\n    37.0‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    Row 4\n    37-122015781012417136\n  \n\n\n\n\n\n\n        \n\n\nIf you hover along or touch the left side of any of the plots above, you‚Äôll see that each y scale runs from -12.0 to 37.0. Using autoscale=True is very useful if you want to compare the magnitudes of values across rows in addition to their trends. It won‚Äôt, however, make much sense if the overall magnitudes of values vary wildly across rows (e.g., comparing changing currency values or stock prices over time).",
    "crumbs": [
      "Get Started",
      "Format",
      "Nanoplots"
    ]
  },
  {
    "objectID": "get-started/nanoplots.html#using-the-nanoplot_options-helper-function",
    "href": "get-started/nanoplots.html#using-the-nanoplot_options-helper-function",
    "title": "Nanoplots",
    "section": "Using the nanoplot_options() helper function",
    "text": "Using the nanoplot_options() helper function\nThere are many options for customization. You can radically change the look of a collection of nanoplots with the nanoplot_options() helper function. With that function, you invoke it in the options= argument of fmt_nanoplot(). You can modify the sizes and colors of different elements, decide which elements are even present, and much more! Here‚Äôs an example where a line-based nanoplot retains all of its elements, but the overall appearance is greatly altered.\n\nfrom great_tables import nanoplot_options\n\n(\n    GT(random_numbers_df)\n    .fmt_nanoplot(\n        columns=\"numbers\",\n        options=nanoplot_options(\n            data_point_radius=8,\n            data_point_stroke_color=\"black\",\n            data_point_stroke_width=2,\n            data_point_fill_color=\"white\",\n            data_line_type=\"straight\",\n            data_line_stroke_color=\"brown\",\n            data_line_stroke_width=2,\n            data_area_fill_color=\"orange\",\n            vertical_guide_stroke_color=\"green\",\n        ),\n    )\n)\n\n\n\n\n\n\n\n  example\n  numbers\n\n\n\n  \n    Row 1\n    3742023673723214716\n  \n  \n    Row 2\n    12.12.302.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    Row 3\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    Row 4\n    2402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nAs can be seen, you have a lot of fine-grained control over the look of a nanoplot.",
    "crumbs": [
      "Get Started",
      "Format",
      "Nanoplots"
    ]
  },
  {
    "objectID": "get-started/nanoplots.html#making-nanoplots-with-bars-using-plot_typebar",
    "href": "get-started/nanoplots.html#making-nanoplots-with-bars-using-plot_typebar",
    "title": "Nanoplots",
    "section": "Making nanoplots with bars using plot_type=\"bar\"",
    "text": "Making nanoplots with bars using plot_type=\"bar\"\nWe don‚Äôt just support line plots in fmt_nanoplot(), we also have the option to show bar plots. The only thing you need to change is the value of plot_type= argument to \"bar\":\n\nGT(random_numbers_df).fmt_nanoplot(columns=\"numbers\", plot_type=\"bar\")\n\n\n\n\n\n\n\n  example\n  numbers\n\n\n\n  \n    Row 1\n    3702023673723214716\n  \n  \n    Row 2\n    12.102.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    Row 3\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    Row 4\n    2402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nAn important difference between line plots and bar plots is that the bars project from a zero line. Notice that some negative values in the bar-based nanoplot appear red and radiate downward from the gray zero line.\nUsing plot_type=\"bar\" still allows us to supply a reference line and a reference area with reference_line= and reference_area=. The autoscale= option works here as well. We also have a set of options just for bar plots available inside nanoplot_options(). Here‚Äôs an example where we use all of the aforementioned customization possibilities:\n\n(\n    GT(random_numbers_df)\n    .fmt_nanoplot(\n        columns=\"numbers\",\n        plot_type=\"bar\",\n        autoscale=True,\n        reference_line=\"min\",\n        reference_area=[0, \"max\"],\n        options=nanoplot_options(\n            data_bar_stroke_color=\"gray\",\n            data_bar_stroke_width=2,\n            data_bar_fill_color=\"orange\",\n            data_bar_negative_stroke_color=\"blue\",\n            data_bar_negative_stroke_width=1,\n            data_bar_negative_fill_color=\"lightblue\",\n            reference_line_color=\"pink\",\n            reference_area_fill_color=\"bisque\",\n            vertical_guide_stroke_color=\"blue\",\n        ),\n    )\n)\n\n\n\n\n\n\n\n  example\n  numbers\n\n\n\n  \n    Row 1\n    4.0037-122023673723214716\n  \n  \n    Row 2\n    2.3037.0‚àí12.02.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    Row 3\n    ‚àí12.037.0‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    Row 4\n    037-122015781012417136",
    "crumbs": [
      "Get Started",
      "Format",
      "Nanoplots"
    ]
  },
  {
    "objectID": "get-started/nanoplots.html#horizontal-bar-and-line-plots",
    "href": "get-started/nanoplots.html#horizontal-bar-and-line-plots",
    "title": "Nanoplots",
    "section": "Horizontal bar and line plots",
    "text": "Horizontal bar and line plots\nSingle-value bar plots, running in the horizontal direction, can be made by simply invoking fmt_nanoplot() on a column of numeric values. These plots are meant for comparison across rows so the method automatically scales the horizontal bars to facilitate this type of display. Here‚Äôs a simple example that uses plot_type=\"bar\" on the numbers column that contains a single numeric value in every cell.\n\nsingle_vals_df = pl.DataFrame(\n    {\n        \"example\": [\"Row \" + str(x) for x in range(1, 5)],\n        \"numbers\": [2.75, 0, -3.2, 8]\n    }\n)\n\nGT(single_vals_df).fmt_nanoplot(columns=\"numbers\", plot_type=\"bar\")\n\n\n\n\n\n\n\n  example\n  numbers\n\n\n\n  \n    Row 1\n    2.75\n  \n  \n    Row 2\n    0\n  \n  \n    Row 3\n    ‚àí3.20\n  \n  \n    Row 4\n    8.00\n  \n\n\n\n\n\n\n        \n\n\nThis, interestingly enough, works with the \"line\" type of nanoplot. The result is akin to a lollipop plot:\n\nGT(single_vals_df).fmt_nanoplot(columns=\"numbers\")\n\n\n\n\n\n\n\n  example\n  numbers\n\n\n\n  \n    Row 1\n    2.75\n  \n  \n    Row 2\n    0\n  \n  \n    Row 3\n    ‚àí3.20\n  \n  \n    Row 4\n    8.00\n  \n\n\n\n\n\n\n        \n\n\nYou get to customize the line and the data point marker with the latter display of single values, and that‚Äôs a plus. Nonetheless, it is more common to see horizontal bar plots in tables and the extra customization of negative values makes that form of presentation more advantageous.",
    "crumbs": [
      "Get Started",
      "Format",
      "Nanoplots"
    ]
  },
  {
    "objectID": "get-started/nanoplots.html#line-plots-with-paired-x-and-y-values",
    "href": "get-started/nanoplots.html#line-plots-with-paired-x-and-y-values",
    "title": "Nanoplots",
    "section": "Line plots with paired x and y values",
    "text": "Line plots with paired x and y values\nAside from a single stream of y values, we can plot pairs of x and y values. This works only for the \"line\" type of plot. We can set up a column of Polars struct values in a DataFrame to have this input data prepared for fmt_nanoplot(). Notice that the dictionary values in the enclosed list must have the \"x\" and \"y\" keys. Further to this, the list lengths for each of \"x\" and \"y\" must match (i.e., to make valid pairs of x and y).\n\nweather_2 = pl.DataFrame(\n    {\n        \"station\": [\"Station \" + str(x) for x in range(1, 4)],\n        \"temperatures\": [\n            {\n                \"x\": [6.1, 8.0, 10.1, 10.5, 11.2, 12.4, 13.1, 15.3],\n                \"y\": [24.2, 28.2, 30.2, 30.5, 30.5, 33.1, 33.5, 32.7],\n            },\n            {\n                \"x\": [7.1, 8.2, 10.3, 10.75, 11.25, 12.5, 13.5, 14.2],\n                \"y\": [18.2, 18.1, 20.3, 20.5, 21.4, 21.9, 23.1, 23.3],\n            },\n            {\n                \"x\": [6.3, 7.1, 10.3, 11.0, 12.07, 13.1, 15.12, 16.42],\n                \"y\": [15.2, 17.77, 21.42, 21.63, 25.23, 26.84, 27.2, 27.44],\n            },\n        ]\n    }\n)\n\n(\n    GT(weather_2)\n    .fmt_nanoplot(\n        columns=\"temperatures\",\n        plot_type=\"line\",\n        expand_x=[5, 16],\n        expand_y=[10, 40],\n        options=nanoplot_options(\n            show_data_area=False,\n            show_data_line=False\n        )\n    )\n)\n\n\n\n\n\n\n\n  station\n  temperatures\n\n\n\n  \n    Station 1\n    401024.228.230.230.530.533.133.532.7\n  \n  \n    Station 2\n    401018.218.120.320.521.421.923.123.3\n  \n  \n    Station 3\n    401015.217.821.421.625.226.827.227.4\n  \n\n\n\n\n\n\n        \n\n\nThe options for removing the data area and the data line (though the corresponding show_* arguments of nanoplot_options()) make the finalized nanoplots look somewhat like scatter plots.",
    "crumbs": [
      "Get Started",
      "Format",
      "Nanoplots"
    ]
  },
  {
    "objectID": "get-started/table-theme-options.html",
    "href": "get-started/table-theme-options.html",
    "title": "Table Theme Options",
    "section": "",
    "text": "Great Tables exposes options to customize the appearance of tables via two methods:\nBoth methods target parts of the table, as shown in the diagram below.\nThis page covers how to style and theme your table using GT.tab_options(), which is meant to quickly set a broad range of styles.\nWe‚Äôll use the basic GT object below for most examples, since it marks some of the table parts.\nfrom great_tables import GT, exibble\n\ngt_ex = (\n    GT(exibble.head(5), rowname_col=\"row\", groupname_col=\"group\")\n    .tab_header(\"THE HEADING\", \"(a subtitle)\")\n    .tab_stubhead(\"THE STUBHEAD\")\n    .tab_source_note(\"THE SOURCE NOTE\")\n)\n\ngt_ex\n\n\n\n\n\n\n  \n    THE HEADING\n  \n  \n    (a subtitle)\n  \n\n  THE STUBHEAD\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    THE SOURCE NOTE",
    "crumbs": [
      "Get Started",
      "Theming",
      "Table Theme Options"
    ]
  },
  {
    "objectID": "get-started/table-theme-options.html#table-option-parts",
    "href": "get-started/table-theme-options.html#table-option-parts",
    "title": "Table Theme Options",
    "section": "Table option parts",
    "text": "Table option parts\nAs the graph above showed, tables are made of many parts‚Äîsuch as the heading, column labels, and stub. .tab_options() organizes options based on table part.\nThe code below illustrates the table parts .tab_options() can target, by setting the background color for various parts.\n\n(\n    gt_ex\n    .tab_options(\n        container_width = \"100%\",\n        table_background_color=\"lightblue\",\n        heading_background_color = \"gold\",\n        column_labels_background_color=\"aquamarine\",\n        row_group_background_color=\"lightyellow\",\n        stub_background_color=\"lightgreen\",\n        source_notes_background_color=\"#f1e2af\",\n    )\n)\n\n\n\n\n\n\n  \n    THE HEADING\n  \n  \n    (a subtitle)\n  \n\n  THE STUBHEAD\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    THE SOURCE NOTE\n  \n\n\n\n\n\n\n        \n\n\nNotice two important pieces:\n\nThe argument heading_background_color=\"gold\" sets the heading part‚Äôs background to gold.\nParts like container and table are the broadest. They cover all the other parts of the table.",
    "crumbs": [
      "Get Started",
      "Theming",
      "Table Theme Options"
    ]
  },
  {
    "objectID": "get-started/table-theme-options.html#finding-options-part-type-attribute",
    "href": "get-started/table-theme-options.html#finding-options-part-type-attribute",
    "title": "Table Theme Options",
    "section": "Finding options: part, type, attribute",
    "text": "Finding options: part, type, attribute\nOption names follow this format:\n{part name}_{type}_{attribute}\nFor example, the option row_group_border_top_color has these pieces:\n\npart: row_group\ntype: border_top\nattribute: color\n\n\n\n\n\n\n\nNote\n\n\n\nHere are the parts supported in .tab_options():\n\ncontainer, table\nheading, source_note\ncolumn_labels, row_group, stub, stub_row\ntable_body",
    "crumbs": [
      "Get Started",
      "Theming",
      "Table Theme Options"
    ]
  },
  {
    "objectID": "get-started/table-theme-options.html#styling-borders",
    "href": "get-started/table-theme-options.html#styling-borders",
    "title": "Table Theme Options",
    "section": "Styling borders",
    "text": "Styling borders\nMany table parts support customizing border colors and style. This is shown below for column labels.\n\ngt_ex.tab_options(\n    column_labels_border_top_color=\"blue\",\n    column_labels_border_top_style=\"solid\",\n    column_labels_border_top_width=\"5px\"\n)\n\n\n\n\n\n\n  \n    THE HEADING\n  \n  \n    (a subtitle)\n  \n\n  THE STUBHEAD\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    THE SOURCE NOTE",
    "crumbs": [
      "Get Started",
      "Theming",
      "Table Theme Options"
    ]
  },
  {
    "objectID": "get-started/table-theme-options.html#styling-background-color",
    "href": "get-started/table-theme-options.html#styling-background-color",
    "title": "Table Theme Options",
    "section": "Styling background color",
    "text": "Styling background color\n\ngt_ex.tab_options(\n    heading_background_color=\"purple\"\n)\n\n\n\n\n\n\n  \n    THE HEADING\n  \n  \n    (a subtitle)\n  \n\n  THE STUBHEAD\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    THE SOURCE NOTE",
    "crumbs": [
      "Get Started",
      "Theming",
      "Table Theme Options"
    ]
  },
  {
    "objectID": "get-started/table-theme-options.html#styling-body-cells",
    "href": "get-started/table-theme-options.html#styling-body-cells",
    "title": "Table Theme Options",
    "section": "Styling body cells",
    "text": "Styling body cells\nThe table body can style the lines between individual cells. Use the hline and vline option types to specify cell line color, style, and width.\nFor example, the code below changes horizontal lines (hline) between cells to be red, dashed lines.\n\ngt_ex.tab_options(\n    table_body_hlines_color=\"red\",\n    table_body_hlines_style=\"dashed\",\n    table_body_hlines_width=\"4px\",\n)\n\n\n\n\n\n\n  \n    THE HEADING\n  \n  \n    (a subtitle)\n  \n\n  THE STUBHEAD\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    THE SOURCE NOTE\n  \n\n\n\n\n\n\n        \n\n\nIn order to define the vertical lines between cells, set vline styles. For example, the code below makes both horizontal and vertical lines between cells solid.\n\ngt_ex.tab_options(\n    table_body_hlines_style=\"solid\",\n    table_body_vlines_style=\"solid\",\n)\n\n\n\n\n\n\n  \n    THE HEADING\n  \n  \n    (a subtitle)\n  \n\n  THE STUBHEAD\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    THE SOURCE NOTE",
    "crumbs": [
      "Get Started",
      "Theming",
      "Table Theme Options"
    ]
  },
  {
    "objectID": "get-started/table-theme-options.html#set-options-across-table-parts",
    "href": "get-started/table-theme-options.html#set-options-across-table-parts",
    "title": "Table Theme Options",
    "section": "Set options across table parts",
    "text": "Set options across table parts\nSome options starting with table_ apply to all parts of the table. For example, fonts and background color apply everywhere.\n\ngt_ex.tab_options(\n    table_background_color=\"green\",\n    table_font_color=\"darkblue\",\n    table_font_style=\"italic\",\n    table_font_names=\"Times New Roman\"\n)\n\n\n\n\n\n\n  \n    THE HEADING\n  \n  \n    (a subtitle)\n  \n\n  THE STUBHEAD\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    THE SOURCE NOTE\n  \n\n\n\n\n\n\n        \n\n\nOptions set across the whole table, can be overriden by styling a specific part.\n\ngt_ex.tab_options(\n    table_background_color=\"orange\",\n    heading_background_color=\"pink\"\n)\n\n\n\n\n\n\n  \n    THE HEADING\n  \n  \n    (a subtitle)\n  \n\n  THE STUBHEAD\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n\n  \n  \n  \n    THE SOURCE NOTE",
    "crumbs": [
      "Get Started",
      "Theming",
      "Table Theme Options"
    ]
  },
  {
    "objectID": "get-started/table-theme-options.html#a-basic-theme",
    "href": "get-started/table-theme-options.html#a-basic-theme",
    "title": "Table Theme Options",
    "section": "A basic theme",
    "text": "A basic theme\nBased on the sections above, we can design an overall theme for a table.\nThis requires setting a decent number of options, but makes a big difference when presenting a table! Below is a table with a simple, blue theme. (The code is hidden by default, but can be expanded to see all the options set).\n\n\nCode\nfrom great_tables import GT, exibble\n\n# TODO: are there names we can give the three colors?\n# e.g. primary = \"#0076BA\", etc..\n\n(GT(exibble, rowname_col=\"row\", groupname_col=\"group\")\n    .tab_header(\"THE HEADING\", \"(a subtitle)\")\n    .tab_stubhead(\"THE STUBHEAD\")\n    .tab_source_note(\"THE SOURCE NOTE\")\n    .tab_options(\n        # table ----\n        table_border_top_color=\"#004D80\",\n        table_border_bottom_color=\"#004D80\",\n\n        # heading ----\n        heading_border_bottom_color=\"#0076BA\",\n\n        # column labels ----\n        column_labels_border_top_color=\"#0076BA\",\n        column_labels_border_bottom_color=\"#0076BA\",\n        column_labels_background_color=\"#FFFFFF\",\n\n        # row group ----\n        row_group_border_top_color=\"#0076BA\",\n        row_group_border_bottom_color=\"#0076BA\",\n\n        # stub ----\n        stub_background_color=\"#0076BA\",\n        stub_border_style=\"solid\",\n        stub_border_color=\"#0076BA\",\n\n        # table body ----\n        table_body_border_top_color=\"#0076BA\",\n        table_body_border_bottom_color=\"#0076BA\",\n        table_body_hlines_style=\"none\",\n        table_body_vlines_style=\"none\",\n\n        # misc ----\n        #row_striping_background_color=\"#F4F4F4\"\n    )\n\n)\n\n\n\n\n\n\n\n  \n    THE HEADING\n  \n  \n    (a subtitle)\n  \n\n  THE STUBHEAD\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n  \n    row_6\n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n  \n  \n    row_7\n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n  \n  \n    row_8\n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n  \n\n  \n  \n  \n    THE SOURCE NOTE",
    "crumbs": [
      "Get Started",
      "Theming",
      "Table Theme Options"
    ]
  },
  {
    "objectID": "get-started/basic-header.html",
    "href": "get-started/basic-header.html",
    "title": "Header and Footer",
    "section": "",
    "text": "The way that we add components like the Table Header and source notes in the Table Footer is to use the tab_*() family of methods. A Table Header is easy to add so let‚Äôs see how the previous table looks with a title and a subtitle. We can add this component using the tab_header() method:\n\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = islands.head(10)\n\n# Make a display table with the `islands_tbl` table;\n# put a heading just above the column labels\n(\n    GT(islands_mini)\n    .tab_header(\n        title = \"Large Landmasses of the World\",\n        subtitle = \"The top ten largest are presented\"\n    )\n)\n\n\n\n\n\n\n  \n    Large Landmasses of the World\n  \n  \n    The top ten largest are presented\n  \n\n  name\n  size\n\n\n\n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n  \n    Asia\n    16988\n  \n  \n    Australia\n    2968\n  \n  \n    Axel Heiberg\n    16\n  \n  \n    Baffin\n    184\n  \n  \n    Banks\n    23\n  \n  \n    Borneo\n    280\n  \n  \n    Britain\n    84\n  \n  \n    Celebes\n    73\n  \n\n\n\n\n\n\n        \n\n\nThe Header table component provides an opportunity to describe the data that‚Äôs presented. Using subtitle= allows us to insert a subtitle, which is an optional part of the Header. We may also style the title= and subtitle= using Markdown! We do this by wrapping the values passed to title= or subtitle= with the md() helper function (we may also use html() in a similar fashion). Here is an example with the table data truncated for brevity:\n\n# Make a display table with the `islands_tbl` table;\n# put a heading just above the column labels\ngt_tbl = (\n    GT(islands.head(2))\n    .tab_header(\n        title = md(\"Large Landmasses of the *World* &#x1F310;\"),\n        subtitle = md(\"The top **ten** largest are presented\")\n    )\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Large Landmasses of the World üåê\n  \n  \n    The top ten largest are presented\n  \n\n  name\n  size\n\n\n\n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n\n\n\n\n\n\n        \n\n\nA source note can be added to the table‚Äôs Footer through use of the tab_source_note() method. It works in the same way as tab_header() (it also allows for Markdown inputs) except it can be called multiple times‚Äîeach invocation results in the addition of a source note.\n\n# Display the `islands_tbl` data with a heading and two source notes\n(\n    gt_tbl\n    .tab_source_note(\n        source_note = \"Source: The World Almanac and Book of Facts, 1975, page 406.\"\n    )\n    .tab_source_note(\n        source_note = md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")\n    )\n)\n\n\n\n\n\n\n  \n    Large Landmasses of the World üåê\n  \n  \n    The top ten largest are presented\n  \n\n  name\n  size\n\n\n\n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n\n  \n  \n  \n    Source: The World Almanac and Book of Facts, 1975, page 406.\n  \n\n\n  \n    Reference: McNeil, D. R. (1977) Interactive Data Analysis. Wiley.",
    "crumbs": [
      "Get Started",
      "Table Structure",
      "Header and Footer"
    ]
  },
  {
    "objectID": "get-started/column-selection.html",
    "href": "get-started/column-selection.html",
    "title": "Column Selection",
    "section": "",
    "text": "The columns= argument for methods like GT.tab_spanner(), GT.cols_move(), and GT.tab_style allows a range of options for selecting columns.\nThe simplest approach is just a list of strings with the exact column names. However, we can specify columns using any of the following:\nfrom great_tables import GT\nfrom great_tables.data import exibble\n\nlil_exibble = exibble[[\"num\", \"char\", \"fctr\", \"date\", \"time\"]].head(4)\ngt_ex = GT(lil_exibble)\n\ngt_ex\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Column Selection"
    ]
  },
  {
    "objectID": "get-started/column-selection.html#using-integers",
    "href": "get-started/column-selection.html#using-integers",
    "title": "Column Selection",
    "section": "Using integers",
    "text": "Using integers\nWe can use a list of strings or integers to select columns by name or position, respectively.\n\ngt_ex.cols_move_to_start(columns=[\"date\", 1, -1])\n\n\n\n\n\n\n\n  date\n  char\n  time\n  num\n  fctr\n\n\n\n  \n    2015-01-15\n    apricot\n    13:35\n    0.1111\n    one\n  \n  \n    2015-02-15\n    banana\n    14:40\n    2.222\n    two\n  \n  \n    2015-03-15\n    coconut\n    15:45\n    33.33\n    three\n  \n  \n    2015-04-15\n    durian\n    16:50\n    444.4\n    four\n  \n\n\n\n\n\n\n        \n\n\nNote the code above moved the following columns:\n\nThe string \"date\" matched the column of the same name.\nThe integer 1 matched the second column (this is similar to list indexing).\nThe integer -1 matched the last column.\n\nMoreover, the order of the list defines the order of selected columns. In this case, \"data\" was the first entry, so it‚Äôs the very first column in the new table.",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Column Selection"
    ]
  },
  {
    "objectID": "get-started/column-selection.html#using-polars-selectors",
    "href": "get-started/column-selection.html#using-polars-selectors",
    "title": "Column Selection",
    "section": "Using Polars selectors",
    "text": "Using Polars selectors\nWhen using a Polars DataFrame, you can select columns using Polars selectors. The example below uses Polars selectors to move all columns that start with \"c\" or \"f\" to the start of the table.\n\nimport polars as pl\nimport polars.selectors as cs\n\npl_df = pl.from_pandas(lil_exibble)\n\nGT(pl_df).cols_move_to_start(columns=cs.starts_with(\"c\") | cs.starts_with(\"f\"))\n\n\n\n\n\n\n\n  char\n  fctr\n  num\n  date\n  time\n\n\n\n  \n    apricot\n    one\n    0.1111\n    2015-01-15\n    13:35\n  \n  \n    banana\n    two\n    2.222\n    2015-02-15\n    14:40\n  \n  \n    coconut\n    three\n    33.33\n    2015-03-15\n    15:45\n  \n  \n    durian\n    four\n    444.4\n    2015-04-15\n    16:50\n  \n\n\n\n\n\n\n        \n\n\nIn general, selection should match the behaviors of the Polars DataFrame.select() method.\n\npl_df.select(cs.starts_with(\"c\") | cs.starts_with(\"f\")).columns\n\n['char', 'fctr']\n\n\nSee the Selectors page in the polars docs for more information on this.",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Column Selection"
    ]
  },
  {
    "objectID": "get-started/column-selection.html#using-functions",
    "href": "get-started/column-selection.html#using-functions",
    "title": "Column Selection",
    "section": "Using functions",
    "text": "Using functions\nA function can be used to select columns. It should take a column name as a string and return True or False.\n\ngt_ex.cols_move_to_start(columns=lambda x: \"c\" in x)\n\n\n\n\n\n\n\n  char\n  fctr\n  num\n  date\n  time\n\n\n\n  \n    apricot\n    one\n    0.1111\n    2015-01-15\n    13:35\n  \n  \n    banana\n    two\n    2.222\n    2015-02-15\n    14:40\n  \n  \n    coconut\n    three\n    33.33\n    2015-03-15\n    15:45\n  \n  \n    durian\n    four\n    444.4\n    2015-04-15\n    16:50",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Column Selection"
    ]
  },
  {
    "objectID": "get-started/colorizing-with-data.html",
    "href": "get-started/colorizing-with-data.html",
    "title": "Colorizing with Data",
    "section": "",
    "text": "You sometimes come across heat maps in data visualization, and they‚Äôre used to represent data values with color gradients. This technique is great for identifying patterns, trends, outliers, and missing data when there‚Äôs lots of data. Tables can have this sort of treatment as well! Typically, formatted numeric values are shown along with some color treatment coinciding with the underlying data values.\nWe can make this possible in Great Tables by using the data_color() method. Let‚Äôs start with a simple example, using a Polars DataFrame with three columns of values. We can introduce that data to GT() and use data_color() without any arguments.\nfrom great_tables import GT\nimport polars as pl\n\nsimple_df = pl.DataFrame(\n    {\n        \"integer\": [1, 2, 3, 4, 5],\n        \"float\": [2.3, 1.3, 5.1, None, 4.4],\n        \"category\": [\"one\", \"two\", \"three\", \"one\", \"three\"],\n    }\n)\n\nGT(simple_df).data_color()\n\n\n\n\n\n\n\n  integer\n  float\n  category\n\n\n\n  \n    1\n    2.3\n    one\n  \n  \n    2\n    1.3\n    two\n  \n  \n    3\n    5.1\n    three\n  \n  \n    4\n    None\n    one\n  \n  \n    5\n    4.4\n    three\nThis works but doesn‚Äôt look all too appealing. However, we can take note of a few things straight away. The first thing is that data_color() doesn‚Äôt format the values but rather it applies color fill values to the cells. The second thing is that you don‚Äôt have to intervene and modify the text color so that there‚Äôs enough contrast, Great Tables will do that for you (this behavior can be deactivated with the autocolor_text= argument though).",
    "crumbs": [
      "Get Started",
      "Style",
      "Colorizing with Data"
    ]
  },
  {
    "objectID": "get-started/colorizing-with-data.html#setting-palette-colors",
    "href": "get-started/colorizing-with-data.html#setting-palette-colors",
    "title": "Colorizing with Data",
    "section": "Setting palette colors",
    "text": "Setting palette colors\nWhile this first example illustrated some basic things, the common thing to do in practices to provide a list of colors to the palette= argument. Let‚Äôs choose two colors \"green\" and \"red\" and place them in that order.\n\nGT(simple_df).data_color(palette=[\"blue\", \"red\"])\n\n\n\n\n\n\n\n  integer\n  float\n  category\n\n\n\n  \n    1\n    2.3\n    one\n  \n  \n    2\n    1.3\n    two\n  \n  \n    3\n    5.1\n    three\n  \n  \n    4\n    None\n    one\n  \n  \n    5\n    4.4\n    three\n  \n\n\n\n\n\n\n        \n\n\nNow that we‚Äôve moved away from the default palette and specified colors, we can see that lower numerical values are closer to blue and higher values are closer to red (those in the middle have colors that are a blend of the two; in this case, more in the purple range). Categorical values behave similarly, they take on ordinal values based on their first appearance (from top to bottom) and those values are used to generate the background colors.",
    "crumbs": [
      "Get Started",
      "Style",
      "Colorizing with Data"
    ]
  },
  {
    "objectID": "get-started/colorizing-with-data.html#coloring-missing-values-with-na_color",
    "href": "get-started/colorizing-with-data.html#coloring-missing-values-with-na_color",
    "title": "Colorizing with Data",
    "section": "Coloring missing values with na_color",
    "text": "Coloring missing values with na_color\nThere is a lone \"None\" value in the float column, and it has a gray background. Thoughout the Great Tables package, missing values are treated in different ways and, in this case, it‚Äôs given a default color value. We can change that with the na_color= argument. Let‚Äôs try it now:\n\nGT(simple_df).data_color(palette=[\"blue\", \"red\"], na_color=\"#FFE4C4\")\n\n\n\n\n\n\n\n  integer\n  float\n  category\n\n\n\n  \n    1\n    2.3\n    one\n  \n  \n    2\n    1.3\n    two\n  \n  \n    3\n    5.1\n    three\n  \n  \n    4\n    None\n    one\n  \n  \n    5\n    4.4\n    three\n  \n\n\n\n\n\n\n        \n\n\nNow, the gray color has been changed to Bisque. Note that when it comes to colors, you can use any combination of CSS/X11 color names and hexadecimal color codes.",
    "crumbs": [
      "Get Started",
      "Style",
      "Colorizing with Data"
    ]
  },
  {
    "objectID": "get-started/colorizing-with-data.html#using-domain-to-color-values-across-columns",
    "href": "get-started/colorizing-with-data.html#using-domain-to-color-values-across-columns",
    "title": "Colorizing with Data",
    "section": "Using domain= to color values across columns",
    "text": "Using domain= to color values across columns\nThe previous usages of the data_color() method were such that the color ranges encompassed the boundaries of the data values. That can be changed with the domain= argument, which expects a list of two values (a lower and an upper value). Let‚Äôs use the range [0, 10] on the first two columns, integer and float, and not the third (since a numerical domain is incompatible with string-based values). Here‚Äôs the table code for that:\n\n(\n    GT(simple_df)\n    .data_color(\n        columns=[\"integer\", \"float\"],\n        palette=[\"blue\", \"red\"],\n        domain=[0, 10],\n        na_color=\"white\"\n    )\n)\n\n\n\n\n\n\n\n  integer\n  float\n  category\n\n\n\n  \n    1\n    2.3\n    one\n  \n  \n    2\n    1.3\n    two\n  \n  \n    3\n    5.1\n    three\n  \n  \n    4\n    None\n    one\n  \n  \n    5\n    4.4\n    three\n  \n\n\n\n\n\n\n        \n\n\nNice! We can clearly see that the color ramp in the first column (integer) only proceeds from blue (value: 1) to purple (value: 5) and there isn‚Äôt a reddish color in sight (would need a value close to 10).",
    "crumbs": [
      "Get Started",
      "Style",
      "Colorizing with Data"
    ]
  },
  {
    "objectID": "get-started/colorizing-with-data.html#bringing-it-all-together",
    "href": "get-started/colorizing-with-data.html#bringing-it-all-together",
    "title": "Colorizing with Data",
    "section": "Bringing it all together",
    "text": "Bringing it all together\nFor a more advanced treatment of data colorization in the table, let‚Äôs take the sza dataset (available in the great_tables.data submodule) and vigorously reshape it with Polars so that solar zenith angles are arranged as rows by month, and the half-hourly clock times are the columns (from early morning to solar noon).\nOnce the pivot()ing is done, we can introduce that that table to the GT() class, placing the names of the months in the table stub. We will use data_color() with a domain that runs from 90 to 0 (here, 90¬∞ is sunrise, and 0¬∞ is represents the sun angle that‚Äôs directly overhead). There are months where the sun rises later in the morning, before the sunrise times we‚Äôll see missing values in the dataset, and na_color=\"white\" will handle those cases. Okay, that‚Äôs the plan, and now here‚Äôs the code:\n\nfrom great_tables import html\nfrom great_tables.data import sza\nimport polars.selectors as cs\n\nsza_pivot = (\n    pl.from_pandas(sza)\n    .filter((pl.col(\"latitude\") == \"20\") & (pl.col(\"tst\") &lt;= \"1200\"))\n    .select(pl.col(\"*\").exclude(\"latitude\"))\n    .drop_nulls()\n    .pivot(values=\"sza\", index=\"month\", on=\"tst\", sort_columns=True)\n)\n\n(\n    GT(sza_pivot, rowname_col=\"month\")\n    .data_color(\n        domain=[90, 0],\n        palette=[\"rebeccapurple\", \"white\", \"orange\"],\n        na_color=\"white\",\n    )\n    .tab_header(\n        title=\"Solar Zenith Angles from 05:30 to 12:00\",\n        subtitle=html(\"Average monthly values at latitude of 20&deg;N.\"),\n    )\n)\n\n\n\n\n\n\n  \n    Solar Zenith Angles from 05:30 to 12:00\n  \n  \n    Average monthly values at latitude of 20¬∞N.\n  \n\n  \n  0530\n  0600\n  0630\n  0700\n  0730\n  0800\n  0830\n  0900\n  0930\n  1000\n  1030\n  1100\n  1130\n  1200\n\n\n\n  \n    jan\n    None\n    None\n    None\n    84.9\n    78.7\n    72.7\n    66.1\n    61.5\n    56.5\n    52.1\n    48.3\n    45.5\n    43.6\n    43.0\n  \n  \n    feb\n    None\n    None\n    88.9\n    82.5\n    75.8\n    69.6\n    63.3\n    57.7\n    52.2\n    47.4\n    43.1\n    40.0\n    37.8\n    37.2\n  \n  \n    mar\n    None\n    None\n    85.7\n    78.8\n    72.0\n    65.2\n    58.6\n    52.3\n    46.2\n    40.5\n    35.5\n    31.4\n    28.6\n    27.7\n  \n  \n    apr\n    None\n    88.5\n    81.5\n    74.4\n    67.4\n    60.3\n    53.4\n    46.5\n    39.7\n    33.2\n    26.9\n    21.3\n    17.2\n    15.5\n  \n  \n    may\n    None\n    85.0\n    78.2\n    71.2\n    64.3\n    57.2\n    50.2\n    43.2\n    36.1\n    29.1\n    26.1\n    15.2\n    8.8\n    5.0\n  \n  \n    jun\n    89.2\n    82.7\n    76.0\n    69.3\n    62.5\n    55.7\n    48.8\n    41.9\n    35.0\n    28.1\n    21.1\n    14.2\n    7.3\n    2.0\n  \n  \n    jul\n    88.8\n    82.3\n    75.7\n    69.1\n    62.3\n    55.5\n    48.7\n    41.8\n    35.0\n    28.1\n    21.2\n    14.3\n    7.7\n    3.1\n  \n  \n    aug\n    None\n    83.8\n    77.1\n    70.2\n    63.3\n    56.4\n    49.4\n    42.4\n    35.4\n    28.3\n    21.3\n    14.3\n    7.3\n    1.9\n  \n  \n    sep\n    None\n    87.2\n    80.2\n    73.2\n    66.1\n    59.1\n    52.1\n    45.1\n    38.1\n    31.3\n    24.7\n    18.6\n    13.7\n    11.6\n  \n  \n    oct\n    None\n    None\n    84.1\n    77.1\n    70.2\n    63.3\n    56.5\n    49.9\n    43.5\n    37.5\n    32.0\n    27.4\n    24.3\n    23.1\n  \n  \n    nov\n    None\n    None\n    87.8\n    81.3\n    74.5\n    68.3\n    61.8\n    56.0\n    50.2\n    45.3\n    40.7\n    37.4\n    35.1\n    34.4\n  \n  \n    dec\n    None\n    None\n    None\n    84.3\n    78.0\n    71.8\n    66.1\n    60.5\n    55.6\n    50.9\n    47.2\n    44.2\n    42.4\n    41.8\n  \n\n\n\n\n\n\n        \n\n\nBecause this is a table for presentation, we can‚Äôt neglect using tab_header(). A title and subtitle can provide just enough information to guide the reader out through your table visualization.",
    "crumbs": [
      "Get Started",
      "Style",
      "Colorizing with Data"
    ]
  },
  {
    "objectID": "get-started/loc-selection.html",
    "href": "get-started/loc-selection.html",
    "title": "Location selection",
    "section": "",
    "text": "Great Tables uses the loc module to specify locations for styling in tab_style(). Some location specifiers also allow selecting specific columns and rows of data.\nFor example, you might style a particular row name, group, column, or spanner label.\nThe table below shows the different location specifiers, along with the types of column or row selection they allow.\ntable part\n  name\n  selection\n\n\n\n  \n    header\n    loc.header()\n    composite\n  \n  \n    \n    loc.title()\n    \n  \n  \n    \n    loc.subtitle()\n    \n  \n  \n    boxhead\n    loc.column_header()\n    composite\n  \n  \n    \n    loc.spanner_labels()\n    columns\n  \n  \n    \n    loc.column_labels()\n    columns\n  \n  \n    row stub\n    loc.stub()\n    rows\n  \n  \n    \n    loc.row_groups()\n    rows\n  \n  \n    table body\n    loc.body()\n    columns and rows\n  \n  \n    footer\n    loc.footer()\n    composite\n  \n  \n    \n    loc.source_notes()\nNote that composite specifiers are ones that target multiple locations. For example, loc.header() specifies both loc.title() and loc.subtitle().",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Location selection"
    ]
  },
  {
    "objectID": "get-started/loc-selection.html#setting-up-data",
    "href": "get-started/loc-selection.html#setting-up-data",
    "title": "Location selection",
    "section": "Setting up data",
    "text": "Setting up data\nThe examples below will use this small dataset to show selecting different locations, as well as specific rows and columns within a location (where supported).\n\nimport polars as pl\nimport polars.selectors as cs\n\nfrom great_tables import GT, loc, style, exibble\n\npl_exibble = pl.from_pandas(exibble)[[0, 1, 4], [\"num\", \"char\", \"group\"]]\n\npl_exibble\n\n\nshape: (3, 3)numchargroupf64strstr0.1111\"apricot\"\"grp_a\"2.222\"banana\"\"grp_a\"5550.0null\"grp_b\"",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Location selection"
    ]
  },
  {
    "objectID": "get-started/loc-selection.html#simple-locations",
    "href": "get-started/loc-selection.html#simple-locations",
    "title": "Location selection",
    "section": "Simple locations",
    "text": "Simple locations\nSimple locations don‚Äôt take any arguments.\nFor example, styling the title uses loc.title().\n\n(\n    GT(pl_exibble)\n    .tab_header(\"A title\", \"A subtitle\")\n    .tab_style(\n        style.fill(\"yellow\"),\n        loc.title(),\n    )\n)\n\n\n\n\n\n\n  \n    A title\n  \n  \n    A subtitle\n  \n\n  num\n  char\n  group\n\n\n\n  \n    0.1111\n    apricot\n    grp_a\n  \n  \n    2.222\n    banana\n    grp_a\n  \n  \n    5550.0\n    None\n    grp_b",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Location selection"
    ]
  },
  {
    "objectID": "get-started/loc-selection.html#composite-locations",
    "href": "get-started/loc-selection.html#composite-locations",
    "title": "Location selection",
    "section": "Composite locations",
    "text": "Composite locations\nComposite locations target multiple simple locations.\nFor example, loc.header() includes both loc.title() and loc.subtitle().\n\n(\n    GT(pl_exibble)\n    .tab_header(\"A title\", \"A subtitle\")\n    .tab_style(\n        style.fill(\"yellow\"),\n        loc.header(),\n    )\n)\n\n\n\n\n\n\n  \n    A title\n  \n  \n    A subtitle\n  \n\n  num\n  char\n  group\n\n\n\n  \n    0.1111\n    apricot\n    grp_a\n  \n  \n    2.222\n    banana\n    grp_a\n  \n  \n    5550.0\n    None\n    grp_b",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Location selection"
    ]
  },
  {
    "objectID": "get-started/loc-selection.html#body-columns-rows-and-mask",
    "href": "get-started/loc-selection.html#body-columns-rows-and-mask",
    "title": "Location selection",
    "section": "Body columns, rows and mask",
    "text": "Body columns, rows and mask\nUse columns= and rows= in loc.body() to style specific cells in the table body.\n\n(\n    GT(pl_exibble).tab_style(\n        style.fill(\"yellow\"),\n        loc.body(\n            columns=cs.starts_with(\"cha\"),\n            rows=pl.col(\"char\").str.contains(\"a\"),\n        ),\n    )\n)\n\n\n\n\n\n\n\n  num\n  char\n  group\n\n\n\n  \n    0.1111\n    apricot\n    grp_a\n  \n  \n    2.222\n    banana\n    grp_a\n  \n  \n    5550.0\n    None\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nAlternatively, use mask= in loc.body() to apply conditional styling to rows on a per-column basis.\n\n(\n    GT(pl_exibble).tab_style(\n        style.fill(\"yellow\"),\n        loc.body(mask=cs.string().str.contains(\"p\")),\n    )\n)\n\n\n\n\n\n\n\n  num\n  char\n  group\n\n\n\n  \n    0.1111\n    apricot\n    grp_a\n  \n  \n    2.222\n    banana\n    grp_a\n  \n  \n    5550.0\n    None\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nThis is discussed in detail in Styling the Table Body.",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Location selection"
    ]
  },
  {
    "objectID": "get-started/loc-selection.html#column-labels",
    "href": "get-started/loc-selection.html#column-labels",
    "title": "Location selection",
    "section": "Column labels",
    "text": "Column labels\nLocations like loc.spanner_labels() and loc.column_labels() can select specific column and spanner labels.\nYou can use name strings, index position, or polars selectors.\n\nGT(pl_exibble).tab_style(\n    style.fill(\"yellow\"),\n    loc.column_labels(\n        cs.starts_with(\"cha\"),\n    ),\n)\n\n\n\n\n\n\n\n  num\n  char\n  group\n\n\n\n  \n    0.1111\n    apricot\n    grp_a\n  \n  \n    2.222\n    banana\n    grp_a\n  \n  \n    5550.0\n    None\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nHowever, note that loc.spanner_labels() currently only accepts list of string names.",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Location selection"
    ]
  },
  {
    "objectID": "get-started/loc-selection.html#row-and-group-names",
    "href": "get-started/loc-selection.html#row-and-group-names",
    "title": "Location selection",
    "section": "Row and group names",
    "text": "Row and group names\nRow and group names in loc.stub() and loc.row_groups() may be specified three ways:\n\nby name\nby index\nby polars expression\n\n\ngt = GT(pl_exibble).tab_stub(\n    rowname_col=\"char\",\n    groupname_col=\"group\",\n)\n\ngt.tab_style(style.fill(\"yellow\"), loc.stub())\n\n\n\n\n\n\n\n  \n  num\n\n\n\n  \n    grp_a\n  \n  \n    apricot\n    0.1111\n  \n  \n    banana\n    2.222\n  \n  \n    grp_b\n  \n  \n    None\n    5550.0\n  \n\n\n\n\n\n\n        \n\n\n\ngt.tab_style(style.fill(\"yellow\"), loc.stub(\"banana\"))\n\n\n\n\n\n\n\n  \n  num\n\n\n\n  \n    grp_a\n  \n  \n    apricot\n    0.1111\n  \n  \n    banana\n    2.222\n  \n  \n    grp_b\n  \n  \n    None\n    5550.0\n  \n\n\n\n\n\n\n        \n\n\n\ngt.tab_style(style.fill(\"yellow\"), loc.stub([\"apricot\", 2]))\n\n\n\n\n\n\n\n  \n  num\n\n\n\n  \n    grp_a\n  \n  \n    apricot\n    0.1111\n  \n  \n    banana\n    2.222\n  \n  \n    grp_b\n  \n  \n    None\n    5550.0\n  \n\n\n\n\n\n\n        \n\n\n\nGroups by name and position\nNote that for specifying row groups, the group corresponding to the group name or row number in the original data is used.\nFor example, the code below styles the group corresponding to the row at index 1 (i.e.¬†the second row) in the data.\n\ngt.tab_style(\n    style.fill(\"yellow\"),\n    loc.row_groups(1),\n)\n\n\n\n\n\n\n\n  \n  num\n\n\n\n  \n    grp_a\n  \n  \n    apricot\n    0.1111\n  \n  \n    banana\n    2.222\n  \n  \n    grp_b\n  \n  \n    None\n    5550.0\n  \n\n\n\n\n\n\n        \n\n\nSince the second row (starting with ‚Äúbanana‚Äù) is in ‚Äúgrp_a‚Äù, that is the group that gets styled.\nThis means you can use a polars expression to select groups:\n\ngt.tab_style(\n    style.fill(\"yellow\"),\n    loc.row_groups(pl.col(\"group\") == \"grp_b\"),\n)\n\n\n\n\n\n\n\n  \n  num\n\n\n\n  \n    grp_a\n  \n  \n    apricot\n    0.1111\n  \n  \n    banana\n    2.222\n  \n  \n    grp_b\n  \n  \n    None\n    5550.0\n  \n\n\n\n\n\n\n        \n\n\nYou can also specify group names using a string (or list of strings).\n\ngt.tab_style(\n    style.fill(\"yellow\"),\n    loc.row_groups(\"grp_b\"),\n)\n\n\n\n\n\n\n\n  \n  num\n\n\n\n  \n    grp_a\n  \n  \n    apricot\n    0.1111\n  \n  \n    banana\n    2.222\n  \n  \n    grp_b\n  \n  \n    None\n    5550.0",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Location selection"
    ]
  },
  {
    "objectID": "get-started/targeted-styles.html",
    "href": "get-started/targeted-styles.html",
    "title": "Styling the whole table",
    "section": "",
    "text": "In Styling the Table Body, we discussed styling table data with .tab_style(). In this article we‚Äôll cover how the same method can be used to style many other parts of the table, like the header, specific spanner labels, the footer, and more.",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the whole table"
    ]
  },
  {
    "objectID": "get-started/targeted-styles.html#kitchen-sink",
    "href": "get-started/targeted-styles.html#kitchen-sink",
    "title": "Styling the whole table",
    "section": "Kitchen sink",
    "text": "Kitchen sink\nBelow is a big example that shows all possible loc specifiers being used.\n\nfrom great_tables import GT, exibble, loc, style\n\n# https://colorbrewer2.org/#type=qualitative&scheme=Paired&n=12\nbrewer_colors = [\n    \"#a6cee3\",\n    \"#1f78b4\",\n    \"#b2df8a\",\n    \"#33a02c\",\n    \"#fb9a99\",\n    \"#e31a1c\",\n    \"#fdbf6f\",\n    \"#ff7f00\",\n    \"#cab2d6\",\n    \"#6a3d9a\",\n    \"#ffff99\",\n    \"#b15928\",\n]\n\nc = iter(brewer_colors)\n\ngt = (\n    GT(exibble.loc[[0, 1, 4], [\"num\", \"char\", \"fctr\", \"row\", \"group\"]])\n    .tab_header(\"title\", \"subtitle\")\n    .tab_stub(rowname_col=\"row\", groupname_col=\"group\")\n    .tab_source_note(\"yo\")\n    .tab_spanner(\"spanner\", [\"char\", \"fctr\"])\n    .tab_stubhead(\"stubhead\")\n)\n\n(\n    gt.tab_style(style.fill(next(c)), loc.body())\n    # Columns -----------\n    # TODO: appears in browser, but not vs code\n    .tab_style(style.fill(next(c)), loc.column_labels(columns=\"num\"))\n    .tab_style(style.fill(next(c)), loc.column_header())\n    .tab_style(style.fill(next(c)), loc.spanner_labels(ids=[\"spanner\"]))\n    # Header -----------\n    .tab_style(style.fill(next(c)), loc.header())\n    .tab_style(style.fill(next(c)), loc.subtitle())\n    .tab_style(style.fill(next(c)), loc.title())\n    # Footer -----------\n    .tab_style(style.borders(weight=\"3px\"), loc.source_notes())\n    .tab_style(style.fill(next(c)), loc.footer())\n    # Stub --------------\n    .tab_style(style.fill(next(c)), loc.row_groups())\n    .tab_style(style.borders(weight=\"3px\"), loc.stub(rows=1))\n    .tab_style(style.fill(next(c)), loc.stub())\n    .tab_style(style.fill(next(c)), loc.stubhead())\n)\n\n\n\n\n\n\n  \n    title\n  \n  \n    subtitle\n  \n\n  stubhead\n  num\n  \n    spanner\n  \n\n\n  char\n  fctr\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n  \n  \n    row_2\n    2.222\n    banana\n    two\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n  \n\n  \n  \n  \n    yo",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the whole table"
    ]
  },
  {
    "objectID": "get-started/targeted-styles.html#body",
    "href": "get-started/targeted-styles.html#body",
    "title": "Styling the whole table",
    "section": "Body",
    "text": "Body\n\ngt.tab_style(style.fill(\"yellow\"), loc.body())\n\n\n\n\n\n\n  \n    title\n  \n  \n    subtitle\n  \n\n  stubhead\n  num\n  \n    spanner\n  \n\n\n  char\n  fctr\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n  \n  \n    row_2\n    2.222\n    banana\n    two\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n  \n\n  \n  \n  \n    yo",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the whole table"
    ]
  },
  {
    "objectID": "get-started/targeted-styles.html#column-labels",
    "href": "get-started/targeted-styles.html#column-labels",
    "title": "Styling the whole table",
    "section": "Column labels",
    "text": "Column labels\n\n(\n    gt\n    .tab_style(style.fill(\"yellow\"), loc.column_header())\n    .tab_style(style.fill(\"blue\"), loc.column_labels(columns=\"num\"))\n    .tab_style(style.fill(\"red\"), loc.spanner_labels(ids=[\"spanner\"]))\n)\n\n\n\n\n\n\n  \n    title\n  \n  \n    subtitle\n  \n\n  stubhead\n  num\n  \n    spanner\n  \n\n\n  char\n  fctr\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n  \n  \n    row_2\n    2.222\n    banana\n    two\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n  \n\n  \n  \n  \n    yo",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the whole table"
    ]
  },
  {
    "objectID": "get-started/targeted-styles.html#header",
    "href": "get-started/targeted-styles.html#header",
    "title": "Styling the whole table",
    "section": "Header",
    "text": "Header\n\n(\n    gt.tab_style(style.fill(\"yellow\"), loc.header())\n    .tab_style(style.fill(\"blue\"), loc.title())\n    .tab_style(style.fill(\"red\"), loc.subtitle())\n)\n\n\n\n\n\n\n  \n    title\n  \n  \n    subtitle\n  \n\n  stubhead\n  num\n  \n    spanner\n  \n\n\n  char\n  fctr\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n  \n  \n    row_2\n    2.222\n    banana\n    two\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n  \n\n  \n  \n  \n    yo",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the whole table"
    ]
  },
  {
    "objectID": "get-started/targeted-styles.html#footer",
    "href": "get-started/targeted-styles.html#footer",
    "title": "Styling the whole table",
    "section": "Footer",
    "text": "Footer\n\n(\n    gt.tab_style(\n        style.fill(\"yellow\"),\n        loc.source_notes(),\n    ).tab_style(\n        style.borders(weight=\"3px\"),\n        loc.footer(),\n    )\n)\n\n\n\n\n\n\n  \n    title\n  \n  \n    subtitle\n  \n\n  stubhead\n  num\n  \n    spanner\n  \n\n\n  char\n  fctr\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n  \n  \n    row_2\n    2.222\n    banana\n    two\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n  \n\n  \n  \n  \n    yo",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the whole table"
    ]
  },
  {
    "objectID": "get-started/targeted-styles.html#stub",
    "href": "get-started/targeted-styles.html#stub",
    "title": "Styling the whole table",
    "section": "Stub",
    "text": "Stub\n\n(\n    gt.tab_style(style.fill(\"yellow\"), loc.stub())\n    .tab_style(style.fill(\"blue\"), loc.row_groups())\n    .tab_style(\n        style.borders(style=\"dashed\", weight=\"3px\", color=\"red\"),\n        loc.stub(rows=[1]),\n    )\n)\n\n\n\n\n\n\n  \n    title\n  \n  \n    subtitle\n  \n\n  stubhead\n  num\n  \n    spanner\n  \n\n\n  char\n  fctr\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n  \n  \n    row_2\n    2.222\n    banana\n    two\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n  \n\n  \n  \n  \n    yo",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the whole table"
    ]
  },
  {
    "objectID": "get-started/targeted-styles.html#stubhead",
    "href": "get-started/targeted-styles.html#stubhead",
    "title": "Styling the whole table",
    "section": "Stubhead",
    "text": "Stubhead\n\ngt.tab_style(style.fill(\"yellow\"), loc.stubhead())\n\n\n\n\n\n\n  \n    title\n  \n  \n    subtitle\n  \n\n  stubhead\n  num\n  \n    spanner\n  \n\n\n  char\n  fctr\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n  \n  \n    row_2\n    2.222\n    banana\n    two\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n  \n\n  \n  \n  \n    yo",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the whole table"
    ]
  },
  {
    "objectID": "get-started/contributing.html",
    "href": "get-started/contributing.html",
    "title": "Contributing Guidelines",
    "section": "",
    "text": "There are many ways to contribute to the ongoing development of the Great Tables package. Some contributions can be rather easy to do (e.g., fixing typos, improving documentation, filing issues for feature requests or problems, etc.) whereas other contributions can require more time and patience (like answering questions and submitting pull requests with code changes). Just know that that help provided in any capacity is very much appreciated. :)",
    "crumbs": [
      "Get Started",
      "Extra",
      "Contributing Guidelines"
    ]
  },
  {
    "objectID": "get-started/contributing.html#filing-issues",
    "href": "get-started/contributing.html#filing-issues",
    "title": "Contributing Guidelines",
    "section": "Filing Issues",
    "text": "Filing Issues\nIf you believe you found a bug, minimal reproducible example (MRE) for your posting to the Great Tables issue tracker. Try not to include anything unnecessary, just the minimal amount of code that constitutes the reproducible bug. For useful guidelines on how to create an MRE, take a look at this guide on Stack Overflow. We will try to verify the bug by running the code in the provided MRE. The quality of the MRE will reduce the amount of back-and-forth communication in trying to understand how to execute the code on our systems.",
    "crumbs": [
      "Get Started",
      "Extra",
      "Contributing Guidelines"
    ]
  },
  {
    "objectID": "get-started/contributing.html#answering-questions",
    "href": "get-started/contributing.html#answering-questions",
    "title": "Contributing Guidelines",
    "section": "Answering questions",
    "text": "Answering questions\nOne way to help is by simply answering questions. It‚Äôs amazing how a little conversation could lead to better insights on a problem. Don‚Äôt quite know the answer? That‚Äôs okay too. We‚Äôre all in this together.\nWhere might you answer user questions? Some of the forums for Q&A on Great Tables include the Issues and Discussion pages in the repo. Good etiquette is key during these interactions: be a good person to all who ask questions.\n\nMaking Pull Requests\nShould you consider making a pull request (PR), please file an issue first and explain the problem in some detail. If the PR is an enhancement, detail how the change would make things better for package users. Bugfix PRs also require some explanation about the bug and how the proposed fix will remove that bug. A great way to illustrate the bug is to include an MRE. While all this upfront work prior to preparing a PR can be time-consuming it opens a line of communication with the package authors and the community, perhaps leading to a better enhancement or more effective fixes!\nOnce there is consensus that a PR based on the issue would be helpful, adhering to the following process will make things proceed more quickly:\n\nCreate a separate Git branch for each PR\nLook at the build status badges before and after making changes; these badges are available in the package README\nThe Great Tables package follows the Style Guide for Python Code so please adopt those guidelines in your submitted code as best as possible\nComment your code, particularly in those hard-to-understand areas\nAdd test cases that cover the changes made in the PR; having tests for any new codepaths will help guard against regressions\n\n\n\nSetting Up Your Development Environment\nTo set up your development environment, you can follow these steps:\n\nClone the posit-dev/great-tables repository\nCreate a virtual environment for the folder\nInstall the package in editable mode with pip install -e . from the root of the project folder\nInstall the development dependencies with pip install .[dev] (have a look at the pyproject.toml file for the list of development dependencies)\n\nOur documentation use quartodoc which in turn requires a local install of the Quarto CLI. To install Quarto, go to https://quarto.org/docs/get-started/ to get the latest build for your platform.\nWe also use ruff for linting and formatting (this is part of our development dependencies). If using VS Code as your editor, it may be useful to install the Ruff extension. This will make it so any commits will pass the pre-commit checks. You can verify that any changes pass all pre-commit checks by running pre-commit run --all-files.\nIf you are planning to investigate or submit a PR concerning the generation of table images, you need to install additional dependencies (seleniumandPillow) and this can be done by using pip install .[all].\n\n\nBuilding the Documentation Locally\nBuilding the documentation can be done with make docs-build from the root of the project folder. Locally building the documentation site is useful when you want to see how your changes will look during iteration. The site will be built in the docs/_site folder.\n\n\nRunning Tests Locally\nThe tests are located in the tests folder and we use pytest for running them. To run all of the tests, use make test. If you want to run a specific test file, you can use pytest tests/test_file.py.\nIf you create new tests involving snapshots, please ensure that the resulting snapshots are relatively small. After adding snapshots, use make test-update (this runs pytest --snapshot-update). A subsequent use of make test should pass without any issues.",
    "crumbs": [
      "Get Started",
      "Extra",
      "Contributing Guidelines"
    ]
  },
  {
    "objectID": "reference/data.sza.html",
    "href": "reference/data.sza.html",
    "title": "data.sza",
    "section": "",
    "text": "data.sza\nTwice hourly solar zenith angles by month & latitude.\nThis dataset contains solar zenith angles (in degrees, with the range of 0-90) every half hour from 04:00 to 12:00, true solar time. This set of values is calculated on the first of every month for 4 different northern hemisphere latitudes. For determination of afternoon values, the presented tabulated values are symmetric about noon.\nThe solar zenith angle (SZA) is one measure that helps to describe the sun‚Äôs path across the sky. It‚Äôs defined as the angle of the sun relative to a line perpendicular to the earth‚Äôs surface. It is useful to calculate the SZA in relation to the true solar time. True solar time relates to the position of the sun with respect to the observer, which is different depending on the exact longitude. For example, two hours before the sun crosses the meridian (the highest point it would reach that day) corresponds to a true solar time of 10 a.m. The SZA has a strong dependence on the observer‚Äôs latitude. For example, at a latitude of 50 degrees N at the start of January, the noontime SZA is 73.0 but a different observer at 20 degrees N would measure the noontime SZA to be 43.0 degrees.\n\n\nThis is a dataset with 816 rows and 4 columns.\n\nlatitude: The latitude in decimal degrees for the observations.\nmonth: The measurement month. All calculations where conducted for the first day of each month.\ntst: The true solar time at the given latitude and date (first of month) for which the solar zenith angle is calculated.\nsza: The solar zenith angle in degrees, where missing values indicate that sunrise hadn‚Äôt yet occurred by the tst value.\n\n\n\n\nRows: 816\nColumns: 4\n$ latitude &lt;str&gt; '20', '20', '20'\n$ month    &lt;str&gt; 'jan', 'jan', 'jan'\n$ tst      &lt;str&gt; '0400', '0430', '0500'\n$ sza      &lt;f64&gt; None, None, None\n\n\n\nCalculated Actinic Fluxes (290 - 700 nm) for Air Pollution Photochemistry Applications (Peterson, 1976), available at: https://nepis.epa.gov/Exe/ZyPURL.cgi?Dockey=9100JA26.txt."
  },
  {
    "objectID": "reference/data.sza.html#details",
    "href": "reference/data.sza.html#details",
    "title": "data.sza",
    "section": "",
    "text": "This is a dataset with 816 rows and 4 columns.\n\nlatitude: The latitude in decimal degrees for the observations.\nmonth: The measurement month. All calculations where conducted for the first day of each month.\ntst: The true solar time at the given latitude and date (first of month) for which the solar zenith angle is calculated.\nsza: The solar zenith angle in degrees, where missing values indicate that sunrise hadn‚Äôt yet occurred by the tst value."
  },
  {
    "objectID": "reference/data.sza.html#preview",
    "href": "reference/data.sza.html#preview",
    "title": "data.sza",
    "section": "",
    "text": "Rows: 816\nColumns: 4\n$ latitude &lt;str&gt; '20', '20', '20'\n$ month    &lt;str&gt; 'jan', 'jan', 'jan'\n$ tst      &lt;str&gt; '0400', '0430', '0500'\n$ sza      &lt;f64&gt; None, None, None"
  },
  {
    "objectID": "reference/data.sza.html#source",
    "href": "reference/data.sza.html#source",
    "title": "data.sza",
    "section": "",
    "text": "Calculated Actinic Fluxes (290 - 700 nm) for Air Pollution Photochemistry Applications (Peterson, 1976), available at: https://nepis.epa.gov/Exe/ZyPURL.cgi?Dockey=9100JA26.txt."
  },
  {
    "objectID": "reference/GT.cols_move_to_end.html",
    "href": "reference/GT.cols_move_to_end.html",
    "title": "GT.cols_move_to_end",
    "section": "",
    "text": "GT.cols_move_to_end(self, columns)\nMove one or more columns to the end.\nWe can easily move set of columns to the beginning of the column series and we only need to specify which columns. It‚Äôs possible to do this upstream of Great Tables, however, it is easier with this method and it presents less possibility for error. The ordering of the columns that are moved to the end is preserved (same with the ordering of all other columns in the table)."
  },
  {
    "objectID": "reference/GT.cols_move_to_end.html#parameters",
    "href": "reference/GT.cols_move_to_end.html#parameters",
    "title": "GT.cols_move_to_end",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list."
  },
  {
    "objectID": "reference/GT.cols_move_to_end.html#returns",
    "href": "reference/GT.cols_move_to_end.html#returns",
    "title": "GT.cols_move_to_end",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.cols_move_to_end.html#examples",
    "href": "reference/GT.cols_move_to_end.html#examples",
    "title": "GT.cols_move_to_end",
    "section": "Examples",
    "text": "Examples\nFor this example, we‚Äôll use a portion of the countrypops dataset to create a simple table. Let‚Äôs move the year column, which is the middle column, to the end of the column series with the cols_move_to_end() method.\n\nfrom great_tables import GT\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Benin\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\nGT(countrypops_mini).cols_move_to_end(columns=\"year\")\n\n\n\n\n\n\n\n  country_name\n  population\n  year\n\n\n\n  \n    Benin\n    11940683\n    2018\n  \n  \n    Benin\n    12290444\n    2019\n  \n  \n    Benin\n    12643123\n    2020\n  \n  \n    Benin\n    12996895\n    2021\n  \n  \n    Benin\n    13352864\n    2022\n  \n\n\n\n\n\n\n        \n\n\nWe can also move multiple columns at a time. With the same countrypops-based table (countrypops_mini), let‚Äôs move both the year and country_name columns to the end of the column series.\n\nGT(countrypops_mini).cols_move_to_end(columns=[\"year\", \"country_name\"])\n\n\n\n\n\n\n\n  population\n  year\n  country_name\n\n\n\n  \n    11940683\n    2018\n    Benin\n  \n  \n    12290444\n    2019\n    Benin\n  \n  \n    12643123\n    2020\n    Benin\n  \n  \n    12996895\n    2021\n    Benin\n  \n  \n    13352864\n    2022\n    Benin"
  },
  {
    "objectID": "reference/GT.fmt.html",
    "href": "reference/GT.fmt.html",
    "title": "GT.fmt",
    "section": "",
    "text": "GT.fmt(self, fns, columns=None, rows=None, is_substitution=False)\nSet a column format with a formatter function.\nThe fmt() method provides a way to execute custom formatting functionality with raw data values in a way that can consider all output contexts.\nAlong with the columns and rows arguments that provide some precision in targeting data cells, the fns argument allows you to define one or more functions for manipulating the raw data."
  },
  {
    "objectID": "reference/GT.fmt.html#parameters",
    "href": "reference/GT.fmt.html#parameters",
    "title": "GT.fmt",
    "section": "Parameters",
    "text": "Parameters\n\nfns : FormatFn | FormatFns\n\nEither a single formatting function or a named list of functions.\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\n\nis_substitution : bool = False\n\nWhether the formatter is a substitution. Substitutions are run last, after other formatters."
  },
  {
    "objectID": "reference/GT.fmt.html#returns",
    "href": "reference/GT.fmt.html#returns",
    "title": "GT.fmt",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt.html#examples",
    "href": "reference/GT.fmt.html#examples",
    "title": "GT.fmt",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the exibble dataset to create a table. With the fmt() method, we‚Äôll add a prefix ^ and a suffix $ to the row and group columns.\n\nfrom great_tables import GT, exibble\n\n(\n    GT(exibble)\n    .fmt(lambda x: f\"^{x}$\", columns=[\"row\", \"group\"])\n)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    ^row_1$\n    ^grp_a$\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    ^row_2$\n    ^grp_a$\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    ^row_3$\n    ^grp_a$\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    ^row_4$\n    ^grp_a$\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    ^row_5$\n    ^grp_b$\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    ^row_6$\n    ^grp_b$\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    ^row_7$\n    ^grp_b$\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    ^row_8$\n    ^grp_b$"
  },
  {
    "objectID": "reference/GT.tab_spanner.html",
    "href": "reference/GT.tab_spanner.html",
    "title": "GT.tab_spanner",
    "section": "",
    "text": "GT.tab_spanner(\n    self,\n    label,\n    columns=None,\n    spanners=None,\n    level=None,\n    id=None,\n    gather=True,\n    replace=False,\n)\nInsert a spanner above a selection of column headings.\nThis part of the table contains, at a minimum, column labels and, optionally, an unlimited number of levels for spanners. A spanner will occupy space over any number of contiguous column labels and it will have an associated label and ID value. This method allows for mapping to be defined by column names, existing spanner ID values, or a mixture of both.\nThe spanners are placed in the order of calling tab_spanner() so if a later call uses the same columns in its definition (or even a subset) as the first invocation, the second spanner will be overlaid atop the first. Options exist for forcibly inserting a spanner underneath others (with level as space permits) and with replace, which allows for full or partial spanner replacement."
  },
  {
    "objectID": "reference/GT.tab_spanner.html#parameters",
    "href": "reference/GT.tab_spanner.html#parameters",
    "title": "GT.tab_spanner",
    "section": "Parameters",
    "text": "Parameters\n\nlabel : str | BaseText\n\nThe text to use for the spanner label. We can optionally use the md() and html() helper functions to style the text as Markdown or to retain HTML elements in the text. Alternatively, units notation can be used (see define_units() for details).\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nspanners : str | list[str] | None = None\n\nThe spanners that should be spanned over, should they already be defined. One or more spanner ID values (in quotes) can be supplied here. This argument works in tandem with the columns argument.\n\nlevel : int | None = None\n\nAn explicit level to which the spanner should be placed. If not provided, Great Tables will choose the level based on the inputs provided within columns and spanners, placing the spanner label where it will fit. The first spanner level (right above the column labels) is 0.\n\nid : str | None = None\n\nThe ID for the spanner. When accessing a spanner through the spanners argument of tab_spanner() the id value is used as the reference (and not the label). If an id is not explicitly provided here, it will be taken from the label value. It is advisable to set an explicit id value if you plan to access this cell in a later call and the label text is complicated (e.g., contains markup, is lengthy, or both). Finally, when providing an id value you must ensure that it is unique across all ID values set for spanner labels (the method will throw an error if id isn‚Äôt unique).\n\ngather : bool = True\n\nAn option to move the specified columns such that they are unified under the spanner. Ordering of the moved-into-place columns will be preserved in all cases. By default, this is set to True.\n\nreplace : bool = False\n\nShould new spanners be allowed to partially or fully replace existing spanners? (This is a possibility if setting spanners at an already populated level.) By default, this is set to False and an error will occur if some replacement is attempted."
  },
  {
    "objectID": "reference/GT.tab_spanner.html#returns",
    "href": "reference/GT.tab_spanner.html#returns",
    "title": "GT.tab_spanner",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.tab_spanner.html#examples",
    "href": "reference/GT.tab_spanner.html#examples",
    "title": "GT.tab_spanner",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs create a table using a small portion of the gtcars dataset. Over several columns (hp, hp_rpm, trq, trq_rpm, mpg_c, mpg_h) we‚Äôll use tab_spanner() to add a spanner with the label \"performance\". This effectively groups together several columns related to car performance under a unifying label.\n\nfrom great_tables import GT, md\nfrom great_tables.data import gtcars\n\ncolnames = [\"model\", \"hp\", \"hp_rpm\", \"trq\", \"trq_rpm\", \"mpg_c\", \"mpg_h\"]\ngtcars_mini = gtcars[colnames].head(10)\n\n(\n    GT(gtcars_mini)\n    .tab_spanner(\n        label=\"performance\",\n        columns=[\"hp\", \"hp_rpm\", \"trq\", \"trq_rpm\", \"mpg_c\", \"mpg_h\"]\n    )\n)\n\n\n\n\n\n\n\n  model\n  \n    performance\n  \n\n\n  hp\n  hp_rpm\n  trq\n  trq_rpm\n  mpg_c\n  mpg_h\n\n\n\n  \n    GT\n    647.0\n    6250.0\n    550.0\n    5900.0\n    11.0\n    18.0\n  \n  \n    458 Speciale\n    597.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    458 Spider\n    562.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    458 Italia\n    562.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    488 GTB\n    661.0\n    8000.0\n    561.0\n    3000.0\n    15.0\n    22.0\n  \n  \n    California\n    553.0\n    7500.0\n    557.0\n    4750.0\n    16.0\n    23.0\n  \n  \n    GTC4Lusso\n    680.0\n    8250.0\n    514.0\n    5750.0\n    12.0\n    17.0\n  \n  \n    FF\n    652.0\n    8000.0\n    504.0\n    6000.0\n    11.0\n    16.0\n  \n  \n    F12Berlinetta\n    731.0\n    8250.0\n    509.0\n    6000.0\n    11.0\n    16.0\n  \n  \n    LaFerrari\n    949.0\n    9000.0\n    664.0\n    6750.0\n    12.0\n    16.0\n  \n\n\n\n\n\n\n        \n\n\nOne cool feature of tab_spanner() is its support for multiple levels, allowing you to group columns in various ways. For example, you can create three bottom spanners and a top spanner:\n\n(\n    GT(gtcars_mini)\n    .tab_spanner(\n        label=\"hp\",\n        columns=[\"hp\", \"hp_rpm\"],\n    )\n    .tab_spanner(\n        label=\"trq\",\n        columns=[\"trq\", \"trq_rpm\"],\n    )\n    .tab_spanner(\n        label=\"mpg\",\n        columns=[\"mpg_c\", \"mpg_h\"],\n    )\n    .tab_spanner(\n        label=\"performance\",\n        columns=[\"hp\", \"hp_rpm\", \"trq\", \"trq_rpm\", \"mpg_c\", \"mpg_h\"],\n    )\n)\n\n\n\n\n\n\n\n  \n    ¬†\n  \n  \n    performance\n  \n\n\n  model\n  \n    hp\n  \n  \n    trq\n  \n  \n    mpg\n  \n\n\n  hp\n  hp_rpm\n  trq\n  trq_rpm\n  mpg_c\n  mpg_h\n\n\n\n  \n    GT\n    647.0\n    6250.0\n    550.0\n    5900.0\n    11.0\n    18.0\n  \n  \n    458 Speciale\n    597.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    458 Spider\n    562.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    458 Italia\n    562.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    488 GTB\n    661.0\n    8000.0\n    561.0\n    3000.0\n    15.0\n    22.0\n  \n  \n    California\n    553.0\n    7500.0\n    557.0\n    4750.0\n    16.0\n    23.0\n  \n  \n    GTC4Lusso\n    680.0\n    8250.0\n    514.0\n    5750.0\n    12.0\n    17.0\n  \n  \n    FF\n    652.0\n    8000.0\n    504.0\n    6000.0\n    11.0\n    16.0\n  \n  \n    F12Berlinetta\n    731.0\n    8250.0\n    509.0\n    6000.0\n    11.0\n    16.0\n  \n  \n    LaFerrari\n    949.0\n    9000.0\n    664.0\n    6750.0\n    12.0\n    16.0\n  \n\n\n\n\n\n\n        \n\n\nDid you notice that the spanners stacked automatically? What if you want granular control to specify a spanner in a specific hierarchy? Great Tables has you covered. By using the level= parameter, you can easily adjust the hierarchy of spanners. For example, by specifying level=0 for the last call of tab_spanner(), you can place that spanner at the bottom level (level 0) instead of the top level (level 2).\n\n(\n    GT(gtcars_mini)\n    .tab_spanner(\n        label=\"hp\",\n        columns=[\"hp\", \"hp_rpm\"],\n    )\n    .tab_spanner(\n        label=\"performance\",\n        columns=[\"hp\", \"hp_rpm\", \"trq\", \"trq_rpm\"],\n    )\n    .tab_spanner(\n        label=\"trq\",\n        columns=[\"trq\", \"trq_rpm\"],\n        level=0,\n    )\n)\n\n\n\n\n\n\n\n  \n    ¬†\n  \n  \n    performance\n  \n  \n    ¬†\n  \n\n\n  model\n  \n    hp\n  \n  \n    trq\n  \n  mpg_c\n  mpg_h\n\n\n  hp\n  hp_rpm\n  trq\n  trq_rpm\n\n\n\n  \n    GT\n    647.0\n    6250.0\n    550.0\n    5900.0\n    11.0\n    18.0\n  \n  \n    458 Speciale\n    597.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    458 Spider\n    562.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    458 Italia\n    562.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    488 GTB\n    661.0\n    8000.0\n    561.0\n    3000.0\n    15.0\n    22.0\n  \n  \n    California\n    553.0\n    7500.0\n    557.0\n    4750.0\n    16.0\n    23.0\n  \n  \n    GTC4Lusso\n    680.0\n    8250.0\n    514.0\n    5750.0\n    12.0\n    17.0\n  \n  \n    FF\n    652.0\n    8000.0\n    504.0\n    6000.0\n    11.0\n    16.0\n  \n  \n    F12Berlinetta\n    731.0\n    8250.0\n    509.0\n    6000.0\n    11.0\n    16.0\n  \n  \n    LaFerrari\n    949.0\n    9000.0\n    664.0\n    6750.0\n    12.0\n    16.0\n  \n\n\n\n\n\n\n        \n\n\nWe can also use Markdown formatting for the spanner label. In this example, we‚Äôll use gt.md(\"*Performance*\") to make the label italicized.\n\n(\n    GT(gtcars_mini)\n    .tab_spanner(\n        label=md(\"*Performance*\"),\n        columns=[\"hp\", \"hp_rpm\", \"trq\", \"trq_rpm\", \"mpg_c\", \"mpg_h\"]\n    )\n)\n\n\n\n\n\n\n\n  model\n  \n    Performance\n  \n\n\n  hp\n  hp_rpm\n  trq\n  trq_rpm\n  mpg_c\n  mpg_h\n\n\n\n  \n    GT\n    647.0\n    6250.0\n    550.0\n    5900.0\n    11.0\n    18.0\n  \n  \n    458 Speciale\n    597.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    458 Spider\n    562.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    458 Italia\n    562.0\n    9000.0\n    398.0\n    6000.0\n    13.0\n    17.0\n  \n  \n    488 GTB\n    661.0\n    8000.0\n    561.0\n    3000.0\n    15.0\n    22.0\n  \n  \n    California\n    553.0\n    7500.0\n    557.0\n    4750.0\n    16.0\n    23.0\n  \n  \n    GTC4Lusso\n    680.0\n    8250.0\n    514.0\n    5750.0\n    12.0\n    17.0\n  \n  \n    FF\n    652.0\n    8000.0\n    504.0\n    6000.0\n    11.0\n    16.0\n  \n  \n    F12Berlinetta\n    731.0\n    8250.0\n    509.0\n    6000.0\n    11.0\n    16.0\n  \n  \n    LaFerrari\n    949.0\n    9000.0\n    664.0\n    6750.0\n    12.0\n    16.0"
  },
  {
    "objectID": "reference/GT.fmt_scientific.html",
    "href": "reference/GT.fmt_scientific.html",
    "title": "GT.fmt_scientific",
    "section": "",
    "text": "GT.fmt_scientific(\n    self,\n    columns=None,\n    rows=None,\n    decimals=2,\n    n_sigfig=None,\n    drop_trailing_zeros=False,\n    drop_trailing_dec_mark=True,\n    scale_by=1,\n    exp_style='x10n',\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign_m=False,\n    force_sign_n=False,\n    locale=None,\n)\nFormat values to scientific notation.\nWith numeric values in a table, we can perform formatting so that the targeted values are rendered in scientific notation, where extremely large or very small numbers can be expressed in a more practical fashion. Here, numbers are written in the form of a mantissa (m) and an exponent (n) with the construction m x 10^n or mEn. The mantissa component is a number between 1 and 10. For instance, 2.5 x 10^9 can be used to represent the value 2,500,000,000 in scientific notation. In a similar way, 0.00000012 can be expressed as 1.2 x 10^-7. Due to its ability to describe numbers more succinctly and its ease of calculation, scientific notation is widely employed in scientific and technical domains.\nWe have fine control over the formatting task, with the following options:"
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#parameters",
    "href": "reference/GT.fmt_scientific.html#parameters",
    "title": "GT.fmt_scientific",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\ndecimals : int = 2\n\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True.\n\nn_sigfig : int | None = None\n\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\n\ndrop_trailing_zeros : bool = False\n\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\nscale_by : float = 1\n\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n\nexp_style : str = 'x10n'\n\nStyle of formatting to use for the scientific notation formatting. By default this is \"x10n\" but other options include using a single letter (e.g., \"e\", \"E\", etc.), a letter followed by a \"1\" to signal a minimum digit width of one, or \"low-ten\" for using a stylized \"10\" marker.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign_m : bool = False\n\nShould the plus sign be shown for positive values of the mantissa (first component)? This would effectively show a sign for all values except zero on the first numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\n\nforce_sign_n : bool = False\n\nShould the plus sign be shown for positive values of the exponent (second component)? This would effectively show a sign for all values except zero on the second numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#returns",
    "href": "reference/GT.fmt_scientific.html#returns",
    "title": "GT.fmt_scientific",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_scientific.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_scientific",
    "section": "Adapting output to a specific locale",
    "text": "Adapting output to a specific locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should a value be provided in dec_mark it will be overridden by the locale‚Äôs preferred values.\nNote that a locale value provided here will override any global locale setting performed in GT()‚Äôs own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#examples",
    "href": "reference/GT.fmt_scientific.html#examples",
    "title": "GT.fmt_scientific",
    "section": "Examples",
    "text": "Examples\nFor this example, we‚Äôll use the exibble dataset as the input table. With the fmt_scientific() method, we‚Äôll format the num column to contain values in scientific formatting.\n\nfrom great_tables import GT, exibble\n\n(\n    GT(exibble)\n    .fmt_scientific(columns=\"num\")\n)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    1.11 √ó 10‚àí1\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.22\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    3.33 √ó 101\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    4.44 √ó 102\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5.55 √ó 103\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    7.77 √ó 105\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8.88 √ó 106\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b"
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#see-also",
    "href": "reference/GT.fmt_scientific.html#see-also",
    "title": "GT.fmt_scientific",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_scientific(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/GT.sub_zero.html",
    "href": "reference/GT.sub_zero.html",
    "title": "GT.sub_zero",
    "section": "",
    "text": "GT.sub_zero(self, columns=None, rows=None, zero_text='nil')\nSubstitute zero values in the table body.\nWherever there is numerical data that are zero in value, replacement text may be better for explanatory purposes. The sub_zero() function allows for this replacement through its zero_text= argument."
  },
  {
    "objectID": "reference/GT.sub_zero.html#parameters",
    "href": "reference/GT.sub_zero.html#parameters",
    "title": "GT.sub_zero",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should be scanned for zeros. The default is all rows, resulting in all rows in all targeted columns being considered for this substitution. Alternatively, we can supply a list of row indices.\n\nzero_text : str = 'nil'\n\nThe text to be used in place of zero values in the rendered table. We can optionally use the md() or html() functions to style the text as Markdown or to retain HTML elements in the text."
  },
  {
    "objectID": "reference/GT.sub_zero.html#returns",
    "href": "reference/GT.sub_zero.html#returns",
    "title": "GT.sub_zero",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.sub_zero.html#examples",
    "href": "reference/GT.sub_zero.html#examples",
    "title": "GT.sub_zero",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs generate a simple table that contains an assortment of values that could potentially undergo some substitution via the sub_zero() method (i.e., there are two 0 values). The ordering of the fmt_scientific() and sub_zero() calls in the example below doesn‚Äôt affect the final result since any sub_*() method won‚Äôt interfere with the formatting of the table.\n\nfrom great_tables import GT\nimport polars as pl\n\nsingle_vals_df = pl.DataFrame(\n    {\n        \"i\": range(1, 8),\n        \"numbers\": [2.75, 0, -3.2, 8, 1e-10, 0, 2.6e9]\n    }\n)\n\nGT(single_vals_df).fmt_scientific(columns=\"numbers\").sub_zero()\n\n\n\n\n\n\n\n  i\n  numbers\n\n\n\n  \n    1\n    2.75\n  \n  \n    2\n    nil\n  \n  \n    3\n    ‚àí3.20\n  \n  \n    4\n    8.00\n  \n  \n    5\n    1.00 √ó 10‚àí10\n  \n  \n    6\n    nil\n  \n  \n    7\n    2.60 √ó 109"
  },
  {
    "objectID": "reference/vals.fmt_percent.html",
    "href": "reference/vals.fmt_percent.html",
    "title": "vals.fmt_percent",
    "section": "",
    "text": "vals.fmt_percent(\n    x,\n    decimals=2,\n    drop_trailing_zeros=False,\n    drop_trailing_dec_mark=True,\n    scale_values=True,\n    accounting=False,\n    use_seps=True,\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign=False,\n    placement='right',\n    incl_space=False,\n    locale=None,\n)\nFormat values as a percentage.\nWith numeric values in a list, we can perform percentage-based formatting. It is assumed the input numeric values are proportional values and, in this case, the values will be automatically multiplied by 100 before decorating with a percent sign (the other case is accommodated though setting scale_values to False). For more control over percentage formatting, we can use the following options:"
  },
  {
    "objectID": "reference/vals.fmt_percent.html#parameters",
    "href": "reference/vals.fmt_percent.html#parameters",
    "title": "vals.fmt_percent",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted.\n\ndecimals : int = 2\n\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True.\n\ndrop_trailing_zeros : bool = False\n\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\nscale_values : bool = True\n\nShould the values be scaled through multiplication by 100? By default this scaling is performed since the expectation is that incoming values are usually proportional. Setting to False signifies that the values are already scaled and require only the percent sign when formatted.\n\naccounting : bool = False\n\nAn option to use accounting style for values. Normally, negative values will be shown with a minus sign but using accounting style will instead put any negative values in parentheses.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nplacement : str = 'right'\n\nThis option governs the placement of the percent sign. This can be either be \"right\" (the default) or \"left\".\n\nincl_space : bool = False\n\nAn option for whether to include a space between the value and the percent sign. The default is to not introduce a space character.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/vals.fmt_percent.html#returns",
    "href": "reference/vals.fmt_percent.html#returns",
    "title": "vals.fmt_percent",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_percent.html#examples",
    "href": "reference/vals.fmt_percent.html#examples",
    "title": "vals.fmt_percent",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\nvals.fmt_percent([0.3, 0.926132], decimals=2)\n\n['30.00%', '92.61%']"
  },
  {
    "objectID": "reference/vals.fmt_date.html",
    "href": "reference/vals.fmt_date.html",
    "title": "vals.fmt_date",
    "section": "",
    "text": "vals.fmt_date(x, date_style='iso', pattern='{x}', locale=None)\nFormat values as dates.\nFormat input values to time values using one of 17 preset date styles. Input can be in the form of date type or as a ISO-8601 string (in the form of YYYY-MM-DD HH:MM:SS or YYYY-MM-DD)."
  },
  {
    "objectID": "reference/vals.fmt_date.html#parameters",
    "href": "reference/vals.fmt_date.html#parameters",
    "title": "vals.fmt_date",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted.\n\ndate_style : DateStyle = 'iso'\n\nThe date style to use. By default this is the short name \"iso\" which corresponds to ISO 8601 date formatting. There are 41 date styles in total and their short names can be viewed using info_date_style().\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/vals.fmt_date.html#formatting-with-the-date_style-argument",
    "href": "reference/vals.fmt_date.html#formatting-with-the-date_style-argument",
    "title": "vals.fmt_date",
    "section": "Formatting with the date_style argument",
    "text": "Formatting with the date_style argument\nWe need to supply a preset date style to the date_style argument. The date styles are numerous and can handle localization to any supported locale. The following table provides a listing of all date styles and their output values (corresponding to an input date of 2000-02-29).\n\n\n\n\nDate Style\nOutput\n\n\n\n\n1\n\"iso\"\n\"2000-02-29\"\n\n\n2\n\"wday_month_day_year\"\n\"Tuesday, February 29, 2000\"\n\n\n3\n\"wd_m_day_year\"\n\"Tue, Feb 29, 2000\"\n\n\n4\n\"wday_day_month_year\"\n\"Tuesday 29 February 2000\"\n\n\n5\n\"month_day_year\"\n\"February 29, 2000\"\n\n\n6\n\"m_day_year\"\n\"Feb 29, 2000\"\n\n\n7\n\"day_m_year\"\n\"29 Feb 2000\"\n\n\n8\n\"day_month_year\"\n\"29 February 2000\"\n\n\n9\n\"day_month\"\n\"29 February\"\n\n\n10\n\"day_m\"\n\"29 Feb\"\n\n\n11\n\"year\"\n\"2000\"\n\n\n12\n\"month\"\n\"February\"\n\n\n13\n\"day\"\n\"29\"\n\n\n14\n\"year.mn.day\"\n\"2000/02/29\"\n\n\n15\n\"y.mn.day\"\n\"00/02/29\"\n\n\n16\n\"year_week\"\n\"2000-W09\"\n\n\n17\n\"year_quarter\"\n\"2000-Q1\"\n\n\n\nWe can use the info_date_style() function within the console to view a similar table of date styles with example output."
  },
  {
    "objectID": "reference/vals.fmt_date.html#returns",
    "href": "reference/vals.fmt_date.html#returns",
    "title": "vals.fmt_date",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_date.html#examples",
    "href": "reference/vals.fmt_date.html#examples",
    "title": "vals.fmt_date",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\nvals.fmt_date([\"2025-01-01\", \"2025-01-02\"], date_style=\"month_day_year\")\n\n['January 1, 2025', 'January 2, 2025']"
  },
  {
    "objectID": "reference/vals.fmt_currency.html",
    "href": "reference/vals.fmt_currency.html",
    "title": "vals.fmt_currency",
    "section": "",
    "text": "vals.fmt_currency(\n    x,\n    currency=None,\n    use_subunits=True,\n    decimals=None,\n    drop_trailing_dec_mark=True,\n    accounting=False,\n    use_seps=True,\n    scale_by=1,\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign=False,\n    placement='left',\n    incl_space=False,\n    locale=None,\n)\nFormat values as currencies.\nWith numeric values, we can perform currency-based formatting with the val_fmt_currency() function. This supports both automatic formatting with a three-letter currency code. We have fine control over the conversion from numeric values to currency values, where we could take advantage of the following options:"
  },
  {
    "objectID": "reference/vals.fmt_currency.html#parameters",
    "href": "reference/vals.fmt_currency.html#parameters",
    "title": "vals.fmt_currency",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted.\n\ncurrency : str | None = None\n\nThe currency to use for the numeric value. This input can be supplied as a 3-letter currency code (e.g., \"USD\" for U.S. Dollars, \"EUR\" for the Euro currency).\n\nuse_subunits : bool = True\n\nAn option for whether the subunits portion of a currency value should be displayed. For example, with an input value of 273.81, the default formatting will produce \"$273.81\". Removing the subunits (with use_subunits = False) will give us \"$273\".\n\ndecimals : int | None = None\n\nThe decimals values corresponds to the exact number of decimal places to use. This value is optional as a currency has an intrinsic number of decimal places (i.e., the subunits). A value such as 2.34 can, for example, be formatted with 0 decimal places and if the currency used is \"USD\" it would result in \"$2\". With 4 decimal places, the formatted value becomes \"$2.3400\".\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\naccounting : bool = False\n\nAn option to use accounting style for values. Normally, negative values will be shown with a minus sign but using accounting style will instead put any negative values in parentheses.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\nscale_by : float = 1\n\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nplacement : str = 'left'\n\nThe placement of the currency symbol. This can be either be \"left\" (as in \"$450\") or \"right\" (which yields \"450$\").\n\nincl_space : bool = False\n\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/vals.fmt_currency.html#returns",
    "href": "reference/vals.fmt_currency.html#returns",
    "title": "vals.fmt_currency",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_currency.html#examples",
    "href": "reference/vals.fmt_currency.html#examples",
    "title": "vals.fmt_currency",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\nvals.fmt_currency([1.02, 3.46], decimals=3)\n\n['$1.020', '$3.460']"
  },
  {
    "objectID": "reference/vals.fmt_number.html",
    "href": "reference/vals.fmt_number.html",
    "title": "vals.fmt_number",
    "section": "",
    "text": "vals.fmt_number(\n    x,\n    decimals=2,\n    n_sigfig=None,\n    drop_trailing_zeros=False,\n    drop_trailing_dec_mark=True,\n    use_seps=True,\n    accounting=False,\n    scale_by=1,\n    compact=False,\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign=False,\n    locale=None,\n)\nFormat numeric values.\nWith numeric values in a list, we can perform number-based formatting so that the values are rendered with some level of precision. The following major options are available:"
  },
  {
    "objectID": "reference/vals.fmt_number.html#parameters",
    "href": "reference/vals.fmt_number.html#parameters",
    "title": "vals.fmt_number",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted.\n\ndecimals : int = 2\n\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the val_fmt_integer() function should be considered.\n\nn_sigfig : int | None = None\n\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\n\ndrop_trailing_zeros : bool = False\n\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\naccounting : bool = False\n\nAn option to use accounting style for values. Normally, negative values will be shown with a minus sign but using accounting style will instead put any negative values in parentheses.\n\nscale_by : float = 1\n\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n\ncompact : bool = False\n\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1.23K, and 1230000 becomes 1.23M). The compact option is False by default.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/vals.fmt_number.html#returns",
    "href": "reference/vals.fmt_number.html#returns",
    "title": "vals.fmt_number",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_number.html#examples",
    "href": "reference/vals.fmt_number.html#examples",
    "title": "vals.fmt_number",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\nvals.fmt_number([0.325, 777000], decimals=2)\n\n['0.33', '777,000.00']"
  },
  {
    "objectID": "reference/GT.fmt_nanoplot.html",
    "href": "reference/GT.fmt_nanoplot.html",
    "title": "GT.fmt_nanoplot",
    "section": "",
    "text": "GT.fmt_nanoplot(\n    self,\n    columns=None,\n    rows=None,\n    plot_type='line',\n    plot_height='2em',\n    missing_vals='marker',\n    autoscale=False,\n    reference_line=None,\n    reference_area=None,\n    expand_x=None,\n    expand_y=None,\n    options=None,\n)\nFormat data for nanoplot visualizations.\nThe fmt_nanoplot() method is used to format data for nanoplot visualizations. This method allows for the creation of a variety of different plot types, including line, bar, and scatter plots."
  },
  {
    "objectID": "reference/GT.fmt_nanoplot.html#parameters",
    "href": "reference/GT.fmt_nanoplot.html#parameters",
    "title": "GT.fmt_nanoplot",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : str | None = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\nplot_type : PlotType = 'line'\n\nNanoplots can either take the form of a line plot (using \"line\") or a bar plot (with \"bar\"). A line plot, by default, contains layers for a data line, data points, and a data area. With a bar plot, the always visible layer is that of the data bars.\n\nplot_height : str = '2em'\n\nThe height of the nanoplots. The default here is a sensible value of \"2em\".\n\nmissing_vals : MissingVals = 'marker'\n\nIf missing values are encountered within the input data, there are three strategies available for their handling: (1) \"gap\" will show data gaps at the sites of missing data, where data lines will have discontinuities and bar plots will have missing bars; (2) \"marker\" will behave like \"gap\" but show prominent visual marks at the missing data locations; (3) \"zero\" will replace missing values with zero values; and (4) \"remove\" will remove any incoming missing values.\n\nautoscale : bool = False\n\nUsing autoscale=True will ensure that the bounds of all nanoplots produced are based on the limits of data combined from all input rows. This will result in a shared scale across all of the nanoplots (for y- and x-axis data), which is useful in those cases where the nanoplot data should be compared across rows.\n\nreference_line : str | int | float | None = None\n\nA reference line requires a single input to define the line. It could be a numeric value, applied to all nanoplots generated. Or, the input can be one of the following for generating the line from the underlying data: (1) \"mean\", (2) \"median\", (3) \"min\", (4) \"max\", (5) \"q1\", (6) \"q3\", (7) \"first\", or (8) \"last\".\n\nreference_area : list[Any] | None = None\n\nA reference area requires a list of two values for defining bottom and top boundaries (in the y direction) for a rectangular area. The types of values supplied are the same as those expected for reference_line=, which is either a numeric value or one of the following keywords for the generation of the value: (1) \"mean\", (2) \"median\", (3) \"min\", (4) \"max\", (5) \"q1\", (6) \"q3\", (7) \"first\", or (8) \"last\". Input can either be a vector or list with two elements.\n\nexpand_x : list[int] | list[float] | list[int | float] | None = None\n\nShould you need to have plots expand in the x direction, provide one or more values to expand_x=. Any values provided that are outside of the range of x-value data provided to the plot will result in a x-scale expansion.\n\nexpand_y : list[int] | list[float] | list[int | float] | None = None\n\nSimilar to expand_x=, one can have plots expand in the y direction. To make this happen, provide one or more values to expand_y=. If any of the provided values are outside of the range of y-value data provided, the plot will result in a y-scale expansion.\n\noptions : dict[str, Any] | None = None\n\nBy using the nanoplot_options() helper function here, you can alter the layout and styling of the nanoplots in the new column."
  },
  {
    "objectID": "reference/GT.fmt_nanoplot.html#returns",
    "href": "reference/GT.fmt_nanoplot.html#returns",
    "title": "GT.fmt_nanoplot",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_nanoplot.html#details",
    "href": "reference/GT.fmt_nanoplot.html#details",
    "title": "GT.fmt_nanoplot",
    "section": "Details",
    "text": "Details\nNanoplots try to show individual data with reasonably good visibility. Interactivity is included as a basic feature so one can hover over the data points and vertical guides will display the value ascribed to each data point. Because Great Tables knows all about numeric formatting, values will be compactly formatted so as to not take up valuable real estate.\nWhile basic customization options are present in fmt_nanoplot(), many more opportunities for customizing nanoplots on a more granular level are possible with the aforementioned nanoplot_options() helper function. With that, layers of the nanoplots can be selectively removed and the aesthetics of the remaining plot components can be modified."
  },
  {
    "objectID": "reference/GT.fmt_nanoplot.html#examples",
    "href": "reference/GT.fmt_nanoplot.html#examples",
    "title": "GT.fmt_nanoplot",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs create a nanoplot from a Polars DataFrame containing multiple numbers per cell. The numbers are represented here as strings, where spaces separate the values, and the same values are present in two columns: lines and bars. We will use the fmt_nanoplot() method twice to create a line plot and a bar plot from the data in their respective columns.\n\nfrom great_tables import GT\nimport polars as pl\n\nrandom_numbers_df = pl.DataFrame(\n    {\n        \"i\": range(1, 5),\n        \"lines\": [\n            \"20 23 6 7 37 23 21 4 7 16\",\n            \"2.3 6.8 9.2 2.42 3.5 12.1 5.3 3.6 7.2 3.74\",\n            \"-12 -5 6 3.7 0 8 -7.4\",\n            \"2 0 15 7 8 10 1 24 17 13 6\",\n        ],\n    }\n).with_columns(bars=pl.col(\"lines\"))\n\n(\n    GT(random_numbers_df, rowname_col=\"i\")\n    .fmt_nanoplot(columns=\"lines\")\n    .fmt_nanoplot(columns=\"bars\", plot_type=\"bar\")\n)\n\n\n\n\n\n\n\n  \n  lines\n  bars\n\n\n\n  \n    1\n    3742023673723214716\n    3702023673723214716\n  \n  \n    2\n    12.12.302.306.809.202.423.5012.15.303.607.203.74\n    12.102.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    3\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n    8.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    4\n    2402015781012417136\n    2402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nWe can always represent the input DataFrame in a different way (with list columns) and fmt_nanoplot() will still work. While the input data is the same as in the previous example, we‚Äôll take the opportunity here to add a reference line and a reference area to the line plot and also to the bar plot.\n\nrandom_numbers_df = pl.DataFrame(\n    {\n        \"i\": range(1, 5),\n        \"lines\": [\n            { \"val\": [20.0, 23.0, 6.0, 7.0, 37.0, 23.0, 21.0, 4.0, 7.0, 16.0] },\n            { \"val\": [2.3, 6.8, 9.2, 2.42, 3.5, 12.1, 5.3, 3.6, 7.2, 3.74] },\n            { \"val\": [-12.0, -5.0, 6.0, 3.7, 0.0, 8.0, -7.4] },\n            { \"val\": [2.0, 0.0, 15.0, 7.0, 8.0, 10.0, 1.0, 24.0, 17.0, 13.0, 6.0] },\n        ],\n    }\n).with_columns(bars=pl.col(\"lines\"))\n\n(\n    GT(random_numbers_df, rowname_col=\"i\")\n    .fmt_nanoplot(\n        columns=\"lines\",\n        reference_line=\"mean\",\n        reference_area=[\"min\", \"q1\"]\n    )\n    .fmt_nanoplot(\n        columns=\"bars\",\n        plot_type=\"bar\",\n        reference_line=\"max\",\n        reference_area=[\"max\", \"median\"])\n)\n\n\n\n\n\n\n\n  \n  lines\n  bars\n\n\n\n  \n    1\n    16.43742023673723214716\n    37.03742023673723214716\n  \n  \n    2\n    5.6212.12.302.306.809.202.423.5012.15.303.607.203.74\n    12.112.12.302.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    3\n    ‚àí0.968.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n    8.008.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    4\n    9.362402015781012417136\n    24.02402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nHere‚Äôs an example to adjust some of the options using nanoplot_options().\n\nfrom great_tables import nanoplot_options\n\n(\n    GT(random_numbers_df, rowname_col=\"i\")\n    .fmt_nanoplot(\n        columns=\"lines\",\n        reference_line=\"mean\",\n        reference_area=[\"min\", \"q1\"],\n        options=nanoplot_options(\n            data_point_radius=8,\n            data_point_stroke_color=\"black\",\n            data_point_stroke_width=2,\n            data_point_fill_color=\"white\",\n            data_line_type=\"straight\",\n            data_line_stroke_color=\"brown\",\n            data_line_stroke_width=2,\n            data_area_fill_color=\"orange\",\n            vertical_guide_stroke_color=\"green\",\n        ),\n    )\n    .fmt_nanoplot(\n        columns=\"bars\",\n        plot_type=\"bar\",\n        reference_line=\"max\",\n        reference_area=[\"max\", \"median\"],\n        options=nanoplot_options(\n            data_bar_stroke_color=\"gray\",\n            data_bar_stroke_width=2,\n            data_bar_fill_color=\"orange\",\n            data_bar_negative_stroke_color=\"blue\",\n            data_bar_negative_stroke_width=1,\n            data_bar_negative_fill_color=\"lightblue\",\n            reference_line_color=\"pink\",\n            reference_area_fill_color=\"bisque\",\n            vertical_guide_stroke_color=\"blue\",\n        ),\n    )\n)\n\n\n\n\n\n\n\n  \n  lines\n  bars\n\n\n\n  \n    1\n    16.43742023673723214716\n    37.03742023673723214716\n  \n  \n    2\n    5.6212.12.302.306.809.202.423.5012.15.303.607.203.74\n    12.112.12.302.306.809.202.423.5012.15.303.607.203.74\n  \n  \n    3\n    ‚àí0.968.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n    8.008.00‚àí12.0‚àí12.0‚àí5.006.003.7008.00‚àí7.40\n  \n  \n    4\n    9.362402015781012417136\n    24.02402015781012417136\n  \n\n\n\n\n\n\n        \n\n\nSingle-value bar plots and line plots can be made with fmt_nanoplot(). These run in the horizontal direction, which is ideal for tabular presentation. The key thing here is that fmt_nanoplot() expects a column of numeric values. These plots are meant for comparison across rows so the method automatically scales the horizontal bars to facilitate this type of display. The following example shows how fmt_nanoplot() can be used to create single-value bar and line plots.\n\nsingle_vals_df = pl.DataFrame(\n    {\n        \"i\": range(1, 6),\n        \"bars\": [4.1, 1.3, -5.3, 0, 8.2],\n        \"lines\": [12.44, 6.34, 5.2, -8.2, 9.23]\n    }\n)\n(\n    GT(single_vals_df, rowname_col=\"i\")\n    .fmt_nanoplot(columns=\"bars\", plot_type=\"bar\")\n    .fmt_nanoplot(columns=\"lines\", plot_type=\"line\")\n)\n\n\n\n\n\n\n\n  \n  bars\n  lines\n\n\n\n  \n    1\n    4.10\n    12.4\n  \n  \n    2\n    1.30\n    6.34\n  \n  \n    3\n    ‚àí5.30\n    5.20\n  \n  \n    4\n    0\n    ‚àí8.20\n  \n  \n    5\n    8.20\n    9.23"
  },
  {
    "objectID": "reference/GT.show.html",
    "href": "reference/GT.show.html",
    "title": "GT.show",
    "section": "",
    "text": "GT.show(self, target='auto')\nDisplay the table in a notebook or a web browser.\nNote that this function is often unecessary in a notebook. However, it‚Äôs sometimes useful for manually triggering display within a code cell."
  },
  {
    "objectID": "reference/GT.show.html#parameters",
    "href": "reference/GT.show.html#parameters",
    "title": "GT.show",
    "section": "Parameters",
    "text": "Parameters\n\ntarget : Literal['auto', 'notebook', 'browser'] = 'auto'\n\nWhere to show the table. If ‚Äúauto‚Äù, infer whether the table can be displayed inline (e.g.¬†in a notebook), or whether a browser is needed (e.g.¬†in a console)."
  },
  {
    "objectID": "reference/GT.show.html#examples",
    "href": "reference/GT.show.html#examples",
    "title": "GT.show",
    "section": "Examples",
    "text": "Examples\nThe example below when in the Great Tables documentation, should appear on the page.\n\nfrom great_tables import GT, exibble\n\nGT(exibble.head(2)).show()\nGT(exibble.tail(2)).show()\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b"
  },
  {
    "objectID": "reference/GT.fmt_image.html",
    "href": "reference/GT.fmt_image.html",
    "title": "GT.fmt_image",
    "section": "",
    "text": "GT.fmt_image(\n    self,\n    columns=None,\n    rows=None,\n    height=None,\n    width=None,\n    sep=' ',\n    path=None,\n    file_pattern='{}',\n    encode=True,\n)\nFormat image paths to generate images in cells.\nTo more easily insert graphics into body cells, we can use the fmt_image() method. This allows for one or more images to be placed in the targeted cells. The cells need to contain some reference to an image file, either: (1) local paths to the files; (2) complete http/https to the files; (3) the file names, where a common path can be provided via path=; or (4) a fragment of the file name, where the file_pattern= argument helps to compose the entire file name and path= provides the path information. This should be expressly used on columns that contain only references to image files (i.e., no image references as part of a larger block of text). Multiple images can be included per cell by separating image references by commas. The sep= argument allows for a common separator to be applied between images."
  },
  {
    "objectID": "reference/GT.fmt_image.html#parameters",
    "href": "reference/GT.fmt_image.html#parameters",
    "title": "GT.fmt_image",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\nheight : str | int | None = None\n\nThe height of the rendered images.\n\nwidth : str | int | None = None\n\nThe width of the rendered images.\n\nsep : str = ' '\n\nIn the output of images within a body cell, sep= provides the separator between each image.\n\npath : str | Path | None = None\n\nAn optional path to local image files or an HTTP/HTTPS URL. This is combined with the filenames to form the complete image paths.\n\nfile_pattern : str = '{}'\n\nThe pattern to use for mapping input values in the body cells to the names of the graphics files. The string supplied should use \"{}\" in the pattern to map filename fragments to input strings.\n\nencode : bool = True\n\nThe option to always use Base64 encoding for image paths that are determined to be local. By default, this is True."
  },
  {
    "objectID": "reference/GT.fmt_image.html#returns",
    "href": "reference/GT.fmt_image.html#returns",
    "title": "GT.fmt_image",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_image.html#examples",
    "href": "reference/GT.fmt_image.html#examples",
    "title": "GT.fmt_image",
    "section": "Examples",
    "text": "Examples\nUsing a small portion of metro dataset, let‚Äôs create a new table. We will only include a few columns and rows from that table. The lines column has comma-separated listings of numbers corresponding to lines served at each station. We have a directory of SVG graphics for all of these lines in the package (the path for the image directory can be accessed via files(\"great_tables\") / \"data/metro_images\", using the importlib_resources package). The filenames roughly corresponds to the data in the lines column. The fmt_image() method can be used with these inputs since the path= and file_pattern= arguments allow us to compose complete and valid file locations. What you get from this are sequences of images in the table cells, taken from the referenced graphics files on disk.\n\nfrom great_tables import GT\nfrom great_tables.data import metro\nfrom importlib_resources import files\n\nimg_paths = files(\"great_tables\") / \"data/metro_images\"\n\nmetro_mini = metro[[\"name\", \"lines\", \"passengers\"]].head(5)\n\n(\n    GT(metro_mini)\n    .fmt_image(\n        columns=\"lines\",\n        path=img_paths,\n        file_pattern=\"metro_{}.svg\"\n    )\n    .fmt_integer(columns=\"passengers\")\n)\n\n\n\n\n\n\n\n  name\n  lines\n  passengers\n\n\n\n  \n    Argentine\n    \n    2,079,212\n  \n  \n    Bastille\n      \n    8,069,243\n  \n  \n    B√©rault\n    \n    2,106,827\n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n     \n    1,909,005\n  \n  \n    Charles de Gaulle‚Äî√âtoile\n      \n    4,291,663"
  },
  {
    "objectID": "reference/GT.sub_missing.html",
    "href": "reference/GT.sub_missing.html",
    "title": "GT.sub_missing",
    "section": "",
    "text": "GT.sub_missing(self, columns=None, rows=None, missing_text=None)\nSubstitute missing values in the table body.\nWherever there is missing data (i.e., None values) customizable content may present better than the standard representation of missing values that would otherwise appear. The sub_missing() method allows for this replacement through its missing_text= argument. And by not supplying anything to missing_text=, an em dash will serve as a default indicator of missingness."
  },
  {
    "objectID": "reference/GT.sub_missing.html#parameters",
    "href": "reference/GT.sub_missing.html#parameters",
    "title": "GT.sub_missing",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should be scanned for missing values. The default is all rows, resulting in all rows in all targeted columns being considered for this substitution. Alternatively, we can supply a list of row indices.\n\nmissing_text : str | Text | None = None\n\nThe text to be used in place of missing values in the rendered table. We can optionally use the md() or html() helper functions to style the text as Markdown or to retain HTML elements in the text."
  },
  {
    "objectID": "reference/GT.sub_missing.html#returns",
    "href": "reference/GT.sub_missing.html#returns",
    "title": "GT.sub_missing",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.sub_missing.html#examples",
    "href": "reference/GT.sub_missing.html#examples",
    "title": "GT.sub_missing",
    "section": "Examples",
    "text": "Examples\nUsing a subset of the exibble dataset, let‚Äôs create a new table. The missing values in two selections of columns will be given different variations of replacement text (across two separate calls of sub_missing()).\n\nfrom great_tables import GT, md, html, exibble\nimport polars as pl\nimport polars.selectors as cs\n\nexibble_mini = pl.from_pandas(exibble).drop(\"row\", \"group\", \"fctr\").slice(4, 8)\n\n(\n    GT(exibble_mini)\n    .sub_missing(\n        columns=[\"num\", \"char\"],\n        missing_text=\"missing\"\n    )\n    .sub_missing(\n        columns=cs.contains((\"date\", \"time\")) | cs.by_name(\"currency\"),\n        missing_text=\"nothing\"\n    )\n)\n\n\n\n\n\n\n\n  num\n  char\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    5550.0\n    missing\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n  \n    missing\n    fig\n    2015-06-15\n    nothing\n    2018-06-06 16:11\n    13.255\n  \n  \n    777000.0\n    grapefruit\n    nothing\n    19:10\n    2018-07-07 05:22\n    nothing\n  \n  \n    8880000.0\n    honeydew\n    2015-08-15\n    20:20\n    nothing\n    0.44"
  },
  {
    "objectID": "reference/GT.tab_options.html",
    "href": "reference/GT.tab_options.html",
    "title": "GT.tab_options",
    "section": "",
    "text": "GT.tab_options(\n    self,\n    container_width=None,\n    container_height=None,\n    container_overflow_x=None,\n    container_overflow_y=None,\n    table_width=None,\n    table_layout=None,\n    table_margin_left=None,\n    table_margin_right=None,\n    table_background_color=None,\n    table_additional_css=None,\n    table_font_names=None,\n    table_font_size=None,\n    table_font_weight=None,\n    table_font_style=None,\n    table_font_color=None,\n    table_font_color_light=None,\n    table_border_top_style=None,\n    table_border_top_width=None,\n    table_border_top_color=None,\n    table_border_bottom_style=None,\n    table_border_bottom_width=None,\n    table_border_bottom_color=None,\n    table_border_left_style=None,\n    table_border_left_width=None,\n    table_border_left_color=None,\n    table_border_right_style=None,\n    table_border_right_width=None,\n    table_border_right_color=None,\n    heading_background_color=None,\n    heading_align=None,\n    heading_title_font_size=None,\n    heading_title_font_weight=None,\n    heading_subtitle_font_size=None,\n    heading_subtitle_font_weight=None,\n    heading_padding=None,\n    heading_padding_horizontal=None,\n    heading_border_bottom_style=None,\n    heading_border_bottom_width=None,\n    heading_border_bottom_color=None,\n    heading_border_lr_style=None,\n    heading_border_lr_width=None,\n    heading_border_lr_color=None,\n    column_labels_background_color=None,\n    column_labels_font_size=None,\n    column_labels_font_weight=None,\n    column_labels_text_transform=None,\n    column_labels_padding=None,\n    column_labels_padding_horizontal=None,\n    column_labels_vlines_style=None,\n    column_labels_vlines_width=None,\n    column_labels_vlines_color=None,\n    column_labels_border_top_style=None,\n    column_labels_border_top_width=None,\n    column_labels_border_top_color=None,\n    column_labels_border_bottom_style=None,\n    column_labels_border_bottom_width=None,\n    column_labels_border_bottom_color=None,\n    column_labels_border_lr_style=None,\n    column_labels_border_lr_width=None,\n    column_labels_border_lr_color=None,\n    column_labels_hidden=None,\n    row_group_background_color=None,\n    row_group_font_size=None,\n    row_group_font_weight=None,\n    row_group_text_transform=None,\n    row_group_padding=None,\n    row_group_padding_horizontal=None,\n    row_group_border_top_style=None,\n    row_group_border_top_width=None,\n    row_group_border_top_color=None,\n    row_group_border_bottom_style=None,\n    row_group_border_bottom_width=None,\n    row_group_border_bottom_color=None,\n    row_group_border_left_style=None,\n    row_group_border_left_width=None,\n    row_group_border_left_color=None,\n    row_group_border_right_style=None,\n    row_group_border_right_width=None,\n    row_group_border_right_color=None,\n    row_group_as_column=None,\n    table_body_hlines_style=None,\n    table_body_hlines_width=None,\n    table_body_hlines_color=None,\n    table_body_vlines_style=None,\n    table_body_vlines_width=None,\n    table_body_vlines_color=None,\n    table_body_border_top_style=None,\n    table_body_border_top_width=None,\n    table_body_border_top_color=None,\n    table_body_border_bottom_style=None,\n    table_body_border_bottom_width=None,\n    table_body_border_bottom_color=None,\n    stub_background_color=None,\n    stub_font_size=None,\n    stub_font_weight=None,\n    stub_text_transform=None,\n    stub_border_style=None,\n    stub_border_width=None,\n    stub_border_color=None,\n    stub_row_group_font_size=None,\n    stub_row_group_font_weight=None,\n    stub_row_group_text_transform=None,\n    stub_row_group_border_style=None,\n    stub_row_group_border_width=None,\n    stub_row_group_border_color=None,\n    data_row_padding=None,\n    data_row_padding_horizontal=None,\n    source_notes_background_color=None,\n    source_notes_font_size=None,\n    source_notes_padding=None,\n    source_notes_padding_horizontal=None,\n    source_notes_border_bottom_style=None,\n    source_notes_border_bottom_width=None,\n    source_notes_border_bottom_color=None,\n    source_notes_border_lr_style=None,\n    source_notes_border_lr_width=None,\n    source_notes_border_lr_color=None,\n    source_notes_multiline=None,\n    source_notes_sep=None,\n    row_striping_background_color=None,\n    row_striping_include_stub=None,\n    row_striping_include_table_body=None,\n    quarto_disable_processing=None,\n)\nModify the table output options.\nModify the options available in a table. These options are named by the components, the subcomponents, and the element that can adjusted."
  },
  {
    "objectID": "reference/GT.tab_options.html#parameters",
    "href": "reference/GT.tab_options.html#parameters",
    "title": "GT.tab_options",
    "section": "Parameters",
    "text": "Parameters\n\ncontainer_width : str | None = None\n\nThe width of the table‚Äôs container. Can be specified as a single-length character with units of pixels or as a percentage. If provided as a scalar numeric value, it is assumed that the value is given in units of pixels.\n\ncontainer_height : str | None = None\n\nThe height of the table‚Äôs container.\n\ncontainer_overflow_x : str | None = None\n\nAn option to enable scrolling in the horizontal direction when the table content overflows the container dimensions. Using True (the default) means that horizontal scrolling is enabled to view the entire table in those directions. With False, the table may be clipped if the table width or height exceeds the container_width.\n\ncontainer_overflow_y : str | None = None\n\nAn option to enable scrolling in the vertical direction when the table content overflows. Same rules apply as for container_overflow_x; the dependency here is that of the table height (container_height).\n\ntable_width : str | None = None\n\nThe width of the table. Can be specified as a string with units of pixels or as a percentage. If provided as a numeric value, it is assumed that the value is given in units of pixels.\n\ntable_layout : str | None = None\n\nThe value for the table-layout CSS style in the HTML output context. By default, this is \"fixed\" but another valid option is \"auto\".\n\ntable_margin_left : str | None = None\n\nThe size of the margins on the left of the table within the container. Can be specified as a single-length value with units of pixels or as a percentage. If provided as a numeric value, it is assumed that the value is given in units of pixels. Using table_margin_left will overwrite any values set by table_align.\n\ntable_margin_right : str | None = None\n\nThe size of the margins on the right of the table within the container. Same rules apply as for table_margin_left. Using table_margin_right will overwrite any values set by table_align.\n\ntable_background_color : str | None = None\n\nThe background color for the table. A color name or a hexadecimal color code should be provided.\n\ntable_additional_css : list[str] | None = None\n\nAdditional CSS that can be added to the table. This can be used to add any custom CSS that is not covered by the other options.\n\ntable_font_names : str | list[str] | None = None\n\nThe names of the fonts used for the table. This should be provided as a list of font names. If the first font isn‚Äôt available, then the next font is tried (and so on).\n\ntable_font_size : str | None = None\n\nThe font size for the table. Can be specified as a string with units of pixels or as a percentage. If provided as a numeric value, it is assumed that the value is given in units of pixels.\n\ntable_font_weight : str | int | float | None = None\n\nThe font weight of the table. Can be a text-based keyword such as \"normal\", \"bold\", \"lighter\", \"bolder\", or, a numeric value between 1 and 1000, inclusive. Note that only variable fonts may support the numeric mapping of weight.\n\ntable_font_style : str | None = None\n\nThe font style for the table. Can be one of either \"normal\", \"italic\", or \"oblique\".\n\ntable_font_color : str | None = None\n\nThe text color used throughout the table. A color name or a hexadecimal color code should be provided.\n\ntable_font_color_light : str | None = None\n\nThe text color used throughout the table when the background color is dark. A color name or a hexadecimal color code should be provided.\n\ntable_border_top_style : str | None = None\n\nThe style of the table‚Äôs absolute top border. Can be one of either \"solid\", \"dotted\", \"dashed\", \"double\", \"groove\", \"ridge\", \"inset\", or \"outset\".\n\ntable_border_top_width : str | None = None\n\nThe width of the table‚Äôs absolute top border. Can be specified as a string with units of pixels or as a percentage. If provided as a numeric value, it is assumed that the value is given in units of pixels.\n\ntable_border_top_color : str | None = None\n\nThe color of the table‚Äôs absolute top border. A color name or a hexadecimal color code should be provided.\n\ntable_border_bottom_style : str | None = None\n\nThe style of the table‚Äôs absolute bottom border.\n\ntable_border_bottom_width : str | None = None\n\nThe width of the table‚Äôs absolute bottom border.\n\ntable_border_bottom_color : str | None = None\n\nThe color of the table‚Äôs absolute bottom border.\n\ntable_border_left_style : str | None = None\n\nThe style of the table‚Äôs absolute left border.\n\ntable_border_left_width : str | None = None\n\nThe width of the table‚Äôs absolute left border.\n\ntable_border_left_color : str | None = None\n\nThe color of the table‚Äôs absolute left border.\n\ntable_border_right_style : str | None = None\n\nThe style of the table‚Äôs absolute right border.\n\ntable_border_right_width : str | None = None\n\nThe width of the table‚Äôs absolute right border.\n\ntable_border_right_color : str | None = None\n\nThe color of the table‚Äôs absolute right border.\n\nheading_background_color : str | None = None\n\nThe background color for the heading. A color name or a hexadecimal color code should be provided.\n\nheading_align : str | None = None\n\nControls the horizontal alignment of the heading title and subtitle. We can either use \"center\", \"left\", or \"right\".\n\nheading_title_font_size : str | None = None\n\nThe font size for the heading title element.\n\nheading_title_font_weight : str | int | float | None = None\n\nThe font weight of the heading title.\n\nheading_subtitle_font_size : str | None = None\n\nThe font size for the heading subtitle element.\n\nheading_subtitle_font_weight : str | int | float | None = None\n\nThe font weight of the heading subtitle.\n\nheading_padding : str | None = None\n\nThe amount of vertical padding to incorporate in the heading (title and subtitle). Can be specified as a string with units of pixels or as a percentage. If provided as a numeric value, it is assumed that the value is given in units of pixels.\n\nheading_padding_horizontal : str | None = None\n\nThe amount of horizontal padding to incorporate in the heading (title and subtitle). Can be specified as a string with units of pixels or as a percentage. If provided as a numeric value, it is assumed that the value is given in units of pixels.\n\nheading_border_bottom_style : str | None = None\n\nThe style of the header‚Äôs bottom border.\n\nheading_border_bottom_width : str | None = None\n\nThe width of the header‚Äôs bottom border. If the width of this border is larger, then it will be the visible border.\n\nheading_border_bottom_color : str | None = None\n\nThe color of the header‚Äôs bottom border.\n\nheading_border_lr_style : str | None = None\n\nThe style of the left and right borders of the heading location.\n\nheading_border_lr_width : str | None = None\n\nThe width of the left and right borders of the heading location. If the width of this border is larger, then it will be the visible border.\n\nheading_border_lr_color : str | None = None\n\nThe color of the left and right borders of the heading location.\n\ncolumn_labels_background_color : str | None = None\n\nThe background color for the column labels. A color name or a hexadecimal color code should be provided.\n\ncolumn_labels_font_size : str | None = None\n\nThe font size to use for all column labels.\n\ncolumn_labels_font_weight : str | int | float | None = None\n\nThe font weight of the table‚Äôs column labels.\n\ncolumn_labels_text_transform : str | None = None\n\nThe text transformation for the column labels. Either of the \"uppercase\", \"lowercase\", or \"capitalize\" keywords can be used.\n\ncolumn_labels_padding : str | None = None\n\nThe amount of vertical padding to incorporate in the column_labels (this includes the column spanners).\n\ncolumn_labels_padding_horizontal : str | None = None\n\nThe amount of horizontal padding to incorporate in the column_labels (this includes the column spanners).\n\ncolumn_labels_vlines_style : str | None = None\n\nThe style of all vertical lines (‚Äòvlines‚Äô) of the column_labels.\n\ncolumn_labels_vlines_width : str | None = None\n\nThe width of all vertical lines (‚Äòvlines‚Äô) of the column_labels.\n\ncolumn_labels_vlines_color : str | None = None\n\nThe color of all vertical lines (‚Äòvlines‚Äô) of the column_labels.\n\ncolumn_labels_border_top_style : str | None = None\n\nThe style of the top border of the column_labels location.\n\ncolumn_labels_border_top_width : str | None = None\n\nThe width of the top border of the column_labels location. If the width of this border is larger, then it will be the visible border.\n\ncolumn_labels_border_top_color : str | None = None\n\nThe color of the top border of the column_labels location.\n\ncolumn_labels_border_bottom_style : str | None = None\n\nThe style of the bottom border of the column_labels location.\n\ncolumn_labels_border_bottom_width : str | None = None\n\nThe width of the bottom border of the column_labels location. If the width of this border is larger, then it will be the visible border.\n\ncolumn_labels_border_bottom_color : str | None = None\n\nThe color of the bottom border of the column_labels location.\n\ncolumn_labels_border_lr_style : str | None = None\n\nThe style of the left and right borders of the column_labels location.\n\ncolumn_labels_border_lr_width : str | None = None\n\nThe width of the left and right borders of the column_labels location. If the width of this border is larger, then it will be the visible border.\n\ncolumn_labels_border_lr_color : str | None = None\n\nThe color of the left and right borders of the column_labels location.\n\ncolumn_labels_hidden : bool | None = None\n\nAn option to hide the column labels. If providing True then the entire column_labels location won‚Äôt be seen and the table header (if present) will collapse downward.\n\nrow_group_background_color : str | None = None\n\nThe background color for the row group labels. A color name or a hexadecimal color code should be provided.\n\nrow_group_font_weight : str | int | float | None = None\n\nThe font weight for all row group labels present in the table.\n\nrow_group_font_size : str | None = None\n\nThe font size to use for all row group labels.\n\nrow_group_padding : str | None = None\n\nThe amount of vertical padding to incorporate in the row group labels.\n\nrow_group_border_top_style : str | None = None\n\nThe style of the top border of the row_group location.\n\nrow_group_border_top_width : str | None = None\n\nThe width of the top border of the row_group location. If the width of this border is larger, then it will be the visible border.\n\nrow_group_border_top_color : str | None = None\n\nThe color of the top border of the row_group location.\n\nrow_group_border_bottom_style : str | None = None\n\nThe style of the bottom border of the row_group location.\n\nrow_group_border_bottom_width : str | None = None\n\nThe width of the bottom border of the row_group location. If the width of this border is larger, then it will be the visible border.\n\nrow_group_border_bottom_color : str | None = None\n\nThe color of the bottom border of the row_group location.\n\nrow_group_border_left_style : str | None = None\n\nThe style of the left border of the row_group location.\n\nrow_group_border_left_width : str | None = None\n\nThe width of the left border of the row_group location. If the width of this border is larger, then it will be the visible border.\n\nrow_group_border_left_color : str | None = None\n\nThe color of the left border of the row_group location.\n\nrow_group_border_right_style : str | None = None\n\nThe style of the right border of the row_group location.\n\nrow_group_border_right_width : str | None = None\n\nThe width of the right border of the row_group location. If the width of this border is\n\nrow_group_border_right_color : str | None = None\n\nThe color of the right border of the row_group location.\n\nrow_group_as_column : bool | None = None\n\nAn option to render the row group labels as a column. If True, then the row group labels will be rendered as a column to the left of the table body. If False, then the row group labels will be rendered as a separate row above the grouping of rows.\n\ntable_body_hlines_style : str | None = None\n\nThe style of all horizontal lines (‚Äòhlines‚Äô) in the table_body.\n\ntable_body_hlines_width : str | None = None\n\nThe width of all horizontal lines (‚Äòhlines‚Äô) in the table_body.\n\ntable_body_hlines_color : str | None = None\n\nThe color of all horizontal lines (‚Äòhlines‚Äô) in the table_body.\n\ntable_body_vlines_style : str | None = None\n\nThe style of all vertical lines (‚Äòvlines‚Äô) in the table_body.\n\ntable_body_vlines_width : str | None = None\n\nThe width of all vertical lines (‚Äòvlines‚Äô) in the table_body.\n\ntable_body_vlines_color : str | None = None\n\nThe color of all vertical lines (‚Äòvlines‚Äô) in the table_body.\n\ntable_body_border_top_style : str | None = None\n\nThe style of the top border of the table_body location.\n\ntable_body_border_top_width : str | None = None\n\nThe width of the top border of the table_body location. If the width of this border is larger, then it will be the visible border.\n\ntable_body_border_top_color : str | None = None\n\nThe color of the top border of the table_body location.\n\ntable_body_border_bottom_style : str | None = None\n\nThe style of the bottom border of the table_body location.\n\ntable_body_border_bottom_width : str | None = None\n\nThe width of the bottom border of the table_body location. If the width of this border\n\ntable_body_border_bottom_color : str | None = None\n\nThe color of the bottom border of the table_body location.\n\nstub_background_color : str | None = None\n\nThe background color for the stub. A color name or a hexadecimal color code should be provided.\n\nstub_font_size : str | None = None\n\nThe font size to use for all row labels present in the table stub.\n\nstub_font_weight : str | int | float | None = None\n\nThe font weight for all row labels present in the table stub.\n\nstub_text_transform : str | None = None\n\nThe text transformation for the row labels present in the table stub.\n\nstub_border_style : str | None = None\n\nThe style of the vertical border of the table stub.\n\nstub_border_width : str | None = None\n\nThe width of the vertical border of the table stub.\n\nstub_border_color : str | None = None\n\nThe color of the vertical border of the table stub.\n\nstub_row_group_font_size : str | None = None\n\nThe font size for the row group column in the stub.\n\nstub_row_group_font_weight : str | int | float | None = None\n\nThe font weight for the row group column in the stub.\n\nstub_row_group_text_transform : str | None = None\n\nThe text transformation for the row group column in the stub.\n\nstub_row_group_border_style : str | None = None\n\nThe style of the vertical border of the row group column in the stub.\n\nstub_row_group_border_width : str | None = None\n\nThe width of the vertical border of the row group column in the stub.\n\nstub_row_group_border_color : str | None = None\n\nThe color of the vertical border of the row group column in the stub.\n\ndata_row_padding : str | None = None\n\nThe amount of vertical padding to incorporate in the body/stub rows.\n\ndata_row_padding_horizontal : str | None = None\n\nThe amount of horizontal padding to incorporate in the body/stub rows.\n\nsource_notes_background_color : str | None = None\n\nThe background color for the source notes. A color name or a hexadecimal color code should be provided.\n\nsource_notes_font_size : str | None = None\n\nThe font size to use for all source note text.\n\nsource_notes_padding : str | None = None\n\nThe amount of vertical padding to incorporate in the source notes.\n\nsource_notes_padding_horizontal : str | None = None\n\nThe amount of horizontal padding to incorporate in the source notes.\n\nsource_notes_multiline : bool | None = None\n\nAn option to either put source notes in separate lines (the default, or True) or render them as a continuous line of text with source_notes_sep providing the separator (by default \" \") between notes.\n\nsource_notes_sep : str | None = None\n\nThe separating characters between adjacent source notes when rendered as a continuous line of text (when source_notes_multiline is False). The default value is a single space character (\" \").\n\nsource_notes_border_bottom_style : str | None = None\n\nThe style of the bottom border of the source_notes location.\n\nsource_notes_border_bottom_width : str | None = None\n\nThe width of the bottom border of the source_notes location. If the width of this border is larger, then it will be the visible border.\n\nsource_notes_border_bottom_color : str | None = None\n\nThe color of the bottom border of the source_notes location.\n\nsource_notes_border_lr_style : str | None = None\n\nThe style of the left and right borders of the source_notes location.\n\nsource_notes_border_lr_width : str | None = None\n\nThe width of the left and right borders of the source_notes location. If the width of this border is larger, then it will be the visible border.\n\nsource_notes_border_lr_color : str | None = None\n\nThe color of the left and right borders of the source_notes location.\n\nrow_striping_background_color : str | None = None\n\nThe background color for striped table body rows. A color name or a hexadecimal color code should be provided.\n\nrow_striping_include_stub : bool | None = None\n\nAn option for whether to include the stub when striping rows.\n\nrow_striping_include_table_body : bool | None = None\n\nAn option for whether to include the table body when striping rows.\n\nquarto_disable_processing : bool | None = None\n\nWhether to disable Quarto table processing."
  },
  {
    "objectID": "reference/GT.tab_options.html#returns",
    "href": "reference/GT.tab_options.html#returns",
    "title": "GT.tab_options",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.tab_options.html#examples",
    "href": "reference/GT.tab_options.html#examples",
    "title": "GT.tab_options",
    "section": "Examples",
    "text": "Examples\nUsing select columns from the exibble dataset, let‚Äôs create a new table with a number of table components added. We can use this object going forward to demonstrate some of the features available in the tab_options() method.\n\nfrom great_tables import GT, exibble, md\n\ngt_tbl = (\n  GT(\n    exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n    rowname_col=\"row\",\n    groupname_col=\"group\"\n  )\n  .tab_header(\n    title=md(\"Data listing from **exibble**\"),\n    subtitle=md(\"`exibble` is a **Great Tables** dataset.\")\n  )\n  .fmt_number(columns=\"num\")\n  .fmt_currency(columns=\"currency\")\n  .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nWe can modify the table width to be set as \"100%‚Äú. In effect, this spans the table to entirely fill the content width area. This is done with the table_width option.\n\ngt_tbl.tab_options(table_width=\"100%\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nWith the table_background_color option, we can modify the table‚Äôs background color. Here, we want that to be \"lightcyan\".\n\ngt_tbl.tab_options(table_background_color=\"lightcyan\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nThe data rows of a table typically take up the most physical space but we have some control over the extent of that. With the data_row_padding option, it‚Äôs possible to modify the top and bottom padding of data rows. We‚Äôll do just that in the following example, reducing the padding to a value of \"3px\".\n\ngt_tbl.tab_options(data_row_padding=\"3px\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nThe size of the title and the subtitle text in the header of the table can be altered with the heading_title_font_size and heading_subtitle_font_size options. Here, we‚Äôll use the \"small\" and \"x-small\" keyword values.\n\ngt_tbl.tab_options(heading_title_font_size=\"small\", heading_subtitle_font_size=\"x-small\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset."
  },
  {
    "objectID": "reference/vals.fmt_scientific.html",
    "href": "reference/vals.fmt_scientific.html",
    "title": "vals.fmt_scientific",
    "section": "",
    "text": "vals.fmt_scientific(\n    x,\n    decimals=2,\n    n_sigfig=None,\n    drop_trailing_zeros=False,\n    drop_trailing_dec_mark=True,\n    scale_by=1,\n    exp_style='x10n',\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign_m=False,\n    force_sign_n=False,\n    locale=None,\n)\nFormat values to scientific notation.\nWith numeric values in a list, we can perform formatting so that the input values are rendered in scientific notation, where extremely large or very small numbers can be expressed in a more practical fashion. Here, numbers are written in the form of a mantissa (m) and an exponent (n) with the construction m x 10^n or mEn. The mantissa component is a number between 1 and 10. For instance, 2.5 x 10^9 can be used to represent the value 2,500,000,000 in scientific notation. In a similar way, 0.00000012 can be expressed as 1.2 x 10^-7. Due to its ability to describe numbers more succinctly and its ease of calculation, scientific notation is widely employed in scientific and technical domains.\nWe have fine control over the formatting task, with the following options:"
  },
  {
    "objectID": "reference/vals.fmt_scientific.html#parameters",
    "href": "reference/vals.fmt_scientific.html#parameters",
    "title": "vals.fmt_scientific",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted.\n\ndecimals : int = 2\n\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True.\n\nn_sigfig : int | None = None\n\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\n\ndrop_trailing_zeros : bool = False\n\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\nscale_by : float = 1\n\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n\nexp_style : str = 'x10n'\n\nStyle of formatting to use for the scientific notation formatting. By default this is \"x10n\" but other options include using a single letter (e.g., \"e\", \"E\", etc.), a letter followed by a \"1\" to signal a minimum digit width of one, or \"low-ten\" for using a stylized \"10\" marker.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign_m : bool = False\n\nShould the plus sign be shown for positive values of the mantissa (first component)? This would effectively show a sign for all values except zero on the first numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\n\nforce_sign_n : bool = False\n\nShould the plus sign be shown for positive values of the exponent (second component)? This would effectively show a sign for all values except zero on the second numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/vals.fmt_scientific.html#returns",
    "href": "reference/vals.fmt_scientific.html#returns",
    "title": "vals.fmt_scientific",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_scientific.html#examples",
    "href": "reference/vals.fmt_scientific.html#examples",
    "title": "vals.fmt_scientific",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\nvals.fmt_scientific([123456, 0.425639], decimals=2)\n\n[\"1.23 √ó 10&lt;sup style='font-size: 65%;'&gt;5&lt;/sup&gt;\",\n \"4.26 √ó 10&lt;sup style='font-size: 65%;'&gt;‚àí1&lt;/sup&gt;\"]"
  },
  {
    "objectID": "reference/vals.fmt_image.html",
    "href": "reference/vals.fmt_image.html",
    "title": "vals.fmt_image",
    "section": "",
    "text": "vals.fmt_image(\n    x,\n    height=None,\n    width=None,\n    sep=' ',\n    path=None,\n    file_pattern='{}',\n    encode=True,\n)\nFormat image paths to generate images in cells.\nTo more easily insert graphics into body cells, we can use the fmt_image() method. This allows for one or more images to be placed in the targeted cells. The cells need to contain some reference to an image file, either: (1) complete http/https or local paths to the files; (2) the file names, where a common path can be provided via path=; or (3) a fragment of the file name, where the file_pattern= argument helps to compose the entire file name and path= provides the path information. This should be expressly used on columns that contain only references to image files (i.e., no image references as part of a larger block of text). Multiple images can be included per cell by separating image references by commas. The sep= argument allows for a common separator to be applied between images.\n\n\n\nx : X\n\nA list of values to be formatted.\n\nheight : str | int | None = None\n\nThe height of the rendered images.\n\nwidth : str | int | None = None\n\nThe width of the rendered images.\n\nsep : str = ' '\n\nIn the output of images within a body cell, sep= provides the separator between each image.\n\npath : str | Path | None = None\n\nAn optional path to local image files or an HTTP/HTTPS URL. This is combined with the filenames to form the complete image paths.\n\nfile_pattern : str = '{}'\n\nThe pattern to use for mapping input values in the body cells to the names of the graphics files. The string supplied should use \"{}\" in the pattern to map filename fragments to input strings.\n\nencode : bool = True\n\nThe option to always use Base64 encoding for image paths that are determined to be local. By default, this is True.\n\n\n\n\n\n\n : list[str]\n\nA list of formatted values is returned.\n\n\n\n\n\nCheck out our blog post, Rendering images anywhere in Great Tables, which walks through how to use vals.fmt_image()."
  },
  {
    "objectID": "reference/vals.fmt_image.html#parameters",
    "href": "reference/vals.fmt_image.html#parameters",
    "title": "vals.fmt_image",
    "section": "",
    "text": "x : X\n\nA list of values to be formatted.\n\nheight : str | int | None = None\n\nThe height of the rendered images.\n\nwidth : str | int | None = None\n\nThe width of the rendered images.\n\nsep : str = ' '\n\nIn the output of images within a body cell, sep= provides the separator between each image.\n\npath : str | Path | None = None\n\nAn optional path to local image files or an HTTP/HTTPS URL. This is combined with the filenames to form the complete image paths.\n\nfile_pattern : str = '{}'\n\nThe pattern to use for mapping input values in the body cells to the names of the graphics files. The string supplied should use \"{}\" in the pattern to map filename fragments to input strings.\n\nencode : bool = True\n\nThe option to always use Base64 encoding for image paths that are determined to be local. By default, this is True."
  },
  {
    "objectID": "reference/vals.fmt_image.html#returns",
    "href": "reference/vals.fmt_image.html#returns",
    "title": "vals.fmt_image",
    "section": "",
    "text": ": list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_image.html#see-also",
    "href": "reference/vals.fmt_image.html#see-also",
    "title": "vals.fmt_image",
    "section": "",
    "text": "Check out our blog post, Rendering images anywhere in Great Tables, which walks through how to use vals.fmt_image()."
  },
  {
    "objectID": "reference/vals.fmt_time.html",
    "href": "reference/vals.fmt_time.html",
    "title": "vals.fmt_time",
    "section": "",
    "text": "vals.fmt_time(x, time_style='iso', pattern='{x}', locale=None)\nFormat values as times.\nFormat input values to time values using one of 5 preset time styles. Input can be in the form of time values, or strings in the ISO 8601 forms of HH:MM:SS or YYYY-MM-DD HH:MM:SS."
  },
  {
    "objectID": "reference/vals.fmt_time.html#parameters",
    "href": "reference/vals.fmt_time.html#parameters",
    "title": "vals.fmt_time",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted.\n\ntime_style : TimeStyle = 'iso'\n\nThe time style to use. By default this is the short name \"iso\" which corresponds to how times are formatted within ISO 8601 datetime values. There are 5 time styles in total and their short names can be viewed using info_time_style().\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/vals.fmt_time.html#formatting-with-the-time_style-argument",
    "href": "reference/vals.fmt_time.html#formatting-with-the-time_style-argument",
    "title": "vals.fmt_time",
    "section": "Formatting with the time_style argument",
    "text": "Formatting with the time_style argument\nWe need to supply a preset time style to the time_style argument. The time styles are numerous and can handle localization to any supported locale. The following table provides a listing of all time styles and their output values (corresponding to an input time of 14:35:00).\n\n\n\n\nTime Style\nOutput\nNotes\n\n\n\n\n1\n\"iso\"\n\"14:35:00\"\nISO 8601, 24h\n\n\n2\n\"iso-short\"\n\"14:35\"\nISO 8601, 24h\n\n\n3\n\"h_m_s_p\"\n\"2:35:00 PM\"\n12h\n\n\n4\n\"h_m_p\"\n\"2:35 PM\"\n12h\n\n\n5\n\"h_p\"\n\"2 PM\"\n12h\n\n\n\nWe can use the info_time_style() function within the console to view a similar table of time styles with example output."
  },
  {
    "objectID": "reference/vals.fmt_time.html#returns",
    "href": "reference/vals.fmt_time.html#returns",
    "title": "vals.fmt_time",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_time.html#examples",
    "href": "reference/vals.fmt_time.html#examples",
    "title": "vals.fmt_time",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\nvals.fmt_time([\"05:32:17\", \"13:01:02\"], time_style=\"h_m_s_p\")\n\n['5:32:17 AM', '1:01:02 PM']"
  },
  {
    "objectID": "reference/style.fill.html",
    "href": "reference/style.fill.html",
    "title": "style.fill",
    "section": "",
    "text": "style.fill(color)\nA style specification for the background fill of targeted cells.\nThe style.fill() class is to be used with the tab_style() method, which itself allows for the setting of custom styles to one or more cells. Specifically, the call to style.fill() should be bound to the styles argument of tab_style().\n\n\n\ncolor : str | ColumnExpr\n\nThe color to use for the cell background fill. This can be any valid CSS color value, such as a hex code, a named color, or an RGB value.\n\n\n\n\n\n\n : CellStyleFill\n\nA CellStyleFill object, which is used for a styles argument if specifying a cell fill value.\n\n\n\n\n\nSee GT.tab_style()."
  },
  {
    "objectID": "reference/style.fill.html#parameters",
    "href": "reference/style.fill.html#parameters",
    "title": "style.fill",
    "section": "",
    "text": "color : str | ColumnExpr\n\nThe color to use for the cell background fill. This can be any valid CSS color value, such as a hex code, a named color, or an RGB value."
  },
  {
    "objectID": "reference/style.fill.html#returns",
    "href": "reference/style.fill.html#returns",
    "title": "style.fill",
    "section": "",
    "text": ": CellStyleFill\n\nA CellStyleFill object, which is used for a styles argument if specifying a cell fill value."
  },
  {
    "objectID": "reference/style.fill.html#examples",
    "href": "reference/style.fill.html#examples",
    "title": "style.fill",
    "section": "",
    "text": "See GT.tab_style()."
  },
  {
    "objectID": "reference/vals.fmt_roman.html",
    "href": "reference/vals.fmt_roman.html",
    "title": "vals.fmt_roman",
    "section": "",
    "text": "vals.fmt_roman(x, case='upper', pattern='{x}')\nFormat values as Roman numerals.\nWith numeric values we can transform those to Roman numerals, rounding values as necessary."
  },
  {
    "objectID": "reference/vals.fmt_roman.html#parameters",
    "href": "reference/vals.fmt_roman.html#parameters",
    "title": "vals.fmt_roman",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted.\n\ncase : str = 'upper'\n\nShould Roman numerals should be rendered as uppercase (\"upper\") or lowercase (\"lower\") letters? By default, this is set to \"upper\".\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals."
  },
  {
    "objectID": "reference/vals.fmt_roman.html#returns",
    "href": "reference/vals.fmt_roman.html#returns",
    "title": "vals.fmt_roman",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_roman.html#examples",
    "href": "reference/vals.fmt_roman.html#examples",
    "title": "vals.fmt_roman",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\nvals.fmt_roman([3, 5])\n\n['III', 'V']"
  },
  {
    "objectID": "reference/loc.row_groups.html",
    "href": "reference/loc.row_groups.html",
    "title": "loc.row_groups",
    "section": "",
    "text": "loc.row_groups(rows=None)\nTarget row groups.\nWith loc.row_groups() we can target the cells containing the row group labels, which span across the table body. This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.row_groups.html#parameters",
    "href": "reference/loc.row_groups.html#parameters",
    "title": "loc.row_groups",
    "section": "Parameters",
    "text": "Parameters\n\nrows : RowSelectExpr = None\n\nThe row groups to target. Can either be a single group name or a series of group names provided in a list. If no groups are specified, all are targeted."
  },
  {
    "objectID": "reference/loc.row_groups.html#returns",
    "href": "reference/loc.row_groups.html#returns",
    "title": "loc.row_groups",
    "section": "Returns",
    "text": "Returns\n\n : LocRowGroups\n\nA LocRowGroups object, which is used for a locations= argument if specifying the table‚Äôs row groups."
  },
  {
    "objectID": "reference/loc.row_groups.html#examples",
    "href": "reference/loc.row_groups.html#examples",
    "title": "loc.row_groups",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. We will style all of the cells comprising the row group labels by using locations=loc.row_groups() within tab_style().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(\n        gtcars[[\"mfr\", \"model\", \"hp\", \"trq\", \"msrp\"]].head(5),\n        rowname_col=\"model\",\n        groupname_col=\"mfr\"\n    )\n    .tab_stubhead(label=\"car\")\n    .tab_style(\n        style=[\n            style.text(color=\"crimson\", weight=\"bold\"),\n            style.fill(color=\"lightgray\")\n        ],\n        locations=loc.row_groups()\n    )\n    .fmt_integer(columns=[\"hp\", \"trq\"])\n    .fmt_currency(columns=\"msrp\", decimals=0)\n)\n\n\n\n\n\n\n\n  car\n  hp\n  trq\n  msrp\n\n\n\n  \n    Ford\n  \n  \n    GT\n    647\n    550\n    $447,000\n  \n  \n    Ferrari\n  \n  \n    458 Speciale\n    597\n    398\n    $291,744\n  \n  \n    458 Spider\n    562\n    398\n    $263,553\n  \n  \n    458 Italia\n    562\n    398\n    $233,509\n  \n  \n    488 GTB\n    661\n    561\n    $245,400"
  },
  {
    "objectID": "reference/data.gibraltar.html",
    "href": "reference/data.gibraltar.html",
    "title": "data.gibraltar",
    "section": "",
    "text": "data.gibraltar\nWeather conditions in Gibraltar, May 2023.\nThe gibraltar dataset has meteorological data for the Gibraltar Airport Station from May 1 to May 31, 2023. Gibraltar is a British Overseas Territory and city located at the southern end of the Iberian Peninsula, on the Bay of Gibraltar. This weather station is located at the airport (GIB), where it‚Äôs at an elevation of 5 meters above mean sea level (AMSL).\n\n\nThis is a dataset with 1,431 rows and 10 columns.\n\ndate, time: The date and time of the observation.\ntemp, dew_point: The air temperature and dew point values, both in degrees Celsius.\nhumidity: The relative humidity as a value between 0 and 1\nwind_dir, wind_speed, wind_gust: Observations related to wind. The wind direction is given as the typical ‚Äòblowing from‚Äô value, simplified to one of 16 compass directions. The wind speed is provided in units of meters per second. If there was a measurable wind gust, the maximum gust speed is recorded as m/s values (otherwise the value is 0).\npressure: The atmospheric pressure in hectopascals (hPa).\ncondition: The weather condition.\n\n\n\n\nRows: 1431\nColumns: 10\n$ date       &lt;str&gt; '2023-05-01', '2023-05-01', '2023-05-01'\n$ time       &lt;str&gt; '00:20', '00:50', '01:20'\n$ temp       &lt;f64&gt; 18.9, 18.9, 17.8\n$ dew_point  &lt;f64&gt; 12.8, 13.9, 13.9\n$ humidity   &lt;f64&gt; 0.68, 0.73, 0.77\n$ wind_dir   &lt;str&gt; 'W', 'WSW', 'W'\n$ wind_speed &lt;f64&gt; 6.7, 7.2, 6.7\n$ wind_gust  &lt;f64&gt; 0.0, 0.0, 0.0\n$ pressure   &lt;f64&gt; 1015.2, 1015.2, 1014.6\n$ condition  &lt;str&gt; 'Fair', 'Fair', 'Fair'"
  },
  {
    "objectID": "reference/data.gibraltar.html#details",
    "href": "reference/data.gibraltar.html#details",
    "title": "data.gibraltar",
    "section": "",
    "text": "This is a dataset with 1,431 rows and 10 columns.\n\ndate, time: The date and time of the observation.\ntemp, dew_point: The air temperature and dew point values, both in degrees Celsius.\nhumidity: The relative humidity as a value between 0 and 1\nwind_dir, wind_speed, wind_gust: Observations related to wind. The wind direction is given as the typical ‚Äòblowing from‚Äô value, simplified to one of 16 compass directions. The wind speed is provided in units of meters per second. If there was a measurable wind gust, the maximum gust speed is recorded as m/s values (otherwise the value is 0).\npressure: The atmospheric pressure in hectopascals (hPa).\ncondition: The weather condition."
  },
  {
    "objectID": "reference/data.gibraltar.html#preview",
    "href": "reference/data.gibraltar.html#preview",
    "title": "data.gibraltar",
    "section": "",
    "text": "Rows: 1431\nColumns: 10\n$ date       &lt;str&gt; '2023-05-01', '2023-05-01', '2023-05-01'\n$ time       &lt;str&gt; '00:20', '00:50', '01:20'\n$ temp       &lt;f64&gt; 18.9, 18.9, 17.8\n$ dew_point  &lt;f64&gt; 12.8, 13.9, 13.9\n$ humidity   &lt;f64&gt; 0.68, 0.73, 0.77\n$ wind_dir   &lt;str&gt; 'W', 'WSW', 'W'\n$ wind_speed &lt;f64&gt; 6.7, 7.2, 6.7\n$ wind_gust  &lt;f64&gt; 0.0, 0.0, 0.0\n$ pressure   &lt;f64&gt; 1015.2, 1015.2, 1014.6\n$ condition  &lt;str&gt; 'Fair', 'Fair', 'Fair'"
  },
  {
    "objectID": "reference/define_units.html",
    "href": "reference/define_units.html",
    "title": "define_units",
    "section": "",
    "text": "define_units(units_notation)\nWith define_units() you can work with a specially-crafted units notation string and emit the units as HTML (with the .to_html() method). This function is useful as a standalone utility and it powers the fmt_units() method in Great Tables."
  },
  {
    "objectID": "reference/define_units.html#parameters",
    "href": "reference/define_units.html#parameters",
    "title": "define_units",
    "section": "Parameters",
    "text": "Parameters\n\nunits_notation : str\n\nA string of units notation."
  },
  {
    "objectID": "reference/define_units.html#returns",
    "href": "reference/define_units.html#returns",
    "title": "define_units",
    "section": "Returns",
    "text": "Returns\n\n : UnitDefinitionList\n\nA list of unit definitions."
  },
  {
    "objectID": "reference/define_units.html#specification-of-units-notation",
    "href": "reference/define_units.html#specification-of-units-notation",
    "title": "define_units",
    "section": "Specification of units notation",
    "text": "Specification of units notation\nThe following table demonstrates the various ways in which units can be specified in the units_notation string and how the input is processed by the define_units() function. The concluding step for display of the units in HTML is to use the to_html() method.\n\n\n\n\n\n\n\n\n  rule\n  input\n  output\n\n\n\n  \n    '^' creates a superscript\n    m^2\n    m2\n  \n  \n    '_' creates a subscript\n    h_0\n    h0\n  \n  \n    subscripts and superscripts can be combined\n    h_0^3\n    h03\n  \n  \n    use '[_subscript^superscript]' to create an overstrike\n    h[_0^3]\n    h30\n  \n  \n    a '/' at the beginning adds the superscript '-1'\n    /s\n    s‚àí1\n  \n  \n    hyphen is transformed to minus sign when preceding a unit\n    -h^2\n    ‚àíh2\n  \n  \n    'x' at the beginning is transformed to '√ó'\n    x10^3 kg^2 m^-1\n    √ó103 kg2 m‚àí1\n  \n  \n    ASCII terms from biology/chemistry turned into terminology forms\n    ug\n    ¬µg\n  \n  \n    can create italics with '*' or '_'; create bold text with '**' or '__'\n    *m*^**2**\n    m2\n  \n  \n    special symbol set surrounded by colons\n    :permille:C\n    ‚Ä∞C\n  \n  \n    chemistry notation: '%C6H6%'\n    g/L %C6H12O6%\n    g/L C6H12O6"
  },
  {
    "objectID": "reference/GT.as_latex.html",
    "href": "reference/GT.as_latex.html",
    "title": "GT.as_latex",
    "section": "",
    "text": "GT.as_latex(self, use_longtable=False, tbl_pos=None)\nOutput a GT object as LaTeX\nThe as_latex() method outputs a GT object as a LaTeX fragment. This method is useful for when you need to include a table as part of a LaTeX document. The LaTeX fragment contains the table as a string."
  },
  {
    "objectID": "reference/GT.as_latex.html#parameters",
    "href": "reference/GT.as_latex.html#parameters",
    "title": "GT.as_latex",
    "section": "Parameters",
    "text": "Parameters\n\nuse_longtable : bool = False\n\nAn option to use the longtable environment in LaTeX output. This is useful for tables that span multiple pages and don‚Äôt require precise positioning.\n\ntbl_pos : str | None = None\n\nThe position of the table in the LaTeX output when use_longtable=False. Valid values for positioning include \"!t\" (top of page), \"!b\" (bottom of the page), \"!h\" (here), \"!p\" (on a separate page), and \"!H\" (exactly here). If a value is not provided then the table will be placed at the top of the page; if in the Quarto render then the table positioning option will be ignored in favor of any setting within the Quarto rendering environment."
  },
  {
    "objectID": "reference/GT.as_latex.html#returns",
    "href": "reference/GT.as_latex.html#returns",
    "title": "GT.as_latex",
    "section": "Returns",
    "text": "Returns\n\n : str\n\nA LaTeX fragment that contains the table."
  },
  {
    "objectID": "reference/GT.as_latex.html#limitations",
    "href": "reference/GT.as_latex.html#limitations",
    "title": "GT.as_latex",
    "section": "Limitations",
    "text": "Limitations\nThe as_latex() method is still experimental and has some limitations. The following functionality that is supported in HTML output tables is not currently supported in LaTeX output tables:\n\nthe rendering of the stub and row group labels (via the =rowname_col and =groupname_col args in the GT() class)\nthe use of the md() helper function to signal conversion of Markdown text\nunits notation within the cols_labels() and tab_spanner() methods\nthe fmt_markdown(), fmt_units(), fmt_image(), and fmt_nanoplot() methods\nthe sub_missing() and sub_zero() methods\nmost options in the tab_options() method, particularly those that are specific to styling text, borders, or adding fill colors to cells\n\nAs development continues, we will work to expand the capabilities of the as_latex() method to reduce these limitations and more clearly document what is and is not supported."
  },
  {
    "objectID": "reference/GT.as_latex.html#examples",
    "href": "reference/GT.as_latex.html#examples",
    "title": "GT.as_latex",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset to create a new table.\n\nfrom great_tables import GT\nfrom great_tables.data import gtcars\nimport polars as pl\n\ngtcars_mini = (\n    pl.from_pandas(gtcars)\n    .select([\"mfr\", \"model\", \"msrp\"])\n    .head(5)\n)\n\ngt_tbl = (\n    GT(gtcars_mini)\n    .tab_header(\n        title=\"Data Listing from the gtcars Dataset\",\n        subtitle=\"Only five rows from the dataset are shown here.\"\n    )\n    .fmt_currency(columns=\"msrp\")\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Data Listing from the gtcars Dataset\n  \n  \n    Only five rows from the dataset are shown here.\n  \n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    $447,000.00\n  \n  \n    Ferrari\n    458 Speciale\n    $291,744.00\n  \n  \n    Ferrari\n    458 Spider\n    $263,553.00\n  \n  \n    Ferrari\n    458 Italia\n    $233,509.00\n  \n  \n    Ferrari\n    488 GTB\n    $245,400.00\n  \n\n\n\n\n\n\n        \n\n\nNow we can return the table as string of LaTeX code using the as_latex() method.\n\ngt_tbl.as_latex()\n\n'\\\\begin{table}\\n\\\\caption*{\\n{\\\\large Data Listing from the gtcars Dataset} \\\\\\\\\\n{\\\\small Only five rows from the dataset are shown here.}\\n} \\n\\n\\\\fontsize{12.0pt}{14.4pt}\\\\selectfont\\n\\n\\\\begin{tabular*}{\\\\linewidth}{@{\\\\extracolsep{\\\\fill}}llr}\\n\\\\toprule\\nmfr & model & msrp \\\\\\\\ \\n\\\\midrule\\\\addlinespace[2.5pt]\\nFord & GT & \\\\$447,000.00 \\\\\\\\\\nFerrari & 458 Speciale & \\\\$291,744.00 \\\\\\\\\\nFerrari & 458 Spider & \\\\$263,553.00 \\\\\\\\\\nFerrari & 458 Italia & \\\\$233,509.00 \\\\\\\\\\nFerrari & 488 GTB & \\\\$245,400.00 \\\\\\\\\\n\\\\bottomrule\\n\\\\end{tabular*}\\n\\n\\\\end{table}\\n'\n\n\nThe LaTeX string contains the code just for the table (it‚Äôs not a complete LaTeX document). This output can be useful for embedding a GT table in an existing LaTeX document."
  },
  {
    "objectID": "reference/style.text.html",
    "href": "reference/style.text.html",
    "title": "style.text",
    "section": "",
    "text": "style.text(\n    color=None,\n    font=None,\n    size=None,\n    align=None,\n    v_align=None,\n    style=None,\n    weight=None,\n    stretch=None,\n    decorate=None,\n    transform=None,\n    whitespace=None,\n)\nA style specification for cell text.\nThe style.text() class is to be used with the tab_style() method, which itself allows for the setting of custom styles to one or more cells. With it, you can specify the color of the text, the font family, the font size, and the horizontal and vertical alignment of the text and more.\n\n\n\ncolor : str | ColumnExpr | None = None\n\nThe text color can be modified through the color argument.\n\nfont : str | ColumnExpr | GoogleFont | None = None\n\nThe font or collection of fonts (subsequent font names are) used as fallbacks.\n\nsize : str | ColumnExpr | None = None\n\nThe size of the font. Can be provided as a number that is assumed to represent px values (or could be wrapped in the px() helper function). We can also use one of the following absolute size keywords: \"xx-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", or \"xx-large\".\n\nalign : Literal['center', 'left', 'right', 'justify'] | ColumnExpr | None = None\n\nThe text in a cell can be horizontally aligned though one of the following options: \"center\", \"left\", \"right\", or \"justify\".\n\nv_align : Literal['middle', 'top', 'bottom'] | ColumnExpr | None = None\n\nThe vertical alignment of the text in the cell can be modified through the options \"middle\", \"top\", or \"bottom\".\n\nstyle : Literal['normal', 'italic', 'oblique'] | ColumnExpr | None = None\n\nCan be one of either \"normal\", \"italic\", or \"oblique\".\n\nweight : Literal['normal', 'bold', 'bolder', 'lighter'] | ColumnExpr | None = None\n\nThe weight of the font can be modified thorough a text-based option such as \"normal\", \"bold\", \"lighter\", \"bolder\", or, a numeric value between 1 and 1000, inclusive. Note that only variable fonts may support the numeric mapping of weight.\n\nstretch : Literal['normal', 'condensed', 'ultra-condensed', 'extra-condensed', 'semi-condensed', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'] | ColumnExpr | None = None\n\nAllows for text to either be condensed or expanded. We can use one of the following text-based keywords to describe the degree of condensation/expansion: \"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"normal\", \"semi-expanded\", \"expanded\", \"extra-expanded\", or \"ultra-expanded\". Alternatively, we can supply percentage values from 0% to 200%, inclusive. Negative percentage values are not allowed.\n\ndecorate : Literal['overline', 'line-through', 'underline', 'underline overline'] | ColumnExpr | None = None\n\nAllows for text decoration effect to be applied. Here, we can use \"overline\", \"line-through\", or \"underline\".\n\ntransform : Literal['uppercase', 'lowercase', 'capitalize'] | ColumnExpr | None = None\n\nAllows for the transformation of text. Options are \"uppercase\", \"lowercase\", or \"capitalize\".\n\nwhitespace : Literal['normal', 'nowrap', 'pre', 'pre-wrap', 'pre-line', 'break-spaces'] | ColumnExpr | None = None\n\nA white-space preservation option. By default, runs of white-space will be collapsed into single spaces but several options exist to govern how white-space is collapsed and how lines might wrap at soft-wrap opportunities. The options are \"normal\", \"nowrap\", \"pre\", \"pre-wrap\", \"pre-line\", and \"break-spaces\".\n\n\n\n\n\n\n : CellStyleText\n\nA CellStyleText object, which is used for a styles argument if specifying any cell text properties.\n\n\n\n\n\nSee GT.tab_style()."
  },
  {
    "objectID": "reference/style.text.html#parameters",
    "href": "reference/style.text.html#parameters",
    "title": "style.text",
    "section": "",
    "text": "color : str | ColumnExpr | None = None\n\nThe text color can be modified through the color argument.\n\nfont : str | ColumnExpr | GoogleFont | None = None\n\nThe font or collection of fonts (subsequent font names are) used as fallbacks.\n\nsize : str | ColumnExpr | None = None\n\nThe size of the font. Can be provided as a number that is assumed to represent px values (or could be wrapped in the px() helper function). We can also use one of the following absolute size keywords: \"xx-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", or \"xx-large\".\n\nalign : Literal['center', 'left', 'right', 'justify'] | ColumnExpr | None = None\n\nThe text in a cell can be horizontally aligned though one of the following options: \"center\", \"left\", \"right\", or \"justify\".\n\nv_align : Literal['middle', 'top', 'bottom'] | ColumnExpr | None = None\n\nThe vertical alignment of the text in the cell can be modified through the options \"middle\", \"top\", or \"bottom\".\n\nstyle : Literal['normal', 'italic', 'oblique'] | ColumnExpr | None = None\n\nCan be one of either \"normal\", \"italic\", or \"oblique\".\n\nweight : Literal['normal', 'bold', 'bolder', 'lighter'] | ColumnExpr | None = None\n\nThe weight of the font can be modified thorough a text-based option such as \"normal\", \"bold\", \"lighter\", \"bolder\", or, a numeric value between 1 and 1000, inclusive. Note that only variable fonts may support the numeric mapping of weight.\n\nstretch : Literal['normal', 'condensed', 'ultra-condensed', 'extra-condensed', 'semi-condensed', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'] | ColumnExpr | None = None\n\nAllows for text to either be condensed or expanded. We can use one of the following text-based keywords to describe the degree of condensation/expansion: \"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"normal\", \"semi-expanded\", \"expanded\", \"extra-expanded\", or \"ultra-expanded\". Alternatively, we can supply percentage values from 0% to 200%, inclusive. Negative percentage values are not allowed.\n\ndecorate : Literal['overline', 'line-through', 'underline', 'underline overline'] | ColumnExpr | None = None\n\nAllows for text decoration effect to be applied. Here, we can use \"overline\", \"line-through\", or \"underline\".\n\ntransform : Literal['uppercase', 'lowercase', 'capitalize'] | ColumnExpr | None = None\n\nAllows for the transformation of text. Options are \"uppercase\", \"lowercase\", or \"capitalize\".\n\nwhitespace : Literal['normal', 'nowrap', 'pre', 'pre-wrap', 'pre-line', 'break-spaces'] | ColumnExpr | None = None\n\nA white-space preservation option. By default, runs of white-space will be collapsed into single spaces but several options exist to govern how white-space is collapsed and how lines might wrap at soft-wrap opportunities. The options are \"normal\", \"nowrap\", \"pre\", \"pre-wrap\", \"pre-line\", and \"break-spaces\"."
  },
  {
    "objectID": "reference/style.text.html#returns",
    "href": "reference/style.text.html#returns",
    "title": "style.text",
    "section": "",
    "text": ": CellStyleText\n\nA CellStyleText object, which is used for a styles argument if specifying any cell text properties."
  },
  {
    "objectID": "reference/style.text.html#examples",
    "href": "reference/style.text.html#examples",
    "title": "style.text",
    "section": "",
    "text": "See GT.tab_style()."
  },
  {
    "objectID": "reference/GT.opt_all_caps.html",
    "href": "reference/GT.opt_all_caps.html",
    "title": "GT.opt_all_caps",
    "section": "",
    "text": "GT.opt_all_caps(\n    self,\n    all_caps=True,\n    locations=['column_labels', 'stub', 'row_group'],\n)\nOption to use all caps in select table locations.\nSometimes an all-capitalized look is suitable for a table. By using opt_all_caps(), we can transform characters in the column labels, the stub, and in all row groups in this way (and there‚Äôs control over which of these locations are transformed). This method serves as a convenient shortcut for tab_options(&lt;location&gt;_text_transform=\"uppercase\", &lt;location&gt;_font_size=\"80%\", &lt;location&gt;_font_weight=\"bolder\") (for all locations selected)."
  },
  {
    "objectID": "reference/GT.opt_all_caps.html#parameters",
    "href": "reference/GT.opt_all_caps.html#parameters",
    "title": "GT.opt_all_caps",
    "section": "Parameters",
    "text": "Parameters\n\nall_caps : bool = True\n\nIndicates whether the text transformation to all caps should be performed (True, the default) or reset to default values (False) for the locations targeted.\n\nlocations : str | list[str] = ['column_labels', 'stub', 'row_group']\n\nWhich locations should undergo this text transformation? By default it includes all of the \"column_labels\", the \"stub\", and the \"row_group\" locations. However, we could just choose one or two of those."
  },
  {
    "objectID": "reference/GT.opt_all_caps.html#returns",
    "href": "reference/GT.opt_all_caps.html#returns",
    "title": "GT.opt_all_caps",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.opt_all_caps.html#examples",
    "href": "reference/GT.opt_all_caps.html#examples",
    "title": "GT.opt_all_caps",
    "section": "Examples",
    "text": "Examples\nUsing select columns from the exibble dataset, let‚Äôs create a table with a number of components added. Following that, we‚Äôll ensure that all text in the column labels, the stub, and in all row groups is transformed to all caps using the opt_all_caps() method.\n\nfrom great_tables import GT, exibble, md\n\n(\n  GT(\n    exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n    rowname_col=\"row\",\n    groupname_col=\"group\"\n  )\n  .tab_header(\n    title=md(\"Data listing from **exibble**\"),\n    subtitle=md(\"`exibble` is a **Great Tables** dataset.\")\n  )\n  .fmt_number(columns=\"num\")\n  .fmt_currency(columns=\"currency\")\n  .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n  .opt_all_caps()\n)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset."
  },
  {
    "objectID": "reference/data.sp500.html",
    "href": "reference/data.sp500.html",
    "title": "data.sp500",
    "section": "",
    "text": "data.sp500\nDaily S&P 500 Index data from 1950 to 2015.\nThis dataset provides daily price indicators for the S&P 500 index from the beginning of 1950 to the end of 2015. The index includes 500 leading companies and captures about 80 percent coverage of available market capitalization.\n\n\nThis is a dataset with 16,607 rows and 7 columns.\n\ndate: The date expressed as Date values.\nopen, high, low, close: The day‚Äôs opening, high, low, and closing prices in USD. The close price is adjusted for splits.\nvolume: The number of trades for the given date.\nadj_close: The close price adjusted for both dividends and splits.\n\n\n\n\nRows: 16607\nColumns: 7\n$ date      &lt;str&gt; '2015-12-31', '2015-12-30', '2015-12-29'\n$ open      &lt;f64&gt; 2060.5901, 2077.3401, 2060.54\n$ high      &lt;f64&gt; 2062.54, 2077.3401, 2081.5601\n$ low       &lt;f64&gt; 2043.62, 2061.97, 2060.54\n$ close     &lt;f64&gt; 2043.9399, 2063.3601, 2078.3601\n$ volume    &lt;f64&gt; 2655330000.0, 2367430000.0, 2542000000.0\n$ adj_close &lt;f64&gt; 2043.9399, 2063.3601, 2078.3601"
  },
  {
    "objectID": "reference/data.sp500.html#details",
    "href": "reference/data.sp500.html#details",
    "title": "data.sp500",
    "section": "",
    "text": "This is a dataset with 16,607 rows and 7 columns.\n\ndate: The date expressed as Date values.\nopen, high, low, close: The day‚Äôs opening, high, low, and closing prices in USD. The close price is adjusted for splits.\nvolume: The number of trades for the given date.\nadj_close: The close price adjusted for both dividends and splits."
  },
  {
    "objectID": "reference/data.sp500.html#preview",
    "href": "reference/data.sp500.html#preview",
    "title": "data.sp500",
    "section": "",
    "text": "Rows: 16607\nColumns: 7\n$ date      &lt;str&gt; '2015-12-31', '2015-12-30', '2015-12-29'\n$ open      &lt;f64&gt; 2060.5901, 2077.3401, 2060.54\n$ high      &lt;f64&gt; 2062.54, 2077.3401, 2081.5601\n$ low       &lt;f64&gt; 2043.62, 2061.97, 2060.54\n$ close     &lt;f64&gt; 2043.9399, 2063.3601, 2078.3601\n$ volume    &lt;f64&gt; 2655330000.0, 2367430000.0, 2542000000.0\n$ adj_close &lt;f64&gt; 2043.9399, 2063.3601, 2078.3601"
  },
  {
    "objectID": "reference/GT.opt_stylize.html",
    "href": "reference/GT.opt_stylize.html",
    "title": "GT.opt_stylize",
    "section": "",
    "text": "GT.opt_stylize(self, style=1, color='blue', add_row_striping=True)\nStylize your table with a colorful look.\nWith the opt_stylize() method you can quickly style your table with a carefully curated set of background colors, line colors, and line styles. There are six styles to choose from and they largely vary in the extent of coloring applied to different table locations. Some have table borders applied, some apply darker colors to the table stub and summary sections, and, some even have vertical lines. In addition to choosing a style preset, there are six color variations that each use a range of five color tints. Each of the color tints have been fine-tuned to maximize the contrast between text and its background. There are 36 combinations of style and color to choose from. For examples of each style, see the Premade Themes section of the Get Started guide."
  },
  {
    "objectID": "reference/GT.opt_stylize.html#parameters",
    "href": "reference/GT.opt_stylize.html#parameters",
    "title": "GT.opt_stylize",
    "section": "Parameters",
    "text": "Parameters\n\nstyle : int = 1\n\nSix numbered styles are available. Simply provide a number from 1 (the default) to 6 to choose a distinct look.\n\ncolor : str = 'blue'\n\nThe color scheme of the table. The default value is \"blue\". The valid values are \"blue\", \"cyan\", \"pink\", \"green\", \"red\", and \"gray\".\n\nadd_row_striping : bool = True\n\nAn option to enable row striping in the table body for the style chosen."
  },
  {
    "objectID": "reference/GT.opt_stylize.html#returns",
    "href": "reference/GT.opt_stylize.html#returns",
    "title": "GT.opt_stylize",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.opt_stylize.html#examples",
    "href": "reference/GT.opt_stylize.html#examples",
    "title": "GT.opt_stylize",
    "section": "Examples",
    "text": "Examples\nUsing select columns from the exibble dataset, let‚Äôs create a table with a number of components added. Following that, we‚Äôll apply a predefined style to the table using the opt_stylize() method.\n\nfrom great_tables import GT, exibble, md\n\ngt_tbl = (\n      GT(\n        exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n        rowname_col=\"row\",\n        groupname_col=\"group\"\n      )\n      .tab_header(\n        title=md(\"Data listing from **exibble**\"),\n        subtitle=md(\"`exibble` is a **Great Tables** dataset.\")\n      )\n      .fmt_number(columns=\"num\")\n      .fmt_currency(columns=\"currency\")\n      .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n      .opt_stylize()\n    )\n\ngt_tbl\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nThe table has been stylized with the default style and color. The default style is 1 and the default color is \"blue\". The resulting table style is a combination of color and border settings that are applied to the table.\nWe can modify the overall style and choose a different color theme by providing different values to the style= and color= arguments.\n\ngt_tbl.opt_stylize(style=2, color=\"green\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset."
  },
  {
    "objectID": "reference/GT.opt_vertical_padding.html",
    "href": "reference/GT.opt_vertical_padding.html",
    "title": "GT.opt_vertical_padding",
    "section": "",
    "text": "GT.opt_vertical_padding(self, scale=1.0)\nOption to scale the vertical padding of the table.\nThis method allows us to scale the vertical padding of the table by a factor of scale. The default value is 1.0 and this method serves as a convenient shortcut for gt.tab_options(heading_padding=&lt;new_val&gt;, column_labels_padding=&lt;new_val&gt;, data_row_padding=&lt;new_val&gt;, row_group_padding=&lt;new_val&gt;, source_notes_padding=&lt;new_val&gt;)."
  },
  {
    "objectID": "reference/GT.opt_vertical_padding.html#parameters",
    "href": "reference/GT.opt_vertical_padding.html#parameters",
    "title": "GT.opt_vertical_padding",
    "section": "Parameters",
    "text": "Parameters\n\nscale : float = 1.0\n\nThe factor by which to scale the vertical padding. The default value is 1.0. A value less than 1.0 will reduce the padding, and a value greater than 1.0 will increase the padding. The value must be between 0 and 3."
  },
  {
    "objectID": "reference/GT.opt_vertical_padding.html#returns",
    "href": "reference/GT.opt_vertical_padding.html#returns",
    "title": "GT.opt_vertical_padding",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.opt_vertical_padding.html#examples",
    "href": "reference/GT.opt_vertical_padding.html#examples",
    "title": "GT.opt_vertical_padding",
    "section": "Examples",
    "text": "Examples\nUsing select columns from the exibble dataset, let‚Äôs create a table with a number of components added. Following that, we‚Äôll scale the vertical padding of the table by a factor of 3 using the opt_vertical_padding() method.\n\nfrom great_tables import GT, exibble, md\n\ngt_tbl = (\n    GT(\n        exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n        rowname_col=\"row\",\n        groupname_col=\"group\"\n    )\n    .tab_header(\n        title=md(\"Data listing from **exibble**\"),\n        subtitle=md(\"`exibble` is a **Great Tables** dataset.\")\n    )\n    .fmt_number(columns=\"num\")\n    .fmt_currency(columns=\"currency\")\n    .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n)\n\ngt_tbl.opt_vertical_padding(scale=3)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nNow that‚Äôs a tall table! The overall effect of scaling the vertical padding is that the table will appear taller and there will be more buffer space between the table elements. A value of 3 is pretty extreme and is likely to be too much in most cases, so, feel free to experiment with different values when looking to increase the vertical padding.\nLet‚Äôs go the other way (using a value less than 1) and try to condense the content vertically with a scale factor of 0.5. This will reduce the top and bottom padding globally and make the table appear more compact.\n\ngt_tbl.opt_vertical_padding(scale=0.5)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nA value of 0.5 provides a reasonable amount of vertical padding and the table will appear more compact. This is useful when space is limited and, in such a situation, this is a practical solution to that problem."
  },
  {
    "objectID": "reference/GT.tab_stub.html",
    "href": "reference/GT.tab_stub.html",
    "title": "GT.tab_stub",
    "section": "",
    "text": "GT.tab_stub(self, rowname_col=None, groupname_col=None)\nAdd a table stub, to emphasize row and group information."
  },
  {
    "objectID": "reference/GT.tab_stub.html#parameters",
    "href": "reference/GT.tab_stub.html#parameters",
    "title": "GT.tab_stub",
    "section": "Parameters",
    "text": "Parameters\n\nrowname_col : str | None = None\n\nThe column to use for row names. By default, no row names added.\n\ngroupname_col : str | None = None\n\nThe column to use for group names. By default no group names added."
  },
  {
    "objectID": "reference/GT.tab_stub.html#returns",
    "href": "reference/GT.tab_stub.html#returns",
    "title": "GT.tab_stub",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.tab_stub.html#examples",
    "href": "reference/GT.tab_stub.html#examples",
    "title": "GT.tab_stub",
    "section": "Examples",
    "text": "Examples\nBy default, all data is together in the body of the table.\n\nfrom great_tables import GT, exibble\n\nGT(exibble)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nThe table stub separates row names with a vertical line, and puts group names on their own line.\n\nGT(exibble).tab_stub(rowname_col=\"row\", groupname_col=\"group\")\n\n\n\n\n\n\n\n  \n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n  \n    row_6\n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n  \n  \n    row_7\n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n  \n  \n    row_8\n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44"
  },
  {
    "objectID": "reference/md.html",
    "href": "reference/md.html",
    "title": "md",
    "section": "",
    "text": "md(text)\nInterpret input text as Markdown-formatted text.\nMarkdown can be used in certain places (e.g., source notes, table title/subtitle, etc.) and we can expect it to render to HTML. There is also the html() helper function that allows you to use raw HTML text.\n\n\n\ntext : str\n\nThe text that is understood to contain Markdown formatting.\n\n\n\n\n\nSee GT.tab_header()."
  },
  {
    "objectID": "reference/md.html#parameters",
    "href": "reference/md.html#parameters",
    "title": "md",
    "section": "",
    "text": "text : str\n\nThe text that is understood to contain Markdown formatting."
  },
  {
    "objectID": "reference/md.html#examples",
    "href": "reference/md.html#examples",
    "title": "md",
    "section": "",
    "text": "See GT.tab_header()."
  },
  {
    "objectID": "reference/GT.with_id.html",
    "href": "reference/GT.with_id.html",
    "title": "GT.with_id",
    "section": "",
    "text": "GT.with_id(self, id=None)\nSet the id for this table.\nNote that this is a shortcut for the table_id= argument in GT.tab_options()."
  },
  {
    "objectID": "reference/GT.with_id.html#parameters",
    "href": "reference/GT.with_id.html#parameters",
    "title": "GT.with_id",
    "section": "Parameters",
    "text": "Parameters\n\nid : str | None = None\n\nBy default (with None) the table ID will be a random, ten-letter string as generated through internal use of the random_id() function. A custom table ID can be used here by providing a string."
  },
  {
    "objectID": "reference/GT.with_id.html#returns",
    "href": "reference/GT.with_id.html#returns",
    "title": "GT.with_id",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.with_id.html#examples",
    "href": "reference/GT.with_id.html#examples",
    "title": "GT.with_id",
    "section": "Examples",
    "text": "Examples\nThe use of with_id is straightforward‚Äîsimply pass a string to id= to set the table ID:\n\nfrom great_tables import GT, exibble\n\nGT(exibble).with_id(\"your-table-id\")\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b"
  },
  {
    "objectID": "reference/nanoplot_options.html",
    "href": "reference/nanoplot_options.html",
    "title": "nanoplot_options",
    "section": "",
    "text": "nanoplot_options(\n    data_point_radius=None,\n    data_point_stroke_color=None,\n    data_point_stroke_width=None,\n    data_point_fill_color=None,\n    data_line_type=None,\n    data_line_stroke_color=None,\n    data_line_stroke_width=None,\n    data_area_fill_color=None,\n    data_bar_stroke_color=None,\n    data_bar_stroke_width=None,\n    data_bar_fill_color=None,\n    data_bar_negative_stroke_color=None,\n    data_bar_negative_stroke_width=None,\n    data_bar_negative_fill_color=None,\n    reference_line_color=None,\n    reference_area_fill_color=None,\n    vertical_guide_stroke_color=None,\n    vertical_guide_stroke_width=None,\n    show_data_points=None,\n    show_data_line=None,\n    show_data_area=None,\n    show_reference_line=None,\n    show_reference_area=None,\n    show_vertical_guides=None,\n    show_y_axis_guide=None,\n    interactive_data_values=None,\n    y_val_fmt_fn=None,\n    y_axis_fmt_fn=None,\n    y_ref_line_fmt_fn=None,\n    currency=None,\n)\nHelper for setting the options for a nanoplot.\nWhen using cols_nanoplot(), the defaults for the generated nanoplots can be modified with nanoplot_options() within the options= argument.\n\n\n\ndata_point_radius : int | list[int] | None = None\n\nThe data_point_radius= option lets you set the radius for each of the data points. By default this is set to 10. Individual radius values can be set by using a list of numeric values; however, the list provided must match the number of data points.\n\ndata_point_stroke_color : str | list[str] | None = None\n\nThe default stroke color of the data points is \"#FFFFFF\" (\"white\"). This works well when there is a visible data line combined with data points with a darker fill color. The stroke color can be modified with data_point_stroke_color= for all data points by supplying a single color value. With a list of colors, each data point‚Äôs stroke color can be changed (ensure that the list length matches the number of data points).\n\ndata_point_stroke_width : int | list[int] | None = None\n\nThe width of the outside stroke for the data points can be modified with the data_point_stroke_width= option. By default, a value of 4 (as in ‚Äò4px‚Äô) is used.\n\ndata_point_fill_color : str | list[str] | None = None\n\nBy default, all data points have a fill color of \"#FF0000\" (\"red\"). This can be changed for all data points by providing a different color to data_point_fill_color=. And, a list of different colors can be supplied so long as the length is equal to the number of data points; the fill color values will be applied in order of left to right.\n\ndata_line_type : str | None = None\n\nThis can accept either \"curved\" or \"straight\". Curved lines are recommended when the nanoplot has less than 30 points and data points are evenly spaced. In most other cases, straight lines might present better.\n\ndata_line_stroke_color : str | None = None\n\nThe color of the data line can be modified from its default \"#4682B4\" (\"steelblue\") color by supplying a color to the data_line_stroke_color= option.\n\ndata_line_stroke_width : int | None = None\n\nThe width of the connecting data line can be modified with data_line_stroke_width=. By default, a value of 4 (as in ‚Äò4px‚Äô) is used.\n\ndata_area_fill_color : str | None = None\n\nThe fill color for the area that bounds the data points in line plot. The default is \"#FF0000\" (\"red\") but can be changed by providing a color value to data_area_fill_color=.\n\ndata_bar_stroke_color : str | list[str] | None = None\n\nThe color of the stroke used for the data bars can be modified from its default \"#3290CC\" color by supplying a color to data_bar_stroke_color=.\n\ndata_bar_stroke_width : int | list[int] | None = None\n\nThe width of the stroke used for the data bars can be modified with the data_bar_stroke_width= option. By default, a value of 4 (as in ‚Äò4px‚Äô) is used.\n\ndata_bar_fill_color : str | list[str] | None = None\n\nBy default, all data bars have a fill color of \"#3FB5FF\". This can be changed for all data bars by providing a different color to data_bar_fill_color=. And, a list of different colors can be supplied so long as the length is equal to the number of data bars; the fill color values will be applied in order of left to right.\n\ndata_bar_negative_stroke_color : str | None = None\n\nThe color of the stroke used for the data bars that have negative values. The default color is \"#CC3243\" but this can be changed by supplying a color value to the data_bar_negative_stroke_color= option.\n\ndata_bar_negative_stroke_width : int | None = None\n\nThe width of the stroke used for negative value data bars. This has the same default as data_bar_stroke_width= with a value of 4 (as in ‚Äò4px‚Äô). This can be changed by giving a numeric value to the data_bar_negative_stroke_width= option.\n\ndata_bar_negative_fill_color : str | None = None\n\nBy default, all negative data bars have a fill color of \"#D75A68\". This can however be changed by providing a color value to data_bar_negative_fill_color=.\n\nreference_line_color : str | None = None\n\nThe reference line will have a color of \"#75A8B0\" if it is set to appear. This color can be changed by providing a single color value to reference_line_color=.\n\nreference_area_fill_color : str | None = None\n\nIf a reference area has been defined and is visible it has by default a fill color of \"#A6E6F2\". This can be modified by declaring a color value in the reference_area_fill_color= option.\n\nvertical_guide_stroke_color : str | None = None\n\nVertical guides appear when hovering in the vicinity of data points. Their default color is \"#911EB4\" (a strong magenta color) and a fill opacity value of 0.4 is automatically applied to this. However, the base color can be changed with the vertical_guide_stroke_color= option.\n\nvertical_guide_stroke_width : int | None = None\n\nThe vertical guide‚Äôs stroke width, by default, is relatively large at 12 (this is ‚Äò12px‚Äô). This is modifiable by setting a different value with vertical_guide_stroke_width=.\n\nshow_data_points : bool | None = None\n\nBy default, all data points in a nanoplot are shown but this layer can be hidden by setting show_data_points= to False.\n\nshow_data_line : bool | None = None\n\nThe data line connects data points together and it is shown by default. This data line layer can be hidden by setting show_data_line= to False.\n\nshow_data_area : bool | None = None\n\nThe data area layer is adjacent to the data points and the data line. It is shown by default but can be hidden with show_data_area=False.\n\nshow_reference_line : bool | None = None\n\nThe layer with a horizontal reference line appears underneath that of the data points and the data line. Like vertical guides, hovering over a reference will show its value. The reference line (if available) is shown by default but can be hidden by setting show_reference_line= to False.\n\nshow_reference_area : bool | None = None\n\nThe reference area appears at the very bottom of the layer stack, if it is available (i.e., defined in cols_nanoplot()). It will be shown in the default case but can be hidden by using show_reference_area=False.\n\nshow_vertical_guides : bool | None = None\n\nVertical guides appear when hovering over data points. This hidden layer is active by default but can be deactivated by using show_vertical_guides=False.\n\nshow_y_axis_guide : bool | None = None\n\nThe y-axis guide will appear when hovering over the far left side of a nanoplot. This hidden layer is active by default but can be deactivated by using show_y_axis_guide=False.\n\ninteractive_data_values : bool | None = None\n\nBy default, numeric data values will be shown only when the user interacts with certain regions of a nanoplot. This is because the values may be numerous (i.e., clutter the display when all are visible) and it can be argued that the values themselves are secondary to the presentation. However, for some types of plots (like horizontal bar plots), a persistent display of values alongside the plot marks may be desirable. By setting interactive_data_values=False we can opt for always displaying the data values alongside the plot components.\n\ny_val_fmt_fn : Callable[‚Ä¶, str] | None = None\n\nIf providing a function to y_val_fmt_fn=, customized formatting of the y values associated with the data points/bars is possible.\n\ny_axis_fmt_fn : Callable[‚Ä¶, str] | None = None\n\nA function supplied to y_axis_fmt_fn= will result in customized formatting of the y-axis label values.\n\ny_ref_line_fmt_fn : Callable[‚Ä¶, str] | None = None\n\nProviding a function for y_ref_line_fmt_fn= yields customized formatting of the reference line (if present).\n\ncurrency : str | None = None\n\nIf the values are to be displayed as currency values, supply either: (1) a 3-letter currency code (e.g., \"USD\" for U.S. Dollars, \"EUR\" for the Euro currency), or (2) a common currency name (e.g., \"dollar\", \"pound\", \"yen\", etc.).\n\n\n\n\n\nSee fmt_nanoplot()."
  },
  {
    "objectID": "reference/nanoplot_options.html#parameters",
    "href": "reference/nanoplot_options.html#parameters",
    "title": "nanoplot_options",
    "section": "",
    "text": "data_point_radius : int | list[int] | None = None\n\nThe data_point_radius= option lets you set the radius for each of the data points. By default this is set to 10. Individual radius values can be set by using a list of numeric values; however, the list provided must match the number of data points.\n\ndata_point_stroke_color : str | list[str] | None = None\n\nThe default stroke color of the data points is \"#FFFFFF\" (\"white\"). This works well when there is a visible data line combined with data points with a darker fill color. The stroke color can be modified with data_point_stroke_color= for all data points by supplying a single color value. With a list of colors, each data point‚Äôs stroke color can be changed (ensure that the list length matches the number of data points).\n\ndata_point_stroke_width : int | list[int] | None = None\n\nThe width of the outside stroke for the data points can be modified with the data_point_stroke_width= option. By default, a value of 4 (as in ‚Äò4px‚Äô) is used.\n\ndata_point_fill_color : str | list[str] | None = None\n\nBy default, all data points have a fill color of \"#FF0000\" (\"red\"). This can be changed for all data points by providing a different color to data_point_fill_color=. And, a list of different colors can be supplied so long as the length is equal to the number of data points; the fill color values will be applied in order of left to right.\n\ndata_line_type : str | None = None\n\nThis can accept either \"curved\" or \"straight\". Curved lines are recommended when the nanoplot has less than 30 points and data points are evenly spaced. In most other cases, straight lines might present better.\n\ndata_line_stroke_color : str | None = None\n\nThe color of the data line can be modified from its default \"#4682B4\" (\"steelblue\") color by supplying a color to the data_line_stroke_color= option.\n\ndata_line_stroke_width : int | None = None\n\nThe width of the connecting data line can be modified with data_line_stroke_width=. By default, a value of 4 (as in ‚Äò4px‚Äô) is used.\n\ndata_area_fill_color : str | None = None\n\nThe fill color for the area that bounds the data points in line plot. The default is \"#FF0000\" (\"red\") but can be changed by providing a color value to data_area_fill_color=.\n\ndata_bar_stroke_color : str | list[str] | None = None\n\nThe color of the stroke used for the data bars can be modified from its default \"#3290CC\" color by supplying a color to data_bar_stroke_color=.\n\ndata_bar_stroke_width : int | list[int] | None = None\n\nThe width of the stroke used for the data bars can be modified with the data_bar_stroke_width= option. By default, a value of 4 (as in ‚Äò4px‚Äô) is used.\n\ndata_bar_fill_color : str | list[str] | None = None\n\nBy default, all data bars have a fill color of \"#3FB5FF\". This can be changed for all data bars by providing a different color to data_bar_fill_color=. And, a list of different colors can be supplied so long as the length is equal to the number of data bars; the fill color values will be applied in order of left to right.\n\ndata_bar_negative_stroke_color : str | None = None\n\nThe color of the stroke used for the data bars that have negative values. The default color is \"#CC3243\" but this can be changed by supplying a color value to the data_bar_negative_stroke_color= option.\n\ndata_bar_negative_stroke_width : int | None = None\n\nThe width of the stroke used for negative value data bars. This has the same default as data_bar_stroke_width= with a value of 4 (as in ‚Äò4px‚Äô). This can be changed by giving a numeric value to the data_bar_negative_stroke_width= option.\n\ndata_bar_negative_fill_color : str | None = None\n\nBy default, all negative data bars have a fill color of \"#D75A68\". This can however be changed by providing a color value to data_bar_negative_fill_color=.\n\nreference_line_color : str | None = None\n\nThe reference line will have a color of \"#75A8B0\" if it is set to appear. This color can be changed by providing a single color value to reference_line_color=.\n\nreference_area_fill_color : str | None = None\n\nIf a reference area has been defined and is visible it has by default a fill color of \"#A6E6F2\". This can be modified by declaring a color value in the reference_area_fill_color= option.\n\nvertical_guide_stroke_color : str | None = None\n\nVertical guides appear when hovering in the vicinity of data points. Their default color is \"#911EB4\" (a strong magenta color) and a fill opacity value of 0.4 is automatically applied to this. However, the base color can be changed with the vertical_guide_stroke_color= option.\n\nvertical_guide_stroke_width : int | None = None\n\nThe vertical guide‚Äôs stroke width, by default, is relatively large at 12 (this is ‚Äò12px‚Äô). This is modifiable by setting a different value with vertical_guide_stroke_width=.\n\nshow_data_points : bool | None = None\n\nBy default, all data points in a nanoplot are shown but this layer can be hidden by setting show_data_points= to False.\n\nshow_data_line : bool | None = None\n\nThe data line connects data points together and it is shown by default. This data line layer can be hidden by setting show_data_line= to False.\n\nshow_data_area : bool | None = None\n\nThe data area layer is adjacent to the data points and the data line. It is shown by default but can be hidden with show_data_area=False.\n\nshow_reference_line : bool | None = None\n\nThe layer with a horizontal reference line appears underneath that of the data points and the data line. Like vertical guides, hovering over a reference will show its value. The reference line (if available) is shown by default but can be hidden by setting show_reference_line= to False.\n\nshow_reference_area : bool | None = None\n\nThe reference area appears at the very bottom of the layer stack, if it is available (i.e., defined in cols_nanoplot()). It will be shown in the default case but can be hidden by using show_reference_area=False.\n\nshow_vertical_guides : bool | None = None\n\nVertical guides appear when hovering over data points. This hidden layer is active by default but can be deactivated by using show_vertical_guides=False.\n\nshow_y_axis_guide : bool | None = None\n\nThe y-axis guide will appear when hovering over the far left side of a nanoplot. This hidden layer is active by default but can be deactivated by using show_y_axis_guide=False.\n\ninteractive_data_values : bool | None = None\n\nBy default, numeric data values will be shown only when the user interacts with certain regions of a nanoplot. This is because the values may be numerous (i.e., clutter the display when all are visible) and it can be argued that the values themselves are secondary to the presentation. However, for some types of plots (like horizontal bar plots), a persistent display of values alongside the plot marks may be desirable. By setting interactive_data_values=False we can opt for always displaying the data values alongside the plot components.\n\ny_val_fmt_fn : Callable[‚Ä¶, str] | None = None\n\nIf providing a function to y_val_fmt_fn=, customized formatting of the y values associated with the data points/bars is possible.\n\ny_axis_fmt_fn : Callable[‚Ä¶, str] | None = None\n\nA function supplied to y_axis_fmt_fn= will result in customized formatting of the y-axis label values.\n\ny_ref_line_fmt_fn : Callable[‚Ä¶, str] | None = None\n\nProviding a function for y_ref_line_fmt_fn= yields customized formatting of the reference line (if present).\n\ncurrency : str | None = None\n\nIf the values are to be displayed as currency values, supply either: (1) a 3-letter currency code (e.g., \"USD\" for U.S. Dollars, \"EUR\" for the Euro currency), or (2) a common currency name (e.g., \"dollar\", \"pound\", \"yen\", etc.)."
  },
  {
    "objectID": "reference/nanoplot_options.html#examples",
    "href": "reference/nanoplot_options.html#examples",
    "title": "nanoplot_options",
    "section": "",
    "text": "See fmt_nanoplot()."
  },
  {
    "objectID": "reference/GT.as_raw_html.html",
    "href": "reference/GT.as_raw_html.html",
    "title": "GT.as_raw_html",
    "section": "",
    "text": "GT.as_raw_html(self, inline_css=False, make_page=False, all_important=False)\nGet the HTML content of a GT object.\nGet the HTML content from a GT object as a string. By default, the generated HTML will have inlined styles, where CSS styles (that were previously contained in CSS rule sets external to the &lt;table&gt; element are included as style attributes in the HTML table‚Äôs tags. This option is preferable when using the output HTML table in an emailing context."
  },
  {
    "objectID": "reference/GT.as_raw_html.html#parameters",
    "href": "reference/GT.as_raw_html.html#parameters",
    "title": "GT.as_raw_html",
    "section": "Parameters",
    "text": "Parameters\n\ngt : \n\nA GT object.\n\ninline_css : bool = False\n\nAn option to supply styles to table elements as inlined CSS styles. This is useful when including the table HTML as part of an HTML email message body, since inlined styles are largely supported in email clients over using CSS in a &lt;style&gt; block.\n\nmake_page : bool = False\n\nAn option to wrap the table in a complete HTML page. This is useful when you want to display the table in a web browser."
  },
  {
    "objectID": "reference/GT.as_raw_html.html#returns",
    "href": "reference/GT.as_raw_html.html#returns",
    "title": "GT.as_raw_html",
    "section": "Returns",
    "text": "Returns\n\n : str\n\nAn HTML fragment containing a table."
  },
  {
    "objectID": "reference/GT.as_raw_html.html#examples",
    "href": "reference/GT.as_raw_html.html#examples",
    "title": "GT.as_raw_html",
    "section": "Examples:",
    "text": "Examples:\nLet‚Äôs use a subset of the gtcars dataset to create a new table.\n\nfrom great_tables import GT, md, style, loc\nfrom great_tables.data import gtcars\nimport polars as pl\n\ngtcars_mini = (\n    pl.from_pandas(gtcars)\n    .select([\"mfr\", \"model\", \"msrp\"])\n    .head(5)\n)\n\ngt_tbl = (\n    GT(gtcars_mini)\n    .tab_header(\n        title=md(\"Data listing from **gtcars**\"),\n        subtitle=md(\"gtcars is an R dataset\")\n    )\n    .tab_style(\n        style=style.fill(color=\"LightCyan\"),\n        locations=loc.body(columns=\"mfr\")\n    )\n    .fmt_currency(columns=\"msrp\")\n    .tab_options(\n        heading_background_color=\"Azure\",\n        table_body_hlines_color=\"Lavender\",\n        table_body_hlines_width=\"2px\"\n    )\n    .opt_horizontal_padding(scale=2)\n)\n\ngt_tbl\n\n\n\n\n\n\n  \n    Data listing from gtcars\n  \n  \n    gtcars is an R dataset\n  \n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    $447,000.00\n  \n  \n    Ferrari\n    458 Speciale\n    $291,744.00\n  \n  \n    Ferrari\n    458 Spider\n    $263,553.00\n  \n  \n    Ferrari\n    458 Italia\n    $233,509.00\n  \n  \n    Ferrari\n    488 GTB\n    $245,400.00\n  \n\n\n\n\n\n\n        \n\n\nNow we can return the table as an HTML string using the as_raw_html() method.\n\ngt_tbl.as_raw_html()\n\n'&lt;div id=\"wyxxsvnici\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"&gt;\\n&lt;style&gt;\\n#wyxxsvnici table {\\n          font-family: -apple-system, BlinkMacSystemFont, \\'Segoe UI\\', Roboto, Oxygen, Ubuntu, Cantarell, \\'Helvetica Neue\\', \\'Fira Sans\\', \\'Droid Sans\\', Arial, sans-serif;\\n          -webkit-font-smoothing: antialiased;\\n          -moz-osx-font-smoothing: grayscale;\\n        }\\n\\n#wyxxsvnici thead, tbody, tfoot, tr, td, th { border-style: none; }\\n tr { background-color: transparent; }\\n#wyxxsvnici p { margin: 0; padding: 0; }\\n #wyxxsvnici .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\\n #wyxxsvnici .gt_caption { padding-top: 4px; padding-bottom: 4px; }\\n #wyxxsvnici .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 10px; padding-right: 10px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\\n #wyxxsvnici .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 10px; padding-right: 10px; border-top-color: #FFFFFF; border-top-width: 0; }\\n #wyxxsvnici .gt_heading { background-color: Azure; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\\n #wyxxsvnici .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\\n #wyxxsvnici .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\\n #wyxxsvnici .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 10px; padding-right: 10px; overflow-x: hidden; }\\n #wyxxsvnici .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\\n #wyxxsvnici .gt_column_spanner_outer:first-child { padding-left: 0; }\\n #wyxxsvnici .gt_column_spanner_outer:last-child { padding-right: 0; }\\n #wyxxsvnici .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\\n #wyxxsvnici .gt_spanner_row { border-bottom-style: hidden; }\\n #wyxxsvnici .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 10px; padding-right: 10px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\\n #wyxxsvnici .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\\n #wyxxsvnici .gt_from_md&gt; :first-child { margin-top: 0; }\\n #wyxxsvnici .gt_from_md&gt; :last-child { margin-bottom: 0; }\\n #wyxxsvnici .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 10px; padding-right: 10px; margin: 10px; border-top-style: solid; border-top-width: 2px; border-top-color: Lavender; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\\n #wyxxsvnici .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 10px; padding-right: 10px; }\\n #wyxxsvnici .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 10px; padding-right: 10px; vertical-align: top; }\\n #wyxxsvnici .gt_row_group_first td { border-top-width: 2px; }\\n #wyxxsvnici .gt_row_group_first th { border-top-width: 2px; }\\n #wyxxsvnici .gt_striped { background-color: rgba(128,128,128,0.05); }\\n #wyxxsvnici .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\\n #wyxxsvnici .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\\n #wyxxsvnici .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 10px; padding-right: 10px; text-align: left; }\\n #wyxxsvnici .gt_left { text-align: left; }\\n #wyxxsvnici .gt_center { text-align: center; }\\n #wyxxsvnici .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\\n #wyxxsvnici .gt_font_normal { font-weight: normal; }\\n #wyxxsvnici .gt_font_bold { font-weight: bold; }\\n #wyxxsvnici .gt_font_italic { font-style: italic; }\\n #wyxxsvnici .gt_super { font-size: 65%; }\\n #wyxxsvnici .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\\n #wyxxsvnici .gt_asterisk { font-size: 100%; vertical-align: 0; }\\n \\n&lt;/style&gt;\\n&lt;table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"&gt;\\n&lt;thead&gt;\\n\\n  &lt;tr class=\"gt_heading\"&gt;\\n    &lt;td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\"&gt;Data listing from &lt;strong&gt;gtcars&lt;/strong&gt;&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr class=\"gt_heading\"&gt;\\n    &lt;td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\"&gt;gtcars is an R dataset&lt;/td&gt;\\n  &lt;/tr&gt;\\n&lt;tr class=\"gt_col_headings\"&gt;\\n  &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mfr\"&gt;mfr&lt;/th&gt;\\n  &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"model\"&gt;model&lt;/th&gt;\\n  &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"msrp\"&gt;msrp&lt;/th&gt;\\n&lt;/tr&gt;\\n&lt;/thead&gt;\\n&lt;tbody class=\"gt_table_body\"&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ford&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;GT&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$447,000.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;458 Speciale&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$291,744.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;458 Spider&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$263,553.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;458 Italia&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$233,509.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;488 GTB&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$245,400.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n&lt;/tbody&gt;\\n\\n\\n&lt;/table&gt;\\n\\n&lt;/div&gt;\\n        '\n\n\nThe HTML string contains the HTML for the table. It has only the table so it‚Äôs not a complete HTML document but rather an HTML fragment. While this useful for embedding a table in an existing HTML document, you could also use the make_page=True argument to get a complete HTML page with the table contained within.\n\ngt_tbl.as_raw_html(make_page=True)\n\n'&lt;!DOCTYPE html&gt;\\n&lt;html lang=\"en\"&gt;\\n&lt;head&gt;\\n&lt;meta charset=\"utf-8\"/&gt;\\n&lt;/head&gt;\\n&lt;body&gt;\\n&lt;div id=\"bylkiixbqb\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"&gt;\\n&lt;style&gt;\\n#bylkiixbqb table {\\n          font-family: -apple-system, BlinkMacSystemFont, \\'Segoe UI\\', Roboto, Oxygen, Ubuntu, Cantarell, \\'Helvetica Neue\\', \\'Fira Sans\\', \\'Droid Sans\\', Arial, sans-serif;\\n          -webkit-font-smoothing: antialiased;\\n          -moz-osx-font-smoothing: grayscale;\\n        }\\n\\n#bylkiixbqb thead, tbody, tfoot, tr, td, th { border-style: none; }\\n tr { background-color: transparent; }\\n#bylkiixbqb p { margin: 0; padding: 0; }\\n #bylkiixbqb .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\\n #bylkiixbqb .gt_caption { padding-top: 4px; padding-bottom: 4px; }\\n #bylkiixbqb .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 10px; padding-right: 10px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\\n #bylkiixbqb .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 10px; padding-right: 10px; border-top-color: #FFFFFF; border-top-width: 0; }\\n #bylkiixbqb .gt_heading { background-color: Azure; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\\n #bylkiixbqb .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\\n #bylkiixbqb .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\\n #bylkiixbqb .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; padding-left: 10px; padding-right: 10px; overflow-x: hidden; }\\n #bylkiixbqb .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\\n #bylkiixbqb .gt_column_spanner_outer:first-child { padding-left: 0; }\\n #bylkiixbqb .gt_column_spanner_outer:last-child { padding-right: 0; }\\n #bylkiixbqb .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; }\\n #bylkiixbqb .gt_spanner_row { border-bottom-style: hidden; }\\n #bylkiixbqb .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 10px; padding-right: 10px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; }\\n #bylkiixbqb .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; }\\n #bylkiixbqb .gt_from_md&gt; :first-child { margin-top: 0; }\\n #bylkiixbqb .gt_from_md&gt; :last-child { margin-bottom: 0; }\\n #bylkiixbqb .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 10px; padding-right: 10px; margin: 10px; border-top-style: solid; border-top-width: 2px; border-top-color: Lavender; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; }\\n #bylkiixbqb .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 10px; padding-right: 10px; }\\n #bylkiixbqb .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 10px; padding-right: 10px; vertical-align: top; }\\n #bylkiixbqb .gt_row_group_first td { border-top-width: 2px; }\\n #bylkiixbqb .gt_row_group_first th { border-top-width: 2px; }\\n #bylkiixbqb .gt_striped { background-color: rgba(128,128,128,0.05); }\\n #bylkiixbqb .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\\n #bylkiixbqb .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\\n #bylkiixbqb .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 10px; padding-right: 10px; text-align: left; }\\n #bylkiixbqb .gt_left { text-align: left; }\\n #bylkiixbqb .gt_center { text-align: center; }\\n #bylkiixbqb .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\\n #bylkiixbqb .gt_font_normal { font-weight: normal; }\\n #bylkiixbqb .gt_font_bold { font-weight: bold; }\\n #bylkiixbqb .gt_font_italic { font-style: italic; }\\n #bylkiixbqb .gt_super { font-size: 65%; }\\n #bylkiixbqb .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\\n #bylkiixbqb .gt_asterisk { font-size: 100%; vertical-align: 0; }\\n \\n&lt;/style&gt;\\n&lt;table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"&gt;\\n&lt;thead&gt;\\n\\n  &lt;tr class=\"gt_heading\"&gt;\\n    &lt;td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\"&gt;Data listing from &lt;strong&gt;gtcars&lt;/strong&gt;&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr class=\"gt_heading\"&gt;\\n    &lt;td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\"&gt;gtcars is an R dataset&lt;/td&gt;\\n  &lt;/tr&gt;\\n&lt;tr class=\"gt_col_headings\"&gt;\\n  &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mfr\"&gt;mfr&lt;/th&gt;\\n  &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"model\"&gt;model&lt;/th&gt;\\n  &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"msrp\"&gt;msrp&lt;/th&gt;\\n&lt;/tr&gt;\\n&lt;/thead&gt;\\n&lt;tbody class=\"gt_table_body\"&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ford&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;GT&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$447,000.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;458 Speciale&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$291,744.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;458 Spider&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$263,553.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;458 Italia&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$233,509.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr&gt;\\n    &lt;td style=\"background-color: LightCyan;\" class=\"gt_row gt_left\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\"&gt;488 GTB&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\"&gt;$245,400.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n&lt;/tbody&gt;\\n\\n\\n&lt;/table&gt;\\n\\n&lt;/div&gt;\\n        \\n&lt;/body&gt;\\n&lt;/html&gt;\\n            '\n\n\nShould you want to include all of the CSS styles as inline styles, you can use inline_css=True to get an HTML string with all CSS inlined into the HTML tags.\n\ngt_tbl.as_raw_html(inline_css=True)\n\n'&lt;div id=\"ybkxazivoj\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"&gt;\\n\\n&lt;table class=\"gt_table\" data-quarto-bootstrap=\"false\" data-quarto-disable-processing=\"false\" style=\"font-family: -apple-system, BlinkMacSystemFont, \\'Segoe UI\\', Roboto, Oxygen, Ubuntu, Cantarell, \\'Helvetica Neue\\', \\'Fira Sans\\', \\'Droid Sans\\', Arial, sans-serif;-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;display: table;border-collapse: collapse;line-height: normal;margin-left: auto;margin-right: auto;color: #333333;font-size: 16px;font-weight: normal;font-style: normal;background-color: #FFFFFF;width: auto;border-top-style: solid;border-top-width: 2px;border-top-color: #A8A8A8;border-right-style: none;border-right-width: 2px;border-right-color: #D3D3D3;border-bottom-style: solid;border-bottom-width: 2px;border-bottom-color: #A8A8A8;border-left-style: none;border-left-width: 2px;border-left-color: #D3D3D3;\"&gt;\\n&lt;thead style=\"border-style: none;\"&gt;\\n\\n  &lt;tr class=\"gt_heading\" style=\"border-style: none;background-color: Azure;text-align: center;border-bottom-color: #FFFFFF;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;\"&gt;\\n    &lt;td class=\"gt_heading gt_title gt_font_normal\" colspan=\"3\" style=\"border-style: none;color: #333333;font-size: 125%;font-weight: normal;padding-top: 4px;padding-bottom: 4px;padding-left: 10px;padding-right: 10px;border-bottom-color: #FFFFFF;border-bottom-width: 0;background-color: Azure;text-align: center;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;\"&gt;Data listing from &lt;strong&gt;gtcars&lt;/strong&gt;&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr class=\"gt_heading\" style=\"border-style: none;background-color: Azure;text-align: center;border-bottom-color: #FFFFFF;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;\"&gt;\\n    &lt;td class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" colspan=\"3\" style=\"border-style: none;color: #333333;font-size: 85%;font-weight: normal;padding-top: 3px;padding-bottom: 5px;padding-left: 10px;padding-right: 10px;border-top-color: #FFFFFF;border-top-width: 0;background-color: Azure;text-align: center;border-bottom-color: #D3D3D3;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;border-bottom-style: solid;border-bottom-width: 2px;\"&gt;gtcars is an R dataset&lt;/td&gt;\\n  &lt;/tr&gt;\\n&lt;tr class=\"gt_col_headings\" style=\"border-style: none;background-color: transparent;border-top-style: solid;border-top-width: 2px;border-top-color: #D3D3D3;border-bottom-style: solid;border-bottom-width: 2px;border-bottom-color: #D3D3D3;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;\"&gt;\\n  &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_left\" id=\"mfr\" rowspan=\"1\" colspan=\"1\" scope=\"col\" style=\"border-style: none;color: #333333;background-color: #FFFFFF;font-size: 100%;font-weight: normal;text-transform: inherit;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: bottom;padding-top: 5px;padding-bottom: 5px;padding-left: 10px;padding-right: 10px;overflow-x: hidden;text-align: left;\"&gt;mfr&lt;/th&gt;\\n  &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_left\" id=\"model\" rowspan=\"1\" colspan=\"1\" scope=\"col\" style=\"border-style: none;color: #333333;background-color: #FFFFFF;font-size: 100%;font-weight: normal;text-transform: inherit;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: bottom;padding-top: 5px;padding-bottom: 5px;padding-left: 10px;padding-right: 10px;overflow-x: hidden;text-align: left;\"&gt;model&lt;/th&gt;\\n  &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_right\" id=\"msrp\" rowspan=\"1\" colspan=\"1\" scope=\"col\" style=\"border-style: none;color: #333333;background-color: #FFFFFF;font-size: 100%;font-weight: normal;text-transform: inherit;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: bottom;padding-top: 5px;padding-bottom: 5px;padding-left: 10px;padding-right: 10px;overflow-x: hidden;text-align: right;font-variant-numeric: tabular-nums;\"&gt;msrp&lt;/th&gt;\\n&lt;/tr&gt;\\n&lt;/thead&gt;\\n&lt;tbody class=\"gt_table_body\" style=\"border-style: none;border-top-style: solid;border-top-width: 2px;border-top-color: #D3D3D3;border-bottom-style: solid;border-bottom-width: 2px;border-bottom-color: #D3D3D3;\"&gt;\\n  &lt;tr style=\"border-style: none;background-color: transparent;\"&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;background-color: LightCyan\"&gt;Ford&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;\"&gt;GT&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: right;font-variant-numeric: tabular-nums;\"&gt;$447,000.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr style=\"border-style: none;background-color: transparent;\"&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;background-color: LightCyan\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;\"&gt;458 Speciale&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: right;font-variant-numeric: tabular-nums;\"&gt;$291,744.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr style=\"border-style: none;background-color: transparent;\"&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;background-color: LightCyan\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;\"&gt;458 Spider&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: right;font-variant-numeric: tabular-nums;\"&gt;$263,553.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr style=\"border-style: none;background-color: transparent;\"&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;background-color: LightCyan\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;\"&gt;458 Italia&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: right;font-variant-numeric: tabular-nums;\"&gt;$233,509.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n  &lt;tr style=\"border-style: none;background-color: transparent;\"&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;background-color: LightCyan\"&gt;Ferrari&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_left\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: left;\"&gt;488 GTB&lt;/td&gt;\\n    &lt;td class=\"gt_row gt_right\" style=\"border-style: none;padding-top: 8px;padding-bottom: 8px;padding-left: 10px;padding-right: 10px;margin: 10px;border-top-style: solid;border-top-width: 2px;border-top-color: Lavender;border-left-style: none;border-left-width: 1px;border-left-color: #D3D3D3;border-right-style: none;border-right-width: 1px;border-right-color: #D3D3D3;vertical-align: middle;overflow-x: hidden;text-align: right;font-variant-numeric: tabular-nums;\"&gt;$245,400.00&lt;/td&gt;\\n  &lt;/tr&gt;\\n&lt;/tbody&gt;\\n\\n\\n&lt;/table&gt;\\n\\n&lt;/div&gt;'"
  },
  {
    "objectID": "reference/data.peeps.html",
    "href": "reference/data.peeps.html",
    "title": "data.peeps",
    "section": "",
    "text": "data.peeps\nA table of personal information for people all over the world.\nThe peeps dataset contains records for one hundred people residing in ten different countries. Each person in the table has address information along with their email address and phone number. There are also personal characteristics like date of birth, height, and weight. This data has been synthesized, and so the names within the table have not been taken or based on individuals in real life. The street addresses were generated from actual street names within real geographic localities, however, the street numbers were assigned randomly from a constrained number set. While these records do not relate to real people, efforts were made to make the data as realistic as possible.\n\n\nThis is a dataset with 100 rows and 14 columns.\n\nname_given, name_family: The given and family name of individual.\naddress: The street address of the individual.\ncity: The name of the city or locality in which the individual resides.\nstate_prov: The state or province associated with the city and address. This is None for individuals residing in countries where subdivision data is not needed for generating a valid mailing address.\npostcode: The post code associated with the city and address.\ncountry: The 3-letter ISO 3166-1 country code representative of the individual‚Äôs country.\nemail_addr: The individual‚Äôs email address.\nphone_number, country_code: The individual‚Äôs phone number and the country code associated with the phone number.\ngender: The gender of the individual.\ndob: The individual‚Äôs date of birth (DOB) in the ISO 8601 form of YYYY-MM-DD.\nheight_cm, weight_kg: The height and weight of the individual in centimeters (cm) and kilograms (kg), respectively.\n\n\n\n\nRows: 100\nColumns: 14\n$ name_given   &lt;str&gt; 'Ruth', 'Peter', 'Fanette'\n$ name_family  &lt;str&gt; 'Conte', 'M√∂ller', 'Gadbois'\n$ address      &lt;str&gt; '4299 Bobcat Drive', '3705 Hidden Pond Road', '4200 Swick Hill Street'\n$ city         &lt;str&gt; 'Baileys Crossroads', 'Red Boiling Springs', 'New Orleans'\n$ state_prov   &lt;str&gt; 'MD', 'TN', 'LA'\n$ postcode     &lt;str&gt; '22041', '37150', '70112'\n$ country      &lt;str&gt; 'USA', 'USA', 'USA'\n$ email_addr   &lt;str&gt; 'rcconte@example.com', 'pmoeller@example.com', 'fan_gadbois@example.com'\n$ phone_number &lt;str&gt; '240-783-7630', '615-699-3517', '985-205-2970'\n$ country_code &lt;str&gt; '1', '1', '1'\n$ gender       &lt;str&gt; 'female', 'male', 'female'\n$ dob          &lt;str&gt; '1949-03-16', '1939-11-22', '1970-12-20'\n$ height_cm    &lt;i64&gt; 153, 175, 167\n$ weight_kg    &lt;f64&gt; 76.4, 74.9, 61.6"
  },
  {
    "objectID": "reference/data.peeps.html#details",
    "href": "reference/data.peeps.html#details",
    "title": "data.peeps",
    "section": "",
    "text": "This is a dataset with 100 rows and 14 columns.\n\nname_given, name_family: The given and family name of individual.\naddress: The street address of the individual.\ncity: The name of the city or locality in which the individual resides.\nstate_prov: The state or province associated with the city and address. This is None for individuals residing in countries where subdivision data is not needed for generating a valid mailing address.\npostcode: The post code associated with the city and address.\ncountry: The 3-letter ISO 3166-1 country code representative of the individual‚Äôs country.\nemail_addr: The individual‚Äôs email address.\nphone_number, country_code: The individual‚Äôs phone number and the country code associated with the phone number.\ngender: The gender of the individual.\ndob: The individual‚Äôs date of birth (DOB) in the ISO 8601 form of YYYY-MM-DD.\nheight_cm, weight_kg: The height and weight of the individual in centimeters (cm) and kilograms (kg), respectively."
  },
  {
    "objectID": "reference/data.peeps.html#preview",
    "href": "reference/data.peeps.html#preview",
    "title": "data.peeps",
    "section": "",
    "text": "Rows: 100\nColumns: 14\n$ name_given   &lt;str&gt; 'Ruth', 'Peter', 'Fanette'\n$ name_family  &lt;str&gt; 'Conte', 'M√∂ller', 'Gadbois'\n$ address      &lt;str&gt; '4299 Bobcat Drive', '3705 Hidden Pond Road', '4200 Swick Hill Street'\n$ city         &lt;str&gt; 'Baileys Crossroads', 'Red Boiling Springs', 'New Orleans'\n$ state_prov   &lt;str&gt; 'MD', 'TN', 'LA'\n$ postcode     &lt;str&gt; '22041', '37150', '70112'\n$ country      &lt;str&gt; 'USA', 'USA', 'USA'\n$ email_addr   &lt;str&gt; 'rcconte@example.com', 'pmoeller@example.com', 'fan_gadbois@example.com'\n$ phone_number &lt;str&gt; '240-783-7630', '615-699-3517', '985-205-2970'\n$ country_code &lt;str&gt; '1', '1', '1'\n$ gender       &lt;str&gt; 'female', 'male', 'female'\n$ dob          &lt;str&gt; '1949-03-16', '1939-11-22', '1970-12-20'\n$ height_cm    &lt;i64&gt; 153, 175, 167\n$ weight_kg    &lt;f64&gt; 76.4, 74.9, 61.6"
  },
  {
    "objectID": "reference/GT.fmt_units.html",
    "href": "reference/GT.fmt_units.html",
    "title": "GT.fmt_units",
    "section": "",
    "text": "GT.fmt_units(self, columns=None, rows=None, pattern='{x}')\nFormat measurement units.\nThe fmt_units() method lets you better format measurement units in the table body. These must conform to the Great Tables units notation; as an example of this, \"J Hz^-1 mol^-1\" can be used to generate units for the molar Planck constant. The notation here provides several conveniences for defining units, so as long as the values to be formatted conform to this syntax, you‚Äôll obtain nicely-formatted inline units. Details pertaining to units notation can be found in the section entitled How to use units notation."
  },
  {
    "objectID": "reference/GT.fmt_units.html#parameters",
    "href": "reference/GT.fmt_units.html#parameters",
    "title": "GT.fmt_units",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals."
  },
  {
    "objectID": "reference/GT.fmt_units.html#how-to-use-units-notation",
    "href": "reference/GT.fmt_units.html#how-to-use-units-notation",
    "title": "GT.fmt_units",
    "section": "How to use units notation",
    "text": "How to use units notation\nThe Great Tables units notation involves a shorthand of writing units that feels familiar and is fine-tuned for the task at hand. Each unit is treated as a separate entity (parentheses and other symbols included) and the addition of subscript text and exponents is flexible and relatively easy to formulate. This is all best shown with examples:\n\n\"m/s\" and \"m / s\" both render as \"m/s\"\n\"m s^-1\" will appear with the \"-1\" exponent intact\n\"m /s\" gives the the same result, as \"/&lt;unit&gt;\" is equivalent to \"&lt;unit&gt;^-1\"\n\"E_h\" will render an \"E\" with the \"h\" subscript\n\"t_i^2.5\" provides a t with an \"i\" subscript and a \"2.5\" exponent\n\"m[_0^2]\" will use overstriking to set both scripts vertically\n\"g/L %C6H12O6%\" uses a chemical formula (enclosed in a pair of \"%\" characters) as a unit partial, and the formula will render correctly with subscripted numbers\nCommon units that are difficult to write using ASCII text may be implicitly converted to the correct characters (e.g., the \"u\" in \"ug\", \"um\", \"uL\", and \"umol\" will be converted to the Greek mu symbol; \"degC\" and \"degF\" will render a degree sign before the temperature unit)\nWe can transform shorthand symbol/unit names enclosed in \":\" (e.g., \":angstrom:\", \":ohm:\", etc.) into proper symbols\nGreek letters can added by enclosing the letter name in \":\"; you can use lowercase letters (e.g., \":beta:\", \":sigma:\", etc.) and uppercase letters too (e.g., \":Alpha:\", \":Zeta:\", etc.)\nThe components of a unit (unit name, subscript, and exponent) can be fully or partially italicized/emboldened by surrounding text with \"*\" or \"**\""
  },
  {
    "objectID": "reference/GT.fmt_units.html#returns",
    "href": "reference/GT.fmt_units.html#returns",
    "title": "GT.fmt_units",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_units.html#examples",
    "href": "reference/GT.fmt_units.html#examples",
    "title": "GT.fmt_units",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the illness dataset and create a new table. The units column happens to contain string values in units notation (e.g., \"x10^9 / L\"). Using the fmt_units() method here will improve the formatting of those measurement units.\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import illness\n\n(\n    GT(illness, rowname_col=\"test\")\n    .fmt_units(columns=\"units\")\n    .fmt_number(columns=lambda x: x.startswith(\"day\"), decimals=2, drop_trailing_zeros=True)\n    .tab_header(title=\"Laboratory Findings for the YF Patient\")\n    .tab_spanner(label=\"Day\", columns=lambda x: x.startswith(\"day\"))\n    .tab_spanner(label=\"Normal Range\", columns=lambda x: x.startswith(\"norm\"))\n    .cols_label(\n      norm_l=\"Lower\",\n      norm_u=\"Upper\",\n      units=\"Units\"\n    )\n    .opt_vertical_padding(scale=0.4)\n    .opt_align_table_header(align=\"left\")\n    .tab_options(heading_padding=\"10px\")\n    .tab_style(\n        locations=loc.body(columns=\"norm_l\"),\n        style=style.borders(sides=\"left\")\n    )\n    .opt_vertical_padding(scale=0.5)\n)\n\n\n\n\n\n\n  \n    Laboratory Findings for the YF Patient\n  \n\n  \n  Units\n  \n    Day\n  \n  \n    Normal Range\n  \n\n\n  day_3\n  day_4\n  day_5\n  day_6\n  day_7\n  day_8\n  day_9\n  Lower\n  Upper\n\n\n\n  \n    Viral load\n    copies per mL\n    12,000\n    4,200\n    1,600\n    830\n    760\n    520\n    250\n    \n    \n  \n  \n    WBC\n    √ó109/L\n    5.26\n    4.26\n    9.92\n    10.49\n    24.77\n    30.26\n    19.03\n    4.0\n    10.0\n  \n  \n    Neutrophils\n    √ó109/L\n    4.87\n    4.72\n    7.92\n    18.21\n    22.08\n    27.17\n    16.59\n    2.0\n    8.0\n  \n  \n    RBC\n    √ó1012/L\n    5.72\n    5.98\n    4.23\n    4.83\n    4.12\n    2.68\n    3.32\n    4.0\n    5.5\n  \n  \n    Hb\n    g/L\n    153\n    135\n    126\n    115\n    75\n    87\n    95\n    120.0\n    160.0\n  \n  \n    PLT\n    √ó109/L\n    67\n    38.6\n    27.4\n    26.2\n    74.1\n    36.2\n    25.6\n    100.0\n    300.0\n  \n  \n    ALT\n    U/L\n    12,835\n    12,632\n    6,426.7\n    4,263.1\n    1,623.7\n    672.6\n    512.4\n    9.0\n    50.0\n  \n  \n    AST\n    U/L\n    23,672\n    21,368\n    14,730\n    8,691\n    2,189\n    1,145\n    782.5\n    15.0\n    40.0\n  \n  \n    TBIL\n    ¬µmol/L\n    117.2\n    143.8\n    137.2\n    158.1\n    127.3\n    105.1\n    163.2\n    0.0\n    18.8\n  \n  \n    DBIL\n    ¬µmol/L\n    71.4\n    104.6\n    94.6\n    143.9\n    117.8\n    83.6\n    126.3\n    0.0\n    6.8\n  \n  \n    NH3\n    mmol/L\n    115.2\n    135.2\n    131\n    176.7\n    84.2\n    72.4\n    91.9\n    10.0\n    47.0\n  \n  \n    PT\n    s\n    24.6\n    42.4\n    53.7\n    54\n    22.6\n    16.8\n    29.5\n    9.4\n    12.5\n  \n  \n    APTT\n    s\n    39.2\n    57.2\n    65.9\n    68.3\n    62.4\n    61.7\n    114.7\n    25.1\n    36.5\n  \n  \n    PTA\n    %\n    41\n    25\n    19\n    14\n    51\n    55\n    31\n    70.0\n    130.0\n  \n  \n    DD\n    mg/L\n    32.9\n    35.1\n    24.5\n    25.6\n    18.7\n    24.7\n    64.8\n    0.0\n    5.0\n  \n  \n    FDP\n    ¬µg/mL\n    84.7\n    92.5\n    77.2\n    \n    \n    157.2\n    291.7\n    0.0\n    5.0\n  \n  \n    Fibrinogen\n    mg/dL\n    238.1\n    216.8\n    135\n    85.2\n    105.7\n    \n    64.3\n    200.0\n    400.0\n  \n  \n    LDH\n    U/L\n    5,727.3\n    2,622.8\n    2,418.7\n    546.3\n    \n    637.2\n    \n    80.0\n    285.0\n  \n  \n    HBDH\n    \n    5,971.2\n    5,826.9\n    4,826.9\n    2,871.2\n    \n    1,163.6\n    \n    74.0\n    182.0\n  \n  \n    CK\n    U/L\n    725\n    792.1\n    760.2\n    1,263.6\n    \n    1,294.2\n    \n    38.0\n    174.0\n  \n  \n    CKMB\n    U/L\n    75\n    71\n    58\n    65\n    \n    68\n    \n    \n    25.0\n  \n  \n    BNP\n    pg/mL\n    37\n    \n    73\n    \n    482\n    421\n    1,332\n    \n    100.0\n  \n  \n    MYO\n    ng/mL\n    636.6\n    762.1\n    364.6\n    9,999\n    9,999\n    9,999\n    9,999\n    0.0\n    140.0\n  \n  \n    TnI\n    ng/mL\n    0.03\n    0.04\n    0.05\n    0.16\n    0.14\n    2.84\n    8.94\n    0.0\n    0.028\n  \n  \n    CREA\n    ¬µmol/L\n    705.6\n    683.6\n    523.6\n    374\n    259.6\n    241.8\n    211.4\n    59.0\n    104.0\n  \n  \n    BUN\n    mmol/L\n    20.13\n    25.33\n    13.33\n    7.84\n    4.23\n    3.92\n    3.41\n    1.7\n    8.3\n  \n  \n    AMY\n    U/L\n    \n    232.8\n    394.6\n    513.7\n    \n    642.9\n    538.9\n    0.0\n    115.0\n  \n  \n    LPS\n    U/L\n    \n    227.6\n    526.9\n    487.9\n    \n    437.8\n    414.5\n    5.6\n    51.3\n  \n  \n    K\n    mmol/L\n    4.19\n    4.64\n    4.34\n    4.83\n    4.53\n    4.37\n    5.74\n    3.5\n    5.3\n  \n  \n    Na\n    mmol/L\n    136.3\n    135.7\n    142.1\n    140.8\n    144.8\n    143.6\n    144.2\n    137.0\n    147.0\n  \n  \n    Cl\n    mmol/L\n    91.2\n    92.9\n    96.6\n    99.2\n    102.1\n    99.5\n    105.2\n    99.0\n    110.0\n  \n  \n    Ca\n    mmol/L\n    1.74\n    1.64\n    2.25\n    2.35\n    2.16\n    2.03\n    2.29\n    2.2\n    2.55\n  \n  \n    P\n    mmol/L\n    2.96\n    3.23\n    1.47\n    1.15\n    0.97\n    1.57\n    1.63\n    0.81\n    1.45\n  \n  \n    Lac\n    mmol/L\n    2.32\n    2.42\n    2.19\n    2.66\n    \n    6.15\n    5.46\n    1.33\n    1.78\n  \n  \n    CRP\n    mg/L\n    43.6\n    38.6\n    28.6\n    21.5\n    \n    4.3\n    6.4\n    0.0\n    5.0\n  \n  \n    PCT\n    ng/mL\n    0.57\n    \n    1.35\n    2.26\n    1.79\n    3.48\n    5.92\n    \n    0.05\n  \n  \n    IL-6\n    \n    \n    \n    165.9\n    58.3\n    74.6\n    737.2\n    \n    \n    7.0\n  \n  \n    CD3+CD4+\n    T cells per ¬µL\n    \n    174\n    153\n    184\n    243\n    370\n    252\n    706.0\n    1125.0\n  \n  \n    CD3+CD8+\n    T cells per ¬µL\n    \n    142\n    135\n    126\n    132\n    511\n    410\n    323.0\n    836.0\n  \n\n\n\n\n\n\n        \n\n\nThe constants dataset contains values for hundreds of fundamental physical constants. We‚Äôll take a subset of values that have some molar basis and generate a new display table from that. Like the illness dataset, this one has a units column so, again, the fmt_units() method will be used to format those units. Here, the preference for typesetting measurement units is to have positive and negative exponents (e.g., not \"&lt;unit_1&gt; / &lt;unit_2&gt;\" but rather \"&lt;unit_1&gt; &lt;unit_2&gt;^-1\").\n\nfrom great_tables.data import constants\nimport polars as pl\nimport polars.selectors as cs\n\nconstants_mini = (\n    pl.from_pandas(constants)\n    .filter(pl.col(\"name\").str.contains(\"molar\")).sort(\"value\")\n    .with_columns(\n        name=pl.col(\"name\")\n        .str.to_titlecase()\n        .str.replace(\"Kpa\", \"kpa\")\n        .str.replace(\"Of\", \"of\")\n    )\n)\n\n(\n    GT(constants_mini)\n    .cols_hide(columns=[\"uncert\", \"sf_value\", \"sf_uncert\"])\n    .fmt_units(columns=\"units\")\n    .fmt_scientific(columns=\"value\", decimals=3)\n    .tab_header(title=\"Physical Constants Having a Molar Basis\")\n    .tab_options(column_labels_hidden=True)\n)\n\n\n\n\n\n\n  \n    Physical Constants Having a Molar Basis\n  \n\n\n\n  \n    Molar Planck Constant\n    3.990 √ó 10‚àí10\n    J Hz‚àí1 mol‚àí1\n  \n  \n    Electron Molar Mass\n    5.486 √ó 10‚àí7\n    kg mol‚àí1\n  \n  \n    Molar Volume of Silicon\n    1.206 √ó 10‚àí5\n    m3 mol‚àí1\n  \n  \n    Muon Molar Mass\n    1.134 √ó 10‚àí4\n    kg mol‚àí1\n  \n  \n    Molar Mass Constant\n    1.000 √ó 10‚àí3\n    kg mol‚àí1\n  \n  \n    Proton Molar Mass\n    1.007 √ó 10‚àí3\n    kg mol‚àí1\n  \n  \n    Neutron Molar Mass\n    1.009 √ó 10‚àí3\n    kg mol‚àí1\n  \n  \n    Tau Molar Mass\n    1.908 √ó 10‚àí3\n    kg mol‚àí1\n  \n  \n    Deuteron Molar Mass\n    2.014 √ó 10‚àí3\n    kg mol‚àí1\n  \n  \n    Helion Molar Mass\n    3.015 √ó 10‚àí3\n    kg mol‚àí1\n  \n  \n    Triton Molar Mass\n    3.016 √ó 10‚àí3\n    kg mol‚àí1\n  \n  \n    Alpha Particle Molar Mass\n    4.002 √ó 10‚àí3\n    kg mol‚àí1\n  \n  \n    Molar Mass of Carbon-12\n    1.200 √ó 10‚àí2\n    kg mol‚àí1\n  \n  \n    Molar Volume of Ideal Gas (273.15 K, 101.325 kpa)\n    2.241 √ó 10‚àí2\n    m3 mol‚àí1\n  \n  \n    Molar Volume of Ideal Gas (273.15 K, 100 kpa)\n    2.271 √ó 10‚àí2\n    m3 mol‚àí1\n  \n  \n    Molar Gas Constant\n    8.314\n    J mol‚àí1 K‚àí1"
  },
  {
    "objectID": "reference/GT.fmt_units.html#see-also",
    "href": "reference/GT.fmt_units.html#see-also",
    "title": "GT.fmt_units",
    "section": "See Also",
    "text": "See Also\nThe define_units() function can be used as a standalone utility for working with units notation. It can parses strings in units notation and can emit formatted units with its .to_html() method."
  },
  {
    "objectID": "reference/GT.fmt_currency.html",
    "href": "reference/GT.fmt_currency.html",
    "title": "GT.fmt_currency",
    "section": "",
    "text": "GT.fmt_currency(\n    self,\n    columns=None,\n    rows=None,\n    currency=None,\n    use_subunits=True,\n    decimals=None,\n    drop_trailing_dec_mark=True,\n    use_seps=True,\n    accounting=False,\n    scale_by=1,\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign=False,\n    placement='left',\n    incl_space=False,\n    locale=None,\n)\nFormat values as currencies.\nWith numeric values in a gt table, we can perform currency-based formatting with the fmt_currency() method. This supports both automatic formatting with a three-letter currency code. We have fine control over the conversion from numeric values to currency values, where we could take advantage of the following options:"
  },
  {
    "objectID": "reference/GT.fmt_currency.html#parameters",
    "href": "reference/GT.fmt_currency.html#parameters",
    "title": "GT.fmt_currency",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\ncurrency : str | None = None\n\nThe currency to use for the numeric value. This input can be supplied as a 3-letter currency code (e.g., \"USD\" for U.S. Dollars, \"EUR\" for the Euro currency).\n\nuse_subunits : bool = True\n\nAn option for whether the subunits portion of a currency value should be displayed. For example, with an input value of 273.81, the default formatting will produce \"$273.81\". Removing the subunits (with use_subunits = False) will give us \"$273\".\n\ndecimals : int | None = None\n\nThe decimals values corresponds to the exact number of decimal places to use. This value is optional as a currency has an intrinsic number of decimal places (i.e., the subunits). A value such as 2.34 can, for example, be formatted with 0 decimal places and if the currency used is \"USD\" it would result in \"$2\". With 4 decimal places, the formatted value becomes \"$2.3400\".\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\naccounting : bool = False\n\nWhether to use accounting style, which wraps negative numbers in parentheses instead of using a minus sign.\n\nscale_by : float = 1\n\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nplacement : str = 'left'\n\nThe placement of the currency symbol. This can be either be \"left\" (as in \"$450\") or \"right\" (which yields \"450$\").\n\nincl_space : bool = False\n\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.fmt_currency.html#returns",
    "href": "reference/GT.fmt_currency.html#returns",
    "title": "GT.fmt_currency",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_currency.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_currency.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_currency",
    "section": "Adapting output to a specific locale",
    "text": "Adapting output to a specific locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale‚Äôs preferred values. In addition to number formatting, providing a locale value and not providing a currency allows Great Tables to obtain the currency code from the locale‚Äôs territory.\nNote that a locale value provided here will override any global locale setting performed in GT()‚Äôs own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_currency.html#examples",
    "href": "reference/GT.fmt_currency.html#examples",
    "title": "GT.fmt_currency",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the exibble dataset to create a table. With the fmt_currency() method, we‚Äôll format the currency column to display monetary values.\n\nfrom great_tables import GT, exibble\n\n(\n    GT(exibble)\n    .fmt_currency(\n        columns=\"currency\",\n        decimals=3,\n        use_seps=False\n    )\n)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    $49.950\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    $17.950\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    $1.390\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    $65100.000\n    row_4\n    grp_a\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    $1325.810\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    $13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    $0.440\n    row_8\n    grp_b"
  },
  {
    "objectID": "reference/GT.fmt_currency.html#see-also",
    "href": "reference/GT.fmt_currency.html#see-also",
    "title": "GT.fmt_currency",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_currency(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/loc.column_labels.html",
    "href": "reference/loc.column_labels.html",
    "title": "loc.column_labels",
    "section": "",
    "text": "loc.column_labels(columns=None)\nTarget column labels.\nWith loc.column_labels(), we can target the cells containing the column labels. This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.column_labels.html#parameters",
    "href": "reference/loc.column_labels.html#parameters",
    "title": "loc.column_labels",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list. If no columns are specified, all columns are targeted."
  },
  {
    "objectID": "reference/loc.column_labels.html#returns",
    "href": "reference/loc.column_labels.html#returns",
    "title": "loc.column_labels",
    "section": "Returns",
    "text": "Returns\n\n : LocColumnLabels\n\nA LocColumnLabels object, which is used for a locations= argument if specifying the table‚Äôs column labels."
  },
  {
    "objectID": "reference/loc.column_labels.html#examples",
    "href": "reference/loc.column_labels.html#examples",
    "title": "loc.column_labels",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. We will style all three of the column labels by using locations=loc.column_labels() within tab_style(). Note that no specification of columns= is needed here because we want to target all columns.\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5))\n    .tab_style(\n        style=style.text(color=\"blue\", size=\"large\", weight=\"bold\"),\n        locations=loc.column_labels()\n    )\n)\n\n\n\n\n\n\n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    447000.0\n  \n  \n    Ferrari\n    458 Speciale\n    291744.0\n  \n  \n    Ferrari\n    458 Spider\n    263553.0\n  \n  \n    Ferrari\n    458 Italia\n    233509.0\n  \n  \n    Ferrari\n    488 GTB\n    245400.0"
  },
  {
    "objectID": "reference/GT.pipe.html",
    "href": "reference/GT.pipe.html",
    "title": "GT.pipe",
    "section": "",
    "text": "GT.pipe(self, func, *args, **kwargs)\nProvide a structured way to chain a function for a GT object.\nThis function accepts a function that receives a GT object along with optional positional and keyword arguments, returning a GT object. This allows users to easily integrate a function into the chained API offered by Great Tables."
  },
  {
    "objectID": "reference/GT.pipe.html#parameters",
    "href": "reference/GT.pipe.html#parameters",
    "title": "GT.pipe",
    "section": "Parameters",
    "text": "Parameters\n\nfunc : Callable[P, 'GT']\n\nA function that receives a GT object along with optional positional and keyword arguments, returning a GT object.\n\n*args : P.args = ()\n\nOptional positional arguments to be passed to the function.\n\n****kwargs** : P.kwargs = {}\n\nOptional keyword arguments to be passed to the function."
  },
  {
    "objectID": "reference/GT.pipe.html#returns",
    "href": "reference/GT.pipe.html#returns",
    "title": "GT.pipe",
    "section": "Returns",
    "text": "Returns\n\n : gt\n\nA GT object."
  },
  {
    "objectID": "reference/GT.pipe.html#examples",
    "href": "reference/GT.pipe.html#examples",
    "title": "GT.pipe",
    "section": "Examples:",
    "text": "Examples:\nLet‚Äôs use the name, land_area_km2, and density_2021 columns of the towny dataset to create a table. First, we‚Äôll demonstrate using two consecutive calls to the .tab_style() method to highlight the maximum value of the land_area_km2 column with \"lightgray\" and the maximum value of the density_2021 column with \"lightblue\".\n\nimport polars as pl\nfrom great_tables import GT, loc, style\nfrom great_tables.data import towny\n\n\ntowny_mini = pl.from_pandas(towny).head(10)\n\n(\n    GT(\n        towny_mini[[\"name\", \"land_area_km2\", \"density_2021\"]],\n        rowname_col=\"name\",\n    )\n    .tab_style(\n        style=style.fill(color=\"lightgray\"),\n        locations=loc.body(\n            columns=\"land_area_km2\",\n            rows=pl.col(\"land_area_km2\").eq(pl.col(\"land_area_km2\").max()),\n        ),\n    )\n    .tab_style(\n        style=style.fill(color=\"lightblue\"),\n        locations=loc.body(\n            columns=\"density_2021\",\n            rows=pl.col(\"density_2021\").eq(pl.col(\"density_2021\").max()),\n        ),\n    )\n)\n\n\n\n\n\n\n\n  \n  land_area_km2\n  density_2021\n\n\n\n  \n    Addington Highlands\n    1293.99\n    1.96\n  \n  \n    Adelaide Metcalfe\n    331.11\n    9.09\n  \n  \n    Adjala-Tosorontio\n    371.53\n    29.58\n  \n  \n    Admaston/Bromley\n    519.59\n    5.76\n  \n  \n    Ajax\n    66.64\n    1900.75\n  \n  \n    Alberton\n    116.6\n    8.18\n  \n  \n    Alfred and Plantagenet\n    391.79\n    25.39\n  \n  \n    Algonquin Highlands\n    999.69\n    2.59\n  \n  \n    Alnwick/Haldimand\n    398.25\n    18.76\n  \n  \n    Amaranth\n    265.02\n    16.33\n  \n\n\n\n\n\n\n        \n\n\nNext, we‚Äôll demonstrate how to achieve the same result using the .pipe() method to programmatically style each column.\n\ncolumns = [\"land_area_km2\", \"density_2021\"]\ncolors = [\"lightgray\", \"lightblue\"]\n\n\ndef tbl_style(gtbl: GT, columns: list[str], colors: list[str]) -&gt; GT:\n    for column, color in zip(columns, colors):\n        gtbl = gtbl.tab_style(\n            style=style.fill(color=color),\n            locations=loc.body(columns=column, rows=pl.col(column).eq(pl.col(column).max())),\n        )\n    return gtbl\n\n\n(\n    GT(\n        towny_mini[[\"name\", \"land_area_km2\", \"density_2021\"]],\n        rowname_col=\"name\",\n    ).pipe(tbl_style, columns, colors)\n)\n\n\n\n\n\n\n\n  \n  land_area_km2\n  density_2021\n\n\n\n  \n    Addington Highlands\n    1293.99\n    1.96\n  \n  \n    Adelaide Metcalfe\n    331.11\n    9.09\n  \n  \n    Adjala-Tosorontio\n    371.53\n    29.58\n  \n  \n    Admaston/Bromley\n    519.59\n    5.76\n  \n  \n    Ajax\n    66.64\n    1900.75\n  \n  \n    Alberton\n    116.6\n    8.18\n  \n  \n    Alfred and Plantagenet\n    391.79\n    25.39\n  \n  \n    Algonquin Highlands\n    999.69\n    2.59\n  \n  \n    Alnwick/Haldimand\n    398.25\n    18.76\n  \n  \n    Amaranth\n    265.02\n    16.33"
  },
  {
    "objectID": "reference/vals.fmt_markdown.html",
    "href": "reference/vals.fmt_markdown.html",
    "title": "vals.fmt_markdown",
    "section": "",
    "text": "vals.fmt_markdown(x)\nFormat Markdown text.\nAny Markdown-formatted text can be transformed to HTML when using the fmt_markdown() function."
  },
  {
    "objectID": "reference/vals.fmt_markdown.html#parameters",
    "href": "reference/vals.fmt_markdown.html#parameters",
    "title": "vals.fmt_markdown",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted."
  },
  {
    "objectID": "reference/vals.fmt_markdown.html#returns",
    "href": "reference/vals.fmt_markdown.html#returns",
    "title": "vals.fmt_markdown",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_markdown.html#examples",
    "href": "reference/vals.fmt_markdown.html#examples",
    "title": "vals.fmt_markdown",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\ntext_1 = \"\"\"\n### This is Markdown.\n\nMarkdown‚Äôs syntax is comprised entirely of\npunctuation characters, which punctuation\ncharacters have been carefully chosen so as\nto look like what they mean... assuming\nyou‚Äôve ever used email.\n\"\"\"\n\ntext_2 = \"\"\"\nInfo on Markdown syntax can be found\n[here](https://daringfireball.net/projects/markdown/).\n\"\"\"\n\nvals.fmt_markdown([text_1, text_2])\n\n['&lt;h3&gt;This is Markdown.&lt;/h3&gt;\\n&lt;p&gt;Markdown‚Äôs syntax is comprised entirely of\\npunctuation characters, which punctuation\\ncharacters have been carefully chosen so as\\nto look like what they mean... assuming\\nyou‚Äôve ever used email.',\n 'Info on Markdown syntax can be found\\n&lt;a href=\"https://daringfireball.net/projects/markdown/\"&gt;here&lt;/a&gt;.']"
  },
  {
    "objectID": "reference/vals.fmt_integer.html",
    "href": "reference/vals.fmt_integer.html",
    "title": "vals.fmt_integer",
    "section": "",
    "text": "vals.fmt_integer(\n    x,\n    use_seps=True,\n    accounting=False,\n    scale_by=1,\n    compact=False,\n    pattern='{x}',\n    sep_mark=',',\n    force_sign=False,\n    locale=None,\n)\nFormat values as integers.\nWith numeric values in a list, we can perform number-based formatting so that the input values are always rendered as integer values. The following major options are available:\nWe can have fine control over integer formatting with the following options:"
  },
  {
    "objectID": "reference/vals.fmt_integer.html#parameters",
    "href": "reference/vals.fmt_integer.html#parameters",
    "title": "vals.fmt_integer",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\naccounting : bool = False\n\nAn option to use accounting style for values. Normally, negative values will be shown with a minus sign but using accounting style will instead put any negative values in parentheses.\n\nscale_by : float = 1\n\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n\ncompact : bool = False\n\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1K, and 1230000 becomes 1M). The compact option is False by default.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/vals.fmt_integer.html#returns",
    "href": "reference/vals.fmt_integer.html#returns",
    "title": "vals.fmt_integer",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_integer.html#examples",
    "href": "reference/vals.fmt_integer.html#examples",
    "title": "vals.fmt_integer",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\nvals.fmt_integer([100000.1, 2000000000.2], use_seps=False)\n\n['100000', '2000000000']"
  },
  {
    "objectID": "reference/GT.with_locale.html",
    "href": "reference/GT.with_locale.html",
    "title": "GT.with_locale",
    "section": "",
    "text": "GT.with_locale(self, locale=None)\nSet a column to be the default locale.\nSetting a default locale affects formatters like fmt_number(), and fmt_date(), by having them default to locale-specific features (e.g.¬†representing one thousand as 1.000,00)"
  },
  {
    "objectID": "reference/GT.with_locale.html#parameters",
    "href": "reference/GT.with_locale.html#parameters",
    "title": "GT.with_locale",
    "section": "Parameters",
    "text": "Parameters\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.with_locale.html#returns",
    "href": "reference/GT.with_locale.html#returns",
    "title": "GT.with_locale",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.with_locale.html#examples",
    "href": "reference/GT.with_locale.html#examples",
    "title": "GT.with_locale",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs create a table and set its locale= to \"ja\" for Japan. Then, we call fmt_currency() to format the \"currency\" column. Since we didn‚Äôt specify a locale= for fmt_currency(), it will adopt the globally set \"ja\" locale.\n\nfrom great_tables import GT, exibble\n\n\n(\n    GT(exibble)\n    .with_locale(\"ja\")\n    .fmt_currency(\n        columns=\"currency\",\n        decimals=3,\n        use_seps=False\n    )\n)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    ¬•49.950\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    ¬•17.950\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    ¬•1.390\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    ¬•65100.000\n    row_4\n    grp_a\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    ¬•1325.810\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    ¬•13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    ¬•0.440\n    row_8\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nGreat Tables internally supports many locale options. You can find the available locales in the following table:\n\nfrom great_tables.data import __x_locales\n\ncolumns = [\"locale\", \"lang_name\", \"lang_desc\", \"territory_name\", \"territory_desc\"]\nGT(__x_locales.loc[:, columns]).cols_align(\"right\")\n\n\n\n\n\n\n\n  locale\n  lang_name\n  lang_desc\n  territory_name\n  territory_desc\n\n\n\n  \n    af\n    af\n    Afrikaans\n    ZA\n    South Africa\n  \n  \n    af-NA\n    af\n    Afrikaans\n    \n    Namibia\n  \n  \n    agq\n    agq\n    Aghem\n    CM\n    Cameroon\n  \n  \n    ak\n    ak\n    Akan\n    GH\n    Ghana\n  \n  \n    am\n    am\n    Amharic\n    ET\n    Ethiopia\n  \n  \n    ar\n    ar\n    Arabic\n    001\n    world\n  \n  \n    ar-AE\n    ar\n    Arabic\n    AE\n    United Arab Emirates\n  \n  \n    ar-BH\n    ar\n    Arabic\n    BH\n    Bahrain\n  \n  \n    ar-DJ\n    ar\n    Arabic\n    DJ\n    Djibouti\n  \n  \n    ar-DZ\n    ar\n    Arabic\n    DZ\n    Algeria\n  \n  \n    ar-EG\n    ar\n    Arabic\n    EG\n    Egypt\n  \n  \n    ar-EH\n    ar\n    Arabic\n    EH\n    Western Sahara\n  \n  \n    ar-ER\n    ar\n    Arabic\n    ER\n    Eritrea\n  \n  \n    ar-IL\n    ar\n    Arabic\n    IL\n    Israel\n  \n  \n    ar-IQ\n    ar\n    Arabic\n    IQ\n    Iraq\n  \n  \n    ar-JO\n    ar\n    Arabic\n    JO\n    Jordan\n  \n  \n    ar-KM\n    ar\n    Arabic\n    KM\n    Comoros\n  \n  \n    ar-KW\n    ar\n    Arabic\n    KW\n    Kuwait\n  \n  \n    ar-LB\n    ar\n    Arabic\n    LB\n    Lebanon\n  \n  \n    ar-LY\n    ar\n    Arabic\n    LY\n    Libya\n  \n  \n    ar-MA\n    ar\n    Arabic\n    MA\n    Morocco\n  \n  \n    ar-MR\n    ar\n    Arabic\n    MR\n    Mauritania\n  \n  \n    ar-OM\n    ar\n    Arabic\n    OM\n    Oman\n  \n  \n    ar-PS\n    ar\n    Arabic\n    PS\n    Palestinian Territories\n  \n  \n    ar-QA\n    ar\n    Arabic\n    QA\n    Qatar\n  \n  \n    ar-SA\n    ar\n    Arabic\n    SA\n    Saudi Arabia\n  \n  \n    ar-SD\n    ar\n    Arabic\n    SD\n    Sudan\n  \n  \n    ar-SO\n    ar\n    Arabic\n    SO\n    Somalia\n  \n  \n    ar-SS\n    ar\n    Arabic\n    SS\n    South Sudan\n  \n  \n    ar-SY\n    ar\n    Arabic\n    SY\n    Syria\n  \n  \n    ar-TD\n    ar\n    Arabic\n    TD\n    Chad\n  \n  \n    ar-TN\n    ar\n    Arabic\n    TN\n    Tunisia\n  \n  \n    ar-YE\n    ar\n    Arabic\n    YE\n    Yemen\n  \n  \n    as\n    as\n    Assamese\n    IN\n    India\n  \n  \n    asa\n    asa\n    Asu\n    TZ\n    Tanzania\n  \n  \n    ast\n    ast\n    Asturian\n    ES\n    Spain\n  \n  \n    az\n    az\n    Azerbaijani\n    AZ\n    Azerbaijan\n  \n  \n    az-Cyrl\n    az\n    Azerbaijani\n    AZ\n    Azerbaijan\n  \n  \n    az-Latn\n    az\n    Azerbaijani\n    AZ\n    Azerbaijan\n  \n  \n    bas\n    bas\n    Basaa\n    CM\n    Cameroon\n  \n  \n    be\n    be\n    Belarusian\n    BY\n    Belarus\n  \n  \n    be-tarask\n    be\n    Belarusian\n    BY\n    Belarus\n  \n  \n    bem\n    bem\n    Bemba\n    ZM\n    Zambia\n  \n  \n    bez\n    bez\n    Bena\n    TZ\n    Tanzania\n  \n  \n    bg\n    bg\n    Bulgarian\n    BG\n    Bulgaria\n  \n  \n    bm\n    bm\n    Bambara\n    ML\n    Mali\n  \n  \n    bn\n    bn\n    Bangla\n    BD\n    Bangladesh\n  \n  \n    bn-IN\n    bn\n    Bangla\n    IN\n    India\n  \n  \n    bo\n    bo\n    Tibetan\n    CN\n    China\n  \n  \n    bo-IN\n    bo\n    Tibetan\n    IN\n    India\n  \n  \n    br\n    br\n    Breton\n    FR\n    France\n  \n  \n    brx\n    brx\n    Bodo\n    IN\n    India\n  \n  \n    bs\n    bs\n    Bosnian\n    BA\n    Bosnia & Herzegovina\n  \n  \n    bs-Cyrl\n    bs\n    Bosnian\n    BA\n    Bosnia & Herzegovina\n  \n  \n    bs-Latn\n    bs\n    Bosnian\n    BA\n    Bosnia & Herzegovina\n  \n  \n    ca\n    ca\n    Catalan\n    ES\n    Spain\n  \n  \n    ca-AD\n    ca\n    Catalan\n    AD\n    Andorra\n  \n  \n    ca-ES-valencia\n    ca\n    Catalan\n    ES\n    Spain\n  \n  \n    ca-FR\n    ca\n    Catalan\n    FR\n    France\n  \n  \n    ca-IT\n    ca\n    Catalan\n    IT\n    Italy\n  \n  \n    ccp\n    ccp\n    Chakma\n    BD\n    Bangladesh\n  \n  \n    ccp-IN\n    ccp\n    Chakma\n    IN\n    India\n  \n  \n    ce\n    ce\n    Chechen\n    RU\n    Russia\n  \n  \n    ceb\n    ceb\n    Cebuano\n    PH\n    Philippines\n  \n  \n    cgg\n    cgg\n    Chiga\n    UG\n    Uganda\n  \n  \n    chr\n    chr\n    Cherokee\n    US\n    United States\n  \n  \n    ckb\n    ckb\n    Central Kurdish\n    IQ\n    Iraq\n  \n  \n    ckb-IR\n    ckb\n    Central Kurdish\n    IR\n    Iran\n  \n  \n    cs\n    cs\n    Czech\n    CZ\n    Czechia\n  \n  \n    cy\n    cy\n    Welsh\n    GB\n    United Kingdom\n  \n  \n    da\n    da\n    Danish\n    DK\n    Denmark\n  \n  \n    da-GL\n    da\n    Danish\n    GL\n    Greenland\n  \n  \n    dav\n    dav\n    Taita\n    KE\n    Kenya\n  \n  \n    de\n    de\n    German\n    DE\n    Germany\n  \n  \n    de-AT\n    de\n    German\n    AT\n    Austria\n  \n  \n    de-BE\n    de\n    German\n    BE\n    Belgium\n  \n  \n    de-CH\n    de\n    German\n    CH\n    Switzerland\n  \n  \n    de-IT\n    de\n    German\n    IT\n    Italy\n  \n  \n    de-LI\n    de\n    German\n    LI\n    Liechtenstein\n  \n  \n    de-LU\n    de\n    German\n    LU\n    Luxembourg\n  \n  \n    dje\n    dje\n    Zarma\n    NE\n    Niger\n  \n  \n    doi\n    doi\n    Dogri\n    IN\n    India\n  \n  \n    dsb\n    dsb\n    Lower Sorbian\n    DE\n    Germany\n  \n  \n    dua\n    dua\n    Duala\n    CM\n    Cameroon\n  \n  \n    dyo\n    dyo\n    Jola-Fonyi\n    SN\n    Senegal\n  \n  \n    dz\n    dz\n    Dzongkha\n    BT\n    Bhutan\n  \n  \n    ebu\n    ebu\n    Embu\n    KE\n    Kenya\n  \n  \n    ee\n    ee\n    Ewe\n    GH\n    Ghana\n  \n  \n    ee-TG\n    ee\n    Ewe\n    TG\n    Togo\n  \n  \n    el\n    el\n    Greek\n    GR\n    Greece\n  \n  \n    el-CY\n    el\n    Greek\n    CY\n    Cyprus\n  \n  \n    en\n    en\n    English\n    US\n    United States\n  \n  \n    en-001\n    en\n    English\n    001\n    world\n  \n  \n    en-150\n    en\n    English\n    150\n    Europe\n  \n  \n    en-AE\n    en\n    English\n    AE\n    United Arab Emirates\n  \n  \n    en-AG\n    en\n    English\n    AG\n    Antigua & Barbuda\n  \n  \n    en-AI\n    en\n    English\n    AI\n    Anguilla\n  \n  \n    en-AS\n    en\n    English\n    AS\n    American Samoa\n  \n  \n    en-AT\n    en\n    English\n    AT\n    Austria\n  \n  \n    en-AU\n    en\n    English\n    AU\n    Australia\n  \n  \n    en-BB\n    en\n    English\n    BB\n    Barbados\n  \n  \n    en-BE\n    en\n    English\n    BE\n    Belgium\n  \n  \n    en-BI\n    en\n    English\n    BI\n    Burundi\n  \n  \n    en-BM\n    en\n    English\n    BM\n    Bermuda\n  \n  \n    en-BS\n    en\n    English\n    BS\n    Bahamas\n  \n  \n    en-BW\n    en\n    English\n    BW\n    Botswana\n  \n  \n    en-BZ\n    en\n    English\n    BZ\n    Belize\n  \n  \n    en-CA\n    en\n    English\n    CA\n    Canada\n  \n  \n    en-CC\n    en\n    English\n    CC\n    Cocos (Keeling) Islands\n  \n  \n    en-CH\n    en\n    English\n    CH\n    Switzerland\n  \n  \n    en-CK\n    en\n    English\n    CK\n    Cook Islands\n  \n  \n    en-CM\n    en\n    English\n    CM\n    Cameroon\n  \n  \n    en-CX\n    en\n    English\n    CX\n    Christmas Island\n  \n  \n    en-CY\n    en\n    English\n    CY\n    Cyprus\n  \n  \n    en-DE\n    en\n    English\n    DE\n    Germany\n  \n  \n    en-DG\n    en\n    English\n    DG\n    Diego Garcia\n  \n  \n    en-DK\n    en\n    English\n    DK\n    Denmark\n  \n  \n    en-DM\n    en\n    English\n    DM\n    Dominica\n  \n  \n    en-ER\n    en\n    English\n    ER\n    Eritrea\n  \n  \n    en-FI\n    en\n    English\n    FI\n    Finland\n  \n  \n    en-FJ\n    en\n    English\n    FJ\n    Fiji\n  \n  \n    en-FK\n    en\n    English\n    FK\n    Falkland Islands\n  \n  \n    en-FM\n    en\n    English\n    FM\n    Micronesia\n  \n  \n    en-GB\n    en\n    English\n    GB\n    United Kingdom\n  \n  \n    en-GD\n    en\n    English\n    GD\n    Grenada\n  \n  \n    en-GG\n    en\n    English\n    GG\n    Guernsey\n  \n  \n    en-GH\n    en\n    English\n    GH\n    Ghana\n  \n  \n    en-GI\n    en\n    English\n    GI\n    Gibraltar\n  \n  \n    en-GM\n    en\n    English\n    GM\n    Gambia\n  \n  \n    en-GU\n    en\n    English\n    GU\n    Guam\n  \n  \n    en-GY\n    en\n    English\n    GY\n    Guyana\n  \n  \n    en-HK\n    en\n    English\n    HK\n    Hong Kong SAR China\n  \n  \n    en-IE\n    en\n    English\n    IE\n    Ireland\n  \n  \n    en-IL\n    en\n    English\n    IL\n    Israel\n  \n  \n    en-IM\n    en\n    English\n    IM\n    Isle of Man\n  \n  \n    en-IN\n    en\n    English\n    IN\n    India\n  \n  \n    en-IO\n    en\n    English\n    IO\n    British Indian Ocean Territory\n  \n  \n    en-JE\n    en\n    English\n    JE\n    Jersey\n  \n  \n    en-JM\n    en\n    English\n    JM\n    Jamaica\n  \n  \n    en-KE\n    en\n    English\n    KE\n    Kenya\n  \n  \n    en-KI\n    en\n    English\n    KI\n    Kiribati\n  \n  \n    en-KN\n    en\n    English\n    KN\n    St. Kitts & Nevis\n  \n  \n    en-KY\n    en\n    English\n    KY\n    Cayman Islands\n  \n  \n    en-LC\n    en\n    English\n    LC\n    St. Lucia\n  \n  \n    en-LR\n    en\n    English\n    LR\n    Liberia\n  \n  \n    en-LS\n    en\n    English\n    LS\n    Lesotho\n  \n  \n    en-MG\n    en\n    English\n    MG\n    Madagascar\n  \n  \n    en-MH\n    en\n    English\n    MH\n    Marshall Islands\n  \n  \n    en-MO\n    en\n    English\n    MO\n    Macao SAR China\n  \n  \n    en-MP\n    en\n    English\n    MP\n    Northern Mariana Islands\n  \n  \n    en-MS\n    en\n    English\n    MS\n    Montserrat\n  \n  \n    en-MT\n    en\n    English\n    MT\n    Malta\n  \n  \n    en-MU\n    en\n    English\n    MU\n    Mauritius\n  \n  \n    en-MV\n    en\n    English\n    MV\n    Maldives\n  \n  \n    en-MW\n    en\n    English\n    MW\n    Malawi\n  \n  \n    en-MY\n    en\n    English\n    MY\n    Malaysia\n  \n  \n    en-NA\n    en\n    English\n    \n    Namibia\n  \n  \n    en-NF\n    en\n    English\n    NF\n    Norfolk Island\n  \n  \n    en-NG\n    en\n    English\n    NG\n    Nigeria\n  \n  \n    en-NL\n    en\n    English\n    NL\n    Netherlands\n  \n  \n    en-NR\n    en\n    English\n    NR\n    Nauru\n  \n  \n    en-NU\n    en\n    English\n    NU\n    Niue\n  \n  \n    en-NZ\n    en\n    English\n    NZ\n    New Zealand\n  \n  \n    en-PG\n    en\n    English\n    PG\n    Papua New Guinea\n  \n  \n    en-PH\n    en\n    English\n    PH\n    Philippines\n  \n  \n    en-PK\n    en\n    English\n    PK\n    Pakistan\n  \n  \n    en-PN\n    en\n    English\n    PN\n    Pitcairn Islands\n  \n  \n    en-PR\n    en\n    English\n    PR\n    Puerto Rico\n  \n  \n    en-PW\n    en\n    English\n    PW\n    Palau\n  \n  \n    en-RW\n    en\n    English\n    RW\n    Rwanda\n  \n  \n    en-SB\n    en\n    English\n    SB\n    Solomon Islands\n  \n  \n    en-SC\n    en\n    English\n    SC\n    Seychelles\n  \n  \n    en-SD\n    en\n    English\n    SD\n    Sudan\n  \n  \n    en-SE\n    en\n    English\n    SE\n    Sweden\n  \n  \n    en-SG\n    en\n    English\n    SG\n    Singapore\n  \n  \n    en-SH\n    en\n    English\n    SH\n    St. Helena\n  \n  \n    en-SI\n    en\n    English\n    SI\n    Slovenia\n  \n  \n    en-SL\n    en\n    English\n    SL\n    Sierra Leone\n  \n  \n    en-SS\n    en\n    English\n    SS\n    South Sudan\n  \n  \n    en-SX\n    en\n    English\n    SX\n    Sint Maarten\n  \n  \n    en-SZ\n    en\n    English\n    SZ\n    Eswatini\n  \n  \n    en-TC\n    en\n    English\n    TC\n    Turks & Caicos Islands\n  \n  \n    en-TK\n    en\n    English\n    TK\n    Tokelau\n  \n  \n    en-TO\n    en\n    English\n    TO\n    Tonga\n  \n  \n    en-TT\n    en\n    English\n    TT\n    Trinidad & Tobago\n  \n  \n    en-TV\n    en\n    English\n    TV\n    Tuvalu\n  \n  \n    en-TZ\n    en\n    English\n    TZ\n    Tanzania\n  \n  \n    en-UG\n    en\n    English\n    UG\n    Uganda\n  \n  \n    en-UM\n    en\n    English\n    UM\n    U.S. Outlying Islands\n  \n  \n    en-VC\n    en\n    English\n    VC\n    St. Vincent & Grenadines\n  \n  \n    en-VG\n    en\n    English\n    VG\n    British Virgin Islands\n  \n  \n    en-VI\n    en\n    English\n    VI\n    U.S. Virgin Islands\n  \n  \n    en-VU\n    en\n    English\n    VU\n    Vanuatu\n  \n  \n    en-WS\n    en\n    English\n    WS\n    Samoa\n  \n  \n    en-ZA\n    en\n    English\n    ZA\n    South Africa\n  \n  \n    en-ZM\n    en\n    English\n    ZM\n    Zambia\n  \n  \n    en-ZW\n    en\n    English\n    ZW\n    Zimbabwe\n  \n  \n    eo\n    eo\n    Esperanto\n    001\n    world\n  \n  \n    es\n    es\n    Spanish\n    ES\n    Spain\n  \n  \n    es-419\n    es\n    Spanish\n    419\n    Latin America\n  \n  \n    es-AR\n    es\n    Spanish\n    AR\n    Argentina\n  \n  \n    es-BO\n    es\n    Spanish\n    BO\n    Bolivia\n  \n  \n    es-BR\n    es\n    Spanish\n    BR\n    Brazil\n  \n  \n    es-BZ\n    es\n    Spanish\n    BZ\n    Belize\n  \n  \n    es-CL\n    es\n    Spanish\n    CL\n    Chile\n  \n  \n    es-CO\n    es\n    Spanish\n    CO\n    Colombia\n  \n  \n    es-CR\n    es\n    Spanish\n    CR\n    Costa Rica\n  \n  \n    es-CU\n    es\n    Spanish\n    CU\n    Cuba\n  \n  \n    es-DO\n    es\n    Spanish\n    DO\n    Dominican Republic\n  \n  \n    es-EA\n    es\n    Spanish\n    EA\n    Ceuta & Melilla\n  \n  \n    es-EC\n    es\n    Spanish\n    EC\n    Ecuador\n  \n  \n    es-GQ\n    es\n    Spanish\n    GQ\n    Equatorial Guinea\n  \n  \n    es-GT\n    es\n    Spanish\n    GT\n    Guatemala\n  \n  \n    es-HN\n    es\n    Spanish\n    HN\n    Honduras\n  \n  \n    es-IC\n    es\n    Spanish\n    IC\n    Canary Islands\n  \n  \n    es-MX\n    es\n    Spanish\n    MX\n    Mexico\n  \n  \n    es-NI\n    es\n    Spanish\n    NI\n    Nicaragua\n  \n  \n    es-PA\n    es\n    Spanish\n    PA\n    Panama\n  \n  \n    es-PE\n    es\n    Spanish\n    PE\n    Peru\n  \n  \n    es-PH\n    es\n    Spanish\n    PH\n    Philippines\n  \n  \n    es-PR\n    es\n    Spanish\n    PR\n    Puerto Rico\n  \n  \n    es-PY\n    es\n    Spanish\n    PY\n    Paraguay\n  \n  \n    es-SV\n    es\n    Spanish\n    SV\n    El Salvador\n  \n  \n    es-US\n    es\n    Spanish\n    US\n    United States\n  \n  \n    es-UY\n    es\n    Spanish\n    UY\n    Uruguay\n  \n  \n    es-VE\n    es\n    Spanish\n    VE\n    Venezuela\n  \n  \n    et\n    et\n    Estonian\n    EE\n    Estonia\n  \n  \n    eu\n    eu\n    Basque\n    ES\n    Spain\n  \n  \n    ewo\n    ewo\n    Ewondo\n    CM\n    Cameroon\n  \n  \n    fa\n    fa\n    Persian\n    IR\n    Iran\n  \n  \n    fa-AF\n    fa\n    Persian\n    AF\n    Afghanistan\n  \n  \n    ff\n    ff\n    Fulah\n    GN\n    Guinea\n  \n  \n    ff-Adlm\n    ff\n    Fulah\n    GN\n    Guinea\n  \n  \n    ff-Adlm-BF\n    ff\n    Fulah\n    BF\n    Burkina Faso\n  \n  \n    ff-Adlm-CM\n    ff\n    Fulah\n    CM\n    Cameroon\n  \n  \n    ff-Adlm-GH\n    ff\n    Fulah\n    GH\n    Ghana\n  \n  \n    ff-Adlm-GM\n    ff\n    Fulah\n    GM\n    Gambia\n  \n  \n    ff-Adlm-GW\n    ff\n    Fulah\n    GW\n    Guinea-Bissau\n  \n  \n    ff-Adlm-LR\n    ff\n    Fulah\n    LR\n    Liberia\n  \n  \n    ff-Adlm-MR\n    ff\n    Fulah\n    MR\n    Mauritania\n  \n  \n    ff-Adlm-NE\n    ff\n    Fulah\n    NE\n    Niger\n  \n  \n    ff-Adlm-NG\n    ff\n    Fulah\n    NG\n    Nigeria\n  \n  \n    ff-Adlm-SL\n    ff\n    Fulah\n    SL\n    Sierra Leone\n  \n  \n    ff-Adlm-SN\n    ff\n    Fulah\n    SN\n    Senegal\n  \n  \n    ff-Latn\n    ff\n    Fulah\n    SN\n    Senegal\n  \n  \n    ff-Latn-BF\n    ff\n    Fulah\n    BF\n    Burkina Faso\n  \n  \n    ff-Latn-CM\n    ff\n    Fulah\n    CM\n    Cameroon\n  \n  \n    ff-Latn-GH\n    ff\n    Fulah\n    GH\n    Ghana\n  \n  \n    ff-Latn-GM\n    ff\n    Fulah\n    GM\n    Gambia\n  \n  \n    ff-Latn-GN\n    ff\n    Fulah\n    GN\n    Guinea\n  \n  \n    ff-Latn-GW\n    ff\n    Fulah\n    GW\n    Guinea-Bissau\n  \n  \n    ff-Latn-LR\n    ff\n    Fulah\n    LR\n    Liberia\n  \n  \n    ff-Latn-MR\n    ff\n    Fulah\n    MR\n    Mauritania\n  \n  \n    ff-Latn-NE\n    ff\n    Fulah\n    NE\n    Niger\n  \n  \n    ff-Latn-NG\n    ff\n    Fulah\n    NG\n    Nigeria\n  \n  \n    ff-Latn-SL\n    ff\n    Fulah\n    SL\n    Sierra Leone\n  \n  \n    fi\n    fi\n    Finnish\n    FI\n    Finland\n  \n  \n    fil\n    fil\n    Filipino\n    PH\n    Philippines\n  \n  \n    fo\n    fo\n    Faroese\n    FO\n    Faroe Islands\n  \n  \n    fo-DK\n    fo\n    Faroese\n    DK\n    Denmark\n  \n  \n    fr\n    fr\n    French\n    FR\n    France\n  \n  \n    fr-BE\n    fr\n    French\n    BE\n    Belgium\n  \n  \n    fr-BF\n    fr\n    French\n    BF\n    Burkina Faso\n  \n  \n    fr-BI\n    fr\n    French\n    BI\n    Burundi\n  \n  \n    fr-BJ\n    fr\n    French\n    BJ\n    Benin\n  \n  \n    fr-BL\n    fr\n    French\n    BL\n    St. Barth√©lemy\n  \n  \n    fr-CA\n    fr\n    French\n    CA\n    Canada\n  \n  \n    fr-CD\n    fr\n    French\n    CD\n    Congo - Kinshasa\n  \n  \n    fr-CF\n    fr\n    French\n    CF\n    Central African Republic\n  \n  \n    fr-CG\n    fr\n    French\n    CG\n    Congo - Brazzaville\n  \n  \n    fr-CH\n    fr\n    French\n    CH\n    Switzerland\n  \n  \n    fr-CI\n    fr\n    French\n    CI\n    C√¥te d‚ÄôIvoire\n  \n  \n    fr-CM\n    fr\n    French\n    CM\n    Cameroon\n  \n  \n    fr-DJ\n    fr\n    French\n    DJ\n    Djibouti\n  \n  \n    fr-DZ\n    fr\n    French\n    DZ\n    Algeria\n  \n  \n    fr-GA\n    fr\n    French\n    GA\n    Gabon\n  \n  \n    fr-GF\n    fr\n    French\n    GF\n    French Guiana\n  \n  \n    fr-GN\n    fr\n    French\n    GN\n    Guinea\n  \n  \n    fr-GP\n    fr\n    French\n    GP\n    Guadeloupe\n  \n  \n    fr-GQ\n    fr\n    French\n    GQ\n    Equatorial Guinea\n  \n  \n    fr-HT\n    fr\n    French\n    HT\n    Haiti\n  \n  \n    fr-KM\n    fr\n    French\n    KM\n    Comoros\n  \n  \n    fr-LU\n    fr\n    French\n    LU\n    Luxembourg\n  \n  \n    fr-MA\n    fr\n    French\n    MA\n    Morocco\n  \n  \n    fr-MC\n    fr\n    French\n    MC\n    Monaco\n  \n  \n    fr-MF\n    fr\n    French\n    MF\n    St. Martin\n  \n  \n    fr-MG\n    fr\n    French\n    MG\n    Madagascar\n  \n  \n    fr-ML\n    fr\n    French\n    ML\n    Mali\n  \n  \n    fr-MQ\n    fr\n    French\n    MQ\n    Martinique\n  \n  \n    fr-MR\n    fr\n    French\n    MR\n    Mauritania\n  \n  \n    fr-MU\n    fr\n    French\n    MU\n    Mauritius\n  \n  \n    fr-NC\n    fr\n    French\n    NC\n    New Caledonia\n  \n  \n    fr-NE\n    fr\n    French\n    NE\n    Niger\n  \n  \n    fr-PF\n    fr\n    French\n    PF\n    French Polynesia\n  \n  \n    fr-PM\n    fr\n    French\n    PM\n    St. Pierre & Miquelon\n  \n  \n    fr-RE\n    fr\n    French\n    RE\n    R√©union\n  \n  \n    fr-RW\n    fr\n    French\n    RW\n    Rwanda\n  \n  \n    fr-SC\n    fr\n    French\n    SC\n    Seychelles\n  \n  \n    fr-SN\n    fr\n    French\n    SN\n    Senegal\n  \n  \n    fr-SY\n    fr\n    French\n    SY\n    Syria\n  \n  \n    fr-TD\n    fr\n    French\n    TD\n    Chad\n  \n  \n    fr-TG\n    fr\n    French\n    TG\n    Togo\n  \n  \n    fr-TN\n    fr\n    French\n    TN\n    Tunisia\n  \n  \n    fr-VU\n    fr\n    French\n    VU\n    Vanuatu\n  \n  \n    fr-WF\n    fr\n    French\n    WF\n    Wallis & Futuna\n  \n  \n    fr-YT\n    fr\n    French\n    YT\n    Mayotte\n  \n  \n    fur\n    fur\n    Friulian\n    IT\n    Italy\n  \n  \n    fy\n    fy\n    Western Frisian\n    NL\n    Netherlands\n  \n  \n    ga\n    ga\n    Irish\n    IE\n    Ireland\n  \n  \n    ga-GB\n    ga\n    Irish\n    GB\n    United Kingdom\n  \n  \n    gd\n    gd\n    Scottish Gaelic\n    GB\n    United Kingdom\n  \n  \n    gl\n    gl\n    Galician\n    ES\n    Spain\n  \n  \n    gsw\n    gsw\n    Swiss German\n    CH\n    Switzerland\n  \n  \n    gsw-FR\n    gsw\n    Swiss German\n    FR\n    France\n  \n  \n    gsw-LI\n    gsw\n    Swiss German\n    LI\n    Liechtenstein\n  \n  \n    gu\n    gu\n    Gujarati\n    IN\n    India\n  \n  \n    guz\n    guz\n    Gusii\n    KE\n    Kenya\n  \n  \n    gv\n    gv\n    Manx\n    IM\n    Isle of Man\n  \n  \n    ha\n    ha\n    Hausa\n    NG\n    Nigeria\n  \n  \n    ha-GH\n    ha\n    Hausa\n    GH\n    Ghana\n  \n  \n    ha-NE\n    ha\n    Hausa\n    NE\n    Niger\n  \n  \n    haw\n    haw\n    Hawaiian\n    US\n    United States\n  \n  \n    he\n    he\n    Hebrew\n    IL\n    Israel\n  \n  \n    hi\n    hi\n    Hindi\n    IN\n    India\n  \n  \n    hi-Latn\n    hi\n    Hindi\n    IN\n    India\n  \n  \n    hr\n    hr\n    Croatian\n    HR\n    Croatia\n  \n  \n    hr-BA\n    hr\n    Croatian\n    BA\n    Bosnia & Herzegovina\n  \n  \n    hsb\n    hsb\n    Upper Sorbian\n    DE\n    Germany\n  \n  \n    hu\n    hu\n    Hungarian\n    HU\n    Hungary\n  \n  \n    hy\n    hy\n    Armenian\n    AM\n    Armenia\n  \n  \n    ia\n    ia\n    Interlingua\n    001\n    world\n  \n  \n    id\n    id\n    Indonesian\n    ID\n    Indonesia\n  \n  \n    ig\n    ig\n    Igbo\n    NG\n    Nigeria\n  \n  \n    ii\n    ii\n    Sichuan Yi\n    CN\n    China\n  \n  \n    is\n    is\n    Icelandic\n    IS\n    Iceland\n  \n  \n    it\n    it\n    Italian\n    IT\n    Italy\n  \n  \n    it-CH\n    it\n    Italian\n    CH\n    Switzerland\n  \n  \n    it-SM\n    it\n    Italian\n    SM\n    San Marino\n  \n  \n    it-VA\n    it\n    Italian\n    VA\n    Vatican City\n  \n  \n    ja\n    ja\n    Japanese\n    JP\n    Japan\n  \n  \n    jgo\n    jgo\n    Ngomba\n    CM\n    Cameroon\n  \n  \n    jmc\n    jmc\n    Machame\n    TZ\n    Tanzania\n  \n  \n    jv\n    jv\n    Javanese\n    ID\n    Indonesia\n  \n  \n    ka\n    ka\n    Georgian\n    GE\n    Georgia\n  \n  \n    kab\n    kab\n    Kabyle\n    DZ\n    Algeria\n  \n  \n    kam\n    kam\n    Kamba\n    KE\n    Kenya\n  \n  \n    kde\n    kde\n    Makonde\n    TZ\n    Tanzania\n  \n  \n    kea\n    kea\n    Kabuverdianu\n    CV\n    Cape Verde\n  \n  \n    kgp\n    kgp\n    Kaingang\n    BR\n    Brazil\n  \n  \n    khq\n    khq\n    Koyra Chiini\n    ML\n    Mali\n  \n  \n    ki\n    ki\n    Kikuyu\n    KE\n    Kenya\n  \n  \n    kk\n    kk\n    Kazakh\n    KZ\n    Kazakhstan\n  \n  \n    kkj\n    kkj\n    Kako\n    CM\n    Cameroon\n  \n  \n    kl\n    kl\n    Kalaallisut\n    GL\n    Greenland\n  \n  \n    kln\n    kln\n    Kalenjin\n    KE\n    Kenya\n  \n  \n    km\n    km\n    Khmer\n    KH\n    Cambodia\n  \n  \n    kn\n    kn\n    Kannada\n    IN\n    India\n  \n  \n    ko\n    ko\n    Korean\n    KR\n    South Korea\n  \n  \n    ko-KP\n    ko\n    Korean\n    KP\n    North Korea\n  \n  \n    kok\n    kok\n    Konkani\n    IN\n    India\n  \n  \n    ks\n    ks\n    Kashmiri\n    IN\n    India\n  \n  \n    ks-Arab\n    ks\n    Kashmiri\n    IN\n    India\n  \n  \n    ks-Deva\n    ks\n    Kashmiri\n    IN\n    India\n  \n  \n    ksb\n    ksb\n    Shambala\n    TZ\n    Tanzania\n  \n  \n    ksf\n    ksf\n    Bafia\n    CM\n    Cameroon\n  \n  \n    ksh\n    ksh\n    Colognian\n    DE\n    Germany\n  \n  \n    ku\n    ku\n    Kurdish\n    TR\n    Turkey\n  \n  \n    kw\n    kw\n    Cornish\n    GB\n    United Kingdom\n  \n  \n    ky\n    ky\n    Kyrgyz\n    KG\n    Kyrgyzstan\n  \n  \n    lag\n    lag\n    Langi\n    TZ\n    Tanzania\n  \n  \n    lb\n    lb\n    Luxembourgish\n    LU\n    Luxembourg\n  \n  \n    lg\n    lg\n    Ganda\n    UG\n    Uganda\n  \n  \n    lkt\n    lkt\n    Lakota\n    US\n    United States\n  \n  \n    ln\n    ln\n    Lingala\n    CD\n    Congo - Kinshasa\n  \n  \n    ln-AO\n    ln\n    Lingala\n    AO\n    Angola\n  \n  \n    ln-CF\n    ln\n    Lingala\n    CF\n    Central African Republic\n  \n  \n    ln-CG\n    ln\n    Lingala\n    CG\n    Congo - Brazzaville\n  \n  \n    lo\n    lo\n    Lao\n    LA\n    Laos\n  \n  \n    lrc\n    lrc\n    Northern Luri\n    IR\n    Iran\n  \n  \n    lrc-IQ\n    lrc\n    Northern Luri\n    IQ\n    Iraq\n  \n  \n    lt\n    lt\n    Lithuanian\n    LT\n    Lithuania\n  \n  \n    lu\n    lu\n    Luba-Katanga\n    CD\n    Congo - Kinshasa\n  \n  \n    luo\n    luo\n    Luo\n    KE\n    Kenya\n  \n  \n    luy\n    luy\n    Luyia\n    KE\n    Kenya\n  \n  \n    lv\n    lv\n    Latvian\n    LV\n    Latvia\n  \n  \n    mai\n    mai\n    Maithili\n    IN\n    India\n  \n  \n    mas\n    mas\n    Masai\n    KE\n    Kenya\n  \n  \n    mas-TZ\n    mas\n    Masai\n    TZ\n    Tanzania\n  \n  \n    mer\n    mer\n    Meru\n    KE\n    Kenya\n  \n  \n    mfe\n    mfe\n    Morisyen\n    MU\n    Mauritius\n  \n  \n    mg\n    mg\n    Malagasy\n    MG\n    Madagascar\n  \n  \n    mgh\n    mgh\n    Makhuwa-Meetto\n    MZ\n    Mozambique\n  \n  \n    mgo\n    mgo\n    Meta º\n    CM\n    Cameroon\n  \n  \n    mi\n    mi\n    MƒÅori\n    NZ\n    New Zealand\n  \n  \n    mk\n    mk\n    Macedonian\n    MK\n    North Macedonia\n  \n  \n    ml\n    ml\n    Malayalam\n    IN\n    India\n  \n  \n    mn\n    mn\n    Mongolian\n    MN\n    Mongolia\n  \n  \n    mni\n    mni\n    Manipuri\n    IN\n    India\n  \n  \n    mni-Beng\n    mni\n    Manipuri\n    IN\n    India\n  \n  \n    mr\n    mr\n    Marathi\n    IN\n    India\n  \n  \n    ms\n    ms\n    Malay\n    MY\n    Malaysia\n  \n  \n    ms-BN\n    ms\n    Malay\n    BN\n    Brunei\n  \n  \n    ms-ID\n    ms\n    Malay\n    ID\n    Indonesia\n  \n  \n    ms-SG\n    ms\n    Malay\n    SG\n    Singapore\n  \n  \n    mt\n    mt\n    Maltese\n    MT\n    Malta\n  \n  \n    mua\n    mua\n    Mundang\n    CM\n    Cameroon\n  \n  \n    my\n    my\n    Burmese\n    MM\n    Myanmar (Burma)\n  \n  \n    mzn\n    mzn\n    Mazanderani\n    IR\n    Iran\n  \n  \n    naq\n    naq\n    Nama\n    \n    Namibia\n  \n  \n    nb\n    nb\n    Norwegian Bokm√•l\n    NO\n    Norway\n  \n  \n    nb-SJ\n    nb\n    Norwegian Bokm√•l\n    SJ\n    Svalbard & Jan Mayen\n  \n  \n    nd\n    nd\n    North Ndebele\n    ZW\n    Zimbabwe\n  \n  \n    nds\n    nds\n    Low German\n    DE\n    Germany\n  \n  \n    nds-NL\n    nds\n    Low German\n    NL\n    Netherlands\n  \n  \n    ne\n    ne\n    Nepali\n    NP\n    Nepal\n  \n  \n    ne-IN\n    ne\n    Nepali\n    IN\n    India\n  \n  \n    nl\n    nl\n    Dutch\n    NL\n    Netherlands\n  \n  \n    nl-AW\n    nl\n    Dutch\n    AW\n    Aruba\n  \n  \n    nl-BE\n    nl\n    Dutch\n    BE\n    Belgium\n  \n  \n    nl-BQ\n    nl\n    Dutch\n    BQ\n    Caribbean Netherlands\n  \n  \n    nl-CW\n    nl\n    Dutch\n    CW\n    Cura√ßao\n  \n  \n    nl-SR\n    nl\n    Dutch\n    SR\n    Suriname\n  \n  \n    nl-SX\n    nl\n    Dutch\n    SX\n    Sint Maarten\n  \n  \n    nmg\n    nmg\n    Kwasio\n    CM\n    Cameroon\n  \n  \n    nn\n    nn\n    Norwegian Nynorsk\n    NO\n    Norway\n  \n  \n    nnh\n    nnh\n    Ngiemboon\n    CM\n    Cameroon\n  \n  \n    no\n    no\n    Norwegian\n    NO\n    Norway\n  \n  \n    nus\n    nus\n    Nuer\n    SS\n    South Sudan\n  \n  \n    nyn\n    nyn\n    Nyankole\n    UG\n    Uganda\n  \n  \n    om\n    om\n    Oromo\n    ET\n    Ethiopia\n  \n  \n    om-KE\n    om\n    Oromo\n    KE\n    Kenya\n  \n  \n    or\n    or\n    Odia\n    IN\n    India\n  \n  \n    os\n    os\n    Ossetic\n    GE\n    Georgia\n  \n  \n    os-RU\n    os\n    Ossetic\n    RU\n    Russia\n  \n  \n    pa\n    pa\n    Punjabi\n    PK\n    Pakistan\n  \n  \n    pa-Arab\n    pa\n    Punjabi\n    PK\n    Pakistan\n  \n  \n    pa-Guru\n    pa\n    Punjabi\n    IN\n    India\n  \n  \n    pcm\n    pcm\n    Nigerian Pidgin\n    NG\n    Nigeria\n  \n  \n    pl\n    pl\n    Polish\n    PL\n    Poland\n  \n  \n    ps\n    ps\n    Pashto\n    AF\n    Afghanistan\n  \n  \n    ps-PK\n    ps\n    Pashto\n    PK\n    Pakistan\n  \n  \n    pt\n    pt\n    Portuguese\n    BR\n    Brazil\n  \n  \n    pt-AO\n    pt\n    Portuguese\n    AO\n    Angola\n  \n  \n    pt-CH\n    pt\n    Portuguese\n    CH\n    Switzerland\n  \n  \n    pt-CV\n    pt\n    Portuguese\n    CV\n    Cape Verde\n  \n  \n    pt-GQ\n    pt\n    Portuguese\n    GQ\n    Equatorial Guinea\n  \n  \n    pt-GW\n    pt\n    Portuguese\n    GW\n    Guinea-Bissau\n  \n  \n    pt-LU\n    pt\n    Portuguese\n    LU\n    Luxembourg\n  \n  \n    pt-MO\n    pt\n    Portuguese\n    MO\n    Macao SAR China\n  \n  \n    pt-MZ\n    pt\n    Portuguese\n    MZ\n    Mozambique\n  \n  \n    pt-PT\n    pt\n    Portuguese\n    PT\n    Portugal\n  \n  \n    pt-ST\n    pt\n    Portuguese\n    ST\n    S√£o Tom√© & Pr√≠ncipe\n  \n  \n    pt-TL\n    pt\n    Portuguese\n    TL\n    Timor-Leste\n  \n  \n    qu\n    qu\n    Quechua\n    PE\n    Peru\n  \n  \n    qu-BO\n    qu\n    Quechua\n    BO\n    Bolivia\n  \n  \n    qu-EC\n    qu\n    Quechua\n    EC\n    Ecuador\n  \n  \n    rm\n    rm\n    Romansh\n    CH\n    Switzerland\n  \n  \n    rn\n    rn\n    Rundi\n    BI\n    Burundi\n  \n  \n    ro\n    ro\n    Romanian\n    RO\n    Romania\n  \n  \n    ro-MD\n    ro\n    Romanian\n    MD\n    Moldova\n  \n  \n    rof\n    rof\n    Rombo\n    TZ\n    Tanzania\n  \n  \n    ru\n    ru\n    Russian\n    RU\n    Russia\n  \n  \n    ru-BY\n    ru\n    Russian\n    BY\n    Belarus\n  \n  \n    ru-KG\n    ru\n    Russian\n    KG\n    Kyrgyzstan\n  \n  \n    ru-KZ\n    ru\n    Russian\n    KZ\n    Kazakhstan\n  \n  \n    ru-MD\n    ru\n    Russian\n    MD\n    Moldova\n  \n  \n    ru-UA\n    ru\n    Russian\n    UA\n    Ukraine\n  \n  \n    rw\n    rw\n    Kinyarwanda\n    RW\n    Rwanda\n  \n  \n    rwk\n    rwk\n    Rwa\n    TZ\n    Tanzania\n  \n  \n    sa\n    sa\n    Sanskrit\n    IN\n    India\n  \n  \n    sah\n    sah\n    Sakha\n    RU\n    Russia\n  \n  \n    saq\n    saq\n    Samburu\n    KE\n    Kenya\n  \n  \n    sat\n    sat\n    Santali\n    IN\n    India\n  \n  \n    sat-Olck\n    sat\n    Santali\n    IN\n    India\n  \n  \n    sbp\n    sbp\n    Sangu\n    TZ\n    Tanzania\n  \n  \n    sc\n    sc\n    Sardinian\n    IT\n    Italy\n  \n  \n    sd\n    sd\n    Sindhi\n    PK\n    Pakistan\n  \n  \n    sd-Arab\n    sd\n    Sindhi\n    PK\n    Pakistan\n  \n  \n    sd-Deva\n    sd\n    Sindhi\n    IN\n    India\n  \n  \n    se\n    se\n    Northern Sami\n    NO\n    Norway\n  \n  \n    se-FI\n    se\n    Northern Sami\n    FI\n    Finland\n  \n  \n    se-SE\n    se\n    Northern Sami\n    SE\n    Sweden\n  \n  \n    seh\n    seh\n    Sena\n    MZ\n    Mozambique\n  \n  \n    ses\n    ses\n    Koyraboro Senni\n    ML\n    Mali\n  \n  \n    sg\n    sg\n    Sango\n    CF\n    Central African Republic\n  \n  \n    shi\n    shi\n    Tachelhit\n    MA\n    Morocco\n  \n  \n    shi-Latn\n    shi\n    Tachelhit\n    MA\n    Morocco\n  \n  \n    shi-Tfng\n    shi\n    Tachelhit\n    MA\n    Morocco\n  \n  \n    si\n    si\n    Sinhala\n    LK\n    Sri Lanka\n  \n  \n    sk\n    sk\n    Slovak\n    SK\n    Slovakia\n  \n  \n    sl\n    sl\n    Slovenian\n    SI\n    Slovenia\n  \n  \n    smn\n    smn\n    Inari Sami\n    FI\n    Finland\n  \n  \n    sn\n    sn\n    Shona\n    ZW\n    Zimbabwe\n  \n  \n    so\n    so\n    Somali\n    SO\n    Somalia\n  \n  \n    so-DJ\n    so\n    Somali\n    DJ\n    Djibouti\n  \n  \n    so-ET\n    so\n    Somali\n    ET\n    Ethiopia\n  \n  \n    so-KE\n    so\n    Somali\n    KE\n    Kenya\n  \n  \n    sq\n    sq\n    Albanian\n    AL\n    Albania\n  \n  \n    sq-MK\n    sq\n    Albanian\n    MK\n    North Macedonia\n  \n  \n    sq-XK\n    sq\n    Albanian\n    XK\n    Kosovo\n  \n  \n    sr\n    sr\n    Serbian\n    RS\n    Serbia\n  \n  \n    sr-Cyrl\n    sr\n    Serbian\n    RS\n    Serbia\n  \n  \n    sr-Cyrl-BA\n    sr\n    Serbian\n    BA\n    Bosnia & Herzegovina\n  \n  \n    sr-Cyrl-ME\n    sr\n    Serbian\n    ME\n    Montenegro\n  \n  \n    sr-Cyrl-XK\n    sr\n    Serbian\n    XK\n    Kosovo\n  \n  \n    sr-Latn\n    sr\n    Serbian\n    RS\n    Serbia\n  \n  \n    sr-Latn-BA\n    sr\n    Serbian\n    BA\n    Bosnia & Herzegovina\n  \n  \n    sr-Latn-ME\n    sr\n    Serbian\n    ME\n    Montenegro\n  \n  \n    sr-Latn-XK\n    sr\n    Serbian\n    XK\n    Kosovo\n  \n  \n    su\n    su\n    Sundanese\n    ID\n    Indonesia\n  \n  \n    su-Latn\n    su\n    Sundanese\n    ID\n    Indonesia\n  \n  \n    sv\n    sv\n    Swedish\n    SE\n    Sweden\n  \n  \n    sv-AX\n    sv\n    Swedish\n    AX\n    √Öland Islands\n  \n  \n    sv-FI\n    sv\n    Swedish\n    FI\n    Finland\n  \n  \n    sw\n    sw\n    Swahili\n    TZ\n    Tanzania\n  \n  \n    sw-CD\n    sw\n    Swahili\n    CD\n    Congo - Kinshasa\n  \n  \n    sw-KE\n    sw\n    Swahili\n    KE\n    Kenya\n  \n  \n    sw-UG\n    sw\n    Swahili\n    UG\n    Uganda\n  \n  \n    ta\n    ta\n    Tamil\n    IN\n    India\n  \n  \n    ta-LK\n    ta\n    Tamil\n    LK\n    Sri Lanka\n  \n  \n    ta-MY\n    ta\n    Tamil\n    MY\n    Malaysia\n  \n  \n    ta-SG\n    ta\n    Tamil\n    SG\n    Singapore\n  \n  \n    te\n    te\n    Telugu\n    IN\n    India\n  \n  \n    teo\n    teo\n    Teso\n    UG\n    Uganda\n  \n  \n    teo-KE\n    teo\n    Teso\n    KE\n    Kenya\n  \n  \n    tg\n    tg\n    Tajik\n    TJ\n    Tajikistan\n  \n  \n    th\n    th\n    Thai\n    TH\n    Thailand\n  \n  \n    ti\n    ti\n    Tigrinya\n    ET\n    Ethiopia\n  \n  \n    ti-ER\n    ti\n    Tigrinya\n    ER\n    Eritrea\n  \n  \n    tk\n    tk\n    Turkmen\n    TM\n    Turkmenistan\n  \n  \n    to\n    to\n    Tongan\n    TO\n    Tonga\n  \n  \n    tr\n    tr\n    Turkish\n    TR\n    Turkey\n  \n  \n    tr-CY\n    tr\n    Turkish\n    CY\n    Cyprus\n  \n  \n    tt\n    tt\n    Tatar\n    RU\n    Russia\n  \n  \n    twq\n    twq\n    Tasawaq\n    NE\n    Niger\n  \n  \n    tzm\n    tzm\n    Central Atlas Tamazight\n    MA\n    Morocco\n  \n  \n    ug\n    ug\n    Uyghur\n    CN\n    China\n  \n  \n    uk\n    uk\n    Ukrainian\n    UA\n    Ukraine\n  \n  \n    und\n    und\n    Unknown language\n    \n    \n  \n  \n    ur\n    ur\n    Urdu\n    PK\n    Pakistan\n  \n  \n    ur-IN\n    ur\n    Urdu\n    IN\n    India\n  \n  \n    uz\n    uz\n    Uzbek\n    AF\n    Afghanistan\n  \n  \n    uz-Arab\n    uz\n    Uzbek\n    AF\n    Afghanistan\n  \n  \n    uz-Cyrl\n    uz\n    Uzbek\n    UZ\n    Uzbekistan\n  \n  \n    uz-Latn\n    uz\n    Uzbek\n    UZ\n    Uzbekistan\n  \n  \n    vai\n    vai\n    Vai\n    LR\n    Liberia\n  \n  \n    vai-Latn\n    vai\n    Vai\n    LR\n    Liberia\n  \n  \n    vai-Vaii\n    vai\n    Vai\n    LR\n    Liberia\n  \n  \n    vi\n    vi\n    Vietnamese\n    VN\n    Vietnam\n  \n  \n    vun\n    vun\n    Vunjo\n    TZ\n    Tanzania\n  \n  \n    wae\n    wae\n    Walser\n    CH\n    Switzerland\n  \n  \n    wo\n    wo\n    Wolof\n    SN\n    Senegal\n  \n  \n    xh\n    xh\n    Xhosa\n    ZA\n    South Africa\n  \n  \n    xog\n    xog\n    Soga\n    UG\n    Uganda\n  \n  \n    yav\n    yav\n    Yangben\n    CM\n    Cameroon\n  \n  \n    yi\n    yi\n    Yiddish\n    001\n    world\n  \n  \n    yo\n    yo\n    Yoruba\n    NG\n    Nigeria\n  \n  \n    yo-BJ\n    yo\n    Yoruba\n    BJ\n    Benin\n  \n  \n    yrl\n    yrl\n    Nheengatu\n    BR\n    Brazil\n  \n  \n    yrl-CO\n    yrl\n    Nheengatu\n    CO\n    Colombia\n  \n  \n    yrl-VE\n    yrl\n    Nheengatu\n    VE\n    Venezuela\n  \n  \n    yue\n    yue\n    Cantonese\n    CN\n    China\n  \n  \n    yue-Hans\n    yue\n    Cantonese\n    CN\n    China\n  \n  \n    yue-Hant\n    yue\n    Cantonese\n    HK\n    Hong Kong SAR China\n  \n  \n    zgh\n    zgh\n    Standard Moroccan Tamazight\n    MA\n    Morocco\n  \n  \n    zh\n    zh\n    Chinese\n    CN\n    China\n  \n  \n    zh-Hans\n    zh\n    Chinese\n    CN\n    China\n  \n  \n    zh-Hans-HK\n    zh\n    Chinese\n    HK\n    Hong Kong SAR China\n  \n  \n    zh-Hans-MO\n    zh\n    Chinese\n    MO\n    Macao SAR China\n  \n  \n    zh-Hans-SG\n    zh\n    Chinese\n    SG\n    Singapore\n  \n  \n    zh-Hant\n    zh\n    Chinese\n    TW\n    Taiwan\n  \n  \n    zh-Hant-HK\n    zh\n    Chinese\n    HK\n    Hong Kong SAR China\n  \n  \n    zh-Hant-MO\n    zh\n    Chinese\n    MO\n    Macao SAR China\n  \n  \n    zu\n    zu\n    Zulu\n    ZA\n    South Africa"
  },
  {
    "objectID": "reference/loc.footer.html",
    "href": "reference/loc.footer.html",
    "title": "loc.footer",
    "section": "",
    "text": "loc.footer()\nTarget the table footer.\nWith loc.footer() we can target the table‚Äôs footer, which currently contains the source notes (and may contain a ‚Äòfootnotes‚Äô location in the future). This is useful when applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting. The ‚Äòfooter‚Äô location is generated by tab_source_note()."
  },
  {
    "objectID": "reference/loc.footer.html#returns",
    "href": "reference/loc.footer.html#returns",
    "title": "loc.footer",
    "section": "Returns",
    "text": "Returns\n\n : LocFooter\n\nA LocFooter object, which is used for a locations= argument if specifying the footer of the table."
  },
  {
    "objectID": "reference/loc.footer.html#examples",
    "href": "reference/loc.footer.html#examples",
    "title": "loc.footer",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. Add a source note (with tab_source_note() and style this footer section inside of tab_style() with locations=loc.footer().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5))\n    .tab_source_note(source_note=\"From edmunds.com\")\n    .tab_style(\n        style=style.text(color=\"blue\", size=\"small\", weight=\"bold\"),\n        locations=loc.footer()\n    )\n)\n\n\n\n\n\n\n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    447000.0\n  \n  \n    Ferrari\n    458 Speciale\n    291744.0\n  \n  \n    Ferrari\n    458 Spider\n    263553.0\n  \n  \n    Ferrari\n    458 Italia\n    233509.0\n  \n  \n    Ferrari\n    488 GTB\n    245400.0\n  \n\n  \n  \n  \n    From edmunds.com"
  },
  {
    "objectID": "reference/GT.cols_move.html",
    "href": "reference/GT.cols_move.html",
    "title": "GT.cols_move",
    "section": "",
    "text": "GT.cols_move(self, columns, after)\nMove one or more columns.\nOn those occasions where you need to move columns this way or that way, we can make use of the cols_move() method. While it‚Äôs true that the movement of columns can be done upstream of Great Tables, it is much easier and less error prone to use the method provided here. The movement procedure here takes one or more specified columns (in the columns argument) and places them to the right of a different column (the after argument). The ordering of the columns to be moved is preserved, as is the ordering of all other columns in the table.\nThe columns supplied in columns must all exist in the table and none of them can be in the after argument. The after column must also exist and only one column should be provided here. If you need to place one more or columns at the beginning of the column series, the cols_move_to_start() method should be used. Similarly, if those columns to move should be placed at the end of the column series then use cols_move_to_end()."
  },
  {
    "objectID": "reference/GT.cols_move.html#parameters",
    "href": "reference/GT.cols_move.html#parameters",
    "title": "GT.cols_move",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nafter : str\n\nThe column after which the columns should be placed. This can be any column name that exists in the table."
  },
  {
    "objectID": "reference/GT.cols_move.html#returns",
    "href": "reference/GT.cols_move.html#returns",
    "title": "GT.cols_move",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.cols_move.html#examples",
    "href": "reference/GT.cols_move.html#examples",
    "title": "GT.cols_move",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the countrypops dataset to create a table. We‚Äôll choose to position the population column after the country_name column by using the cols_move() method.\n\nfrom great_tables import GT\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Japan\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\n(\n    GT(countrypops_mini)\n    .cols_move(\n        columns=\"population\",\n        after=\"country_name\"\n    )\n)\n\n\n\n\n\n\n\n  country_name\n  population\n  year\n\n\n\n  \n    Japan\n    126811000\n    2018\n  \n  \n    Japan\n    126633000\n    2019\n  \n  \n    Japan\n    126261000\n    2020\n  \n  \n    Japan\n    125681593\n    2021\n  \n  \n    Japan\n    125124989\n    2022"
  },
  {
    "objectID": "reference/loc.column_header.html",
    "href": "reference/loc.column_header.html",
    "title": "loc.column_header",
    "section": "",
    "text": "loc.column_header()\nTarget column spanners and column labels.\nWith loc.column_header(), we can target the column header which contains all of the column labels and any spanner labels that are present. This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.column_header.html#returns",
    "href": "reference/loc.column_header.html#returns",
    "title": "loc.column_header",
    "section": "Returns",
    "text": "Returns\n\n : LocColumnHeader\n\nA LocColumnHeader object, which is used for a locations= argument if specifying the column header of the table."
  },
  {
    "objectID": "reference/loc.column_header.html#examples",
    "href": "reference/loc.column_header.html#examples",
    "title": "loc.column_header",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. We create spanner labels through use of the tab_spanner() method; this gives us a column header with a mix of column labels and spanner labels. We will style the entire column header at once by using locations=loc.column_header() within tab_style().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(gtcars[[\"mfr\", \"model\", \"hp\", \"trq\", \"msrp\"]].head(5))\n    .tab_spanner(\n        label=\"performance\",\n        columns=[\"hp\", \"trq\"]\n    )\n    .tab_spanner(\n        label=\"make and model\",\n        columns=[\"mfr\", \"model\"]\n    )\n    .tab_style(\n        style=[\n            style.text(color=\"white\", weight=\"bold\"),\n            style.fill(color=\"steelblue\")\n        ],\n        locations=loc.column_header()\n    )\n    .fmt_integer(columns=[\"hp\", \"trq\"])\n    .fmt_currency(columns=\"msrp\", decimals=0)\n)\n\n\n\n\n\n\n\n  \n    make and model\n  \n  \n    performance\n  \n  msrp\n\n\n  mfr\n  model\n  hp\n  trq\n\n\n\n  \n    Ford\n    GT\n    647\n    550\n    $447,000\n  \n  \n    Ferrari\n    458 Speciale\n    597\n    398\n    $291,744\n  \n  \n    Ferrari\n    458 Spider\n    562\n    398\n    $263,553\n  \n  \n    Ferrari\n    458 Italia\n    562\n    398\n    $233,509\n  \n  \n    Ferrari\n    488 GTB\n    661\n    561\n    $245,400"
  },
  {
    "objectID": "reference/GT.opt_table_font.html",
    "href": "reference/GT.opt_table_font.html",
    "title": "GT.opt_table_font",
    "section": "",
    "text": "GT.opt_table_font(\n    self,\n    font=None,\n    stack=None,\n    weight=None,\n    style=None,\n    add=True,\n)\nOptions to define font choices for the entire table.\nThe opt_table_font() method makes it possible to define fonts used for an entire table. Any font names supplied in font= will (by default, with add=True) be placed before the names present in the existing font stack (i.e., they will take precedence). You can choose to base the font stack on those provided by the system_fonts() helper function by providing a valid keyword for a themed set of fonts. Take note that you could still have entirely different fonts in specific locations of the table. To make that possible you would need to use tab_style() in conjunction with style.text()."
  },
  {
    "objectID": "reference/GT.opt_table_font.html#parameters",
    "href": "reference/GT.opt_table_font.html#parameters",
    "title": "GT.opt_table_font",
    "section": "Parameters",
    "text": "Parameters\n\nfont : str | list[str] | dict[str, str] | GoogleFont | None = None\n\nOne or more font names available on the user‚Äôs system. This can be provided as a string or a list of strings. Alternatively, you can specify font names using the google_font() helper function. The default value is None since you could instead opt to use stack to define a list of fonts.\n\nstack : FontStackName | None = None\n\nA name that is representative of a font stack (obtained via internally via the system_fonts() helper function. If provided, this new stack will replace any defined fonts and any font= values will be prepended.\n\nstyle : str | None = None\n\nAn option to modify the text style. Can be one of either \"normal\", \"italic\", or \"oblique\".\n\nweight : str | int | float | None = None\n\nOption to set the weight of the font. Can be a text-based keyword such as \"normal\", \"bold\", \"lighter\", \"bolder\", or, a numeric value between 1 and 1000. Please note that typefaces have varying support for the numeric mapping of weight.\n\nadd : bool = True\n\nShould fonts be added to the beginning of any already-defined fonts for the table? By default, this is True and is recommended since those fonts already present can serve as fallbacks when everything specified in font is not available. If a stack= value is provided, then add will automatically set to False."
  },
  {
    "objectID": "reference/GT.opt_table_font.html#returns",
    "href": "reference/GT.opt_table_font.html#returns",
    "title": "GT.opt_table_font",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.opt_table_font.html#possibilities-for-the-stack-argument",
    "href": "reference/GT.opt_table_font.html#possibilities-for-the-stack-argument",
    "title": "GT.opt_table_font",
    "section": "Possibilities for the stack argument",
    "text": "Possibilities for the stack argument\nThere are several themed font stacks available via the system_fonts() helper function. That function can be used to generate all or a segment of a list supplied to the font= argument. However, using the stack= argument with one of the 15 keywords for the font stacks available in system_fonts(), we could be sure that the typeface class will work across multiple computer systems. Any of the following keywords can be used with stack=:\n\n\"system-ui\"\n\"transitional\"\n\"old-style\"\n\"humanist\"\n\"geometric-humanist\"\n\"classical-humanist\"\n\"neo-grotesque\"\n\"monospace-slab-serif\"\n\"monospace-code\"\n\"industrial\"\n\"rounded-sans\"\n\"slab-serif\"\n\"antique\"\n\"didone\"\n\"handwritten\""
  },
  {
    "objectID": "reference/GT.opt_table_font.html#examples",
    "href": "reference/GT.opt_table_font.html#examples",
    "title": "GT.opt_table_font",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the sp500 dataset to create a small table. With opt_table_font() we can add some preferred font choices for modifying the text of the entire table. Here we‚Äôll use the \"Superclarendon\" and \"Georgia\" fonts (the second font serves as a fallback).\n\nimport polars as pl\nfrom great_tables import GT\nfrom great_tables.data import sp500\n\nsp500_mini = pl.from_pandas(sp500).slice(0, 10).drop([\"volume\", \"adj_close\"])\n\n(\n    GT(sp500_mini, rowname_col=\"date\")\n    .fmt_currency(use_seps=False)\n    .opt_table_font(font=[\"Superclarendon\", \"Georgia\"])\n)\n\n\n\n\n\n\n\n  \n  open\n  high\n  low\n  close\n\n\n\n  \n    2015-12-31\n    $2060.59\n    $2062.54\n    $2043.62\n    $2043.94\n  \n  \n    2015-12-30\n    $2077.34\n    $2077.34\n    $2061.97\n    $2063.36\n  \n  \n    2015-12-29\n    $2060.54\n    $2081.56\n    $2060.54\n    $2078.36\n  \n  \n    2015-12-28\n    $2057.77\n    $2057.77\n    $2044.20\n    $2056.50\n  \n  \n    2015-12-24\n    $2063.52\n    $2067.36\n    $2058.73\n    $2060.99\n  \n  \n    2015-12-23\n    $2042.20\n    $2064.73\n    $2042.20\n    $2064.29\n  \n  \n    2015-12-22\n    $2023.15\n    $2042.74\n    $2020.49\n    $2038.97\n  \n  \n    2015-12-21\n    $2010.27\n    $2022.90\n    $2005.93\n    $2021.15\n  \n  \n    2015-12-18\n    $2040.81\n    $2040.81\n    $2005.33\n    $2005.55\n  \n  \n    2015-12-17\n    $2073.76\n    $2076.37\n    $2041.66\n    $2041.89\n  \n\n\n\n\n\n\n        \n\n\nIn practice, both of these fonts are not likely to be available on all systems. The opt_table_font() method safeguards against this by prepending the fonts in the font= list to the existing font stack. This way, if both fonts are not available, the table will fall back to using the list of default table fonts. This behavior is controlled by the add= argument, which is True by default.\nWith the sza dataset we‚Äôll create a two-column, eleven-row table. Within opt_table_font(), the stack= argument will be supplied with the ‚Äúrounded-sans‚Äù font stack. This sets up a family of fonts with rounded, curved letterforms that should be locally available in different computing environments.\n\nfrom great_tables.data import sza\n\nsza_mini = (\n    pl.from_pandas(sza)\n    .filter((pl.col(\"latitude\") == \"20\") & (pl.col(\"month\") == \"jan\"))\n    .drop_nulls()\n    .drop([\"latitude\", \"month\"])\n)\n\n(\n    GT(sza_mini)\n    .opt_table_font(stack=\"rounded-sans\")\n    .opt_all_caps()\n)\n\n\n\n\n\n\n\n  tst\n  sza\n\n\n\n  \n    0700\n    84.9\n  \n  \n    0730\n    78.7\n  \n  \n    0800\n    72.7\n  \n  \n    0830\n    66.1\n  \n  \n    0900\n    61.5\n  \n  \n    0930\n    56.5\n  \n  \n    1000\n    52.1\n  \n  \n    1030\n    48.3\n  \n  \n    1100\n    45.5\n  \n  \n    1130\n    43.6\n  \n  \n    1200\n    43.0"
  },
  {
    "objectID": "reference/GT.tab_header.html",
    "href": "reference/GT.tab_header.html",
    "title": "GT.tab_header",
    "section": "",
    "text": "GT.tab_header(self, title, subtitle=None, preheader=None)\nAdd a table header.\nWe can add a table header to the output table that contains a title and even a subtitle with the tab_header() method. A table header is an optional table component that is positioned above the column labels. We have the flexibility to use Markdown or HTML formatting for the header‚Äôs title and subtitle with the md() and html() helper functions."
  },
  {
    "objectID": "reference/GT.tab_header.html#parameters",
    "href": "reference/GT.tab_header.html#parameters",
    "title": "GT.tab_header",
    "section": "Parameters",
    "text": "Parameters\n\ntitle : str | Text\n\nText to be used in the table title. We can elect to use the md() and html() helper functions to style the text as Markdown or to retain HTML elements in the text.\n\nsubtitle : str | Text | None = None\n\nText to be used in the table subtitle. We can elect to use the md() and html() helper functions to style the text as Markdown or to retain HTML elements in the text.\n\npreheader : str | list[str] | None = None\n\nOptional preheader content that is rendered above the table. Can be supplied as a list of strings."
  },
  {
    "objectID": "reference/GT.tab_header.html#returns",
    "href": "reference/GT.tab_header.html#returns",
    "title": "GT.tab_header",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.tab_header.html#examples",
    "href": "reference/GT.tab_header.html#examples",
    "title": "GT.tab_header",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a small portion of the gtcars dataset to create a table. A header part can be added to the table with the tab_header() method. We‚Äôll add a title and the optional subtitle as well. With the md() helper function, we can make sure the Markdown formatting is interpreted and transformed.\n\nfrom great_tables import GT, md\nfrom great_tables.data import gtcars\n\ngtcars_mini = gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5)\n\n(\n    GT(gtcars_mini)\n    .tab_header(\n        title=md(\"Data listing from **gtcars**\"),\n        subtitle=md(\"`gtcars` is an R dataset\")\n    )\n)\n\n\n\n\n\n\n  \n    Data listing from gtcars\n  \n  \n    gtcars is an R dataset\n  \n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    447000.0\n  \n  \n    Ferrari\n    458 Speciale\n    291744.0\n  \n  \n    Ferrari\n    458 Spider\n    263553.0\n  \n  \n    Ferrari\n    458 Italia\n    233509.0\n  \n  \n    Ferrari\n    488 GTB\n    245400.0\n  \n\n\n\n\n\n\n        \n\n\nWe can alternatively use the html() helper function to retain HTML elements in the text.\n\nfrom great_tables import GT, md, html\nfrom great_tables.data import gtcars\n\ngtcars_mini = gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5)\n\n(\n    GT(gtcars_mini)\n    .tab_header(\n        title=md(\"Data listing &lt;strong&gt;gtcars&lt;/strong&gt;\"),\n        subtitle=html(\"From &lt;span style='color:red;'&gt;gtcars&lt;/span&gt;\")\n    )\n)\n\n\n\n\n\n\n  \n    Data listing gtcars\n  \n  \n    From gtcars\n  \n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    447000.0\n  \n  \n    Ferrari\n    458 Speciale\n    291744.0\n  \n  \n    Ferrari\n    458 Spider\n    263553.0\n  \n  \n    Ferrari\n    458 Italia\n    233509.0\n  \n  \n    Ferrari\n    488 GTB\n    245400.0"
  },
  {
    "objectID": "reference/data.countrypops.html",
    "href": "reference/data.countrypops.html",
    "title": "data.countrypops",
    "section": "",
    "text": "data.countrypops\nYearly populations of countries from 1960 to 2022.\nA dataset that presents yearly, total populations of countries. Total population is based on counts of all residents regardless of legal status or citizenship. Country identifiers include the English-language country names, and the 2- and 3-letter ISO 3166-1 country codes. Each row contains a population value for a given year (from 1960 to 2022). Any missing values for populations indicate the non-existence of the entity during that year.\n\n\nThis is a dataset with 13,545 rows and 5 columns.\n\ncountry_name: The name of the country.\ncountry_code_2, country_code_3: The 2- and 3-letter ISO 3166-1 country codes.\nyear: The year for the population estimate.\npopulation: The population estimate, midway through the year.\n\n\n\n\nRows: 13545\nColumns: 5\n$ country_name   &lt;str&gt; 'Aruba', 'Aruba', 'Aruba'\n$ country_code_2 &lt;str&gt; 'AW', 'AW', 'AW'\n$ country_code_3 &lt;str&gt; 'ABW', 'ABW', 'ABW'\n$ year           &lt;i64&gt; 1960, 1961, 1962\n$ population     &lt;i64&gt; 54608, 55811, 56682\n\n\n\nhttps://data.worldbank.org/indicator/SP.POP.TOTL"
  },
  {
    "objectID": "reference/data.countrypops.html#details",
    "href": "reference/data.countrypops.html#details",
    "title": "data.countrypops",
    "section": "",
    "text": "This is a dataset with 13,545 rows and 5 columns.\n\ncountry_name: The name of the country.\ncountry_code_2, country_code_3: The 2- and 3-letter ISO 3166-1 country codes.\nyear: The year for the population estimate.\npopulation: The population estimate, midway through the year."
  },
  {
    "objectID": "reference/data.countrypops.html#preview",
    "href": "reference/data.countrypops.html#preview",
    "title": "data.countrypops",
    "section": "",
    "text": "Rows: 13545\nColumns: 5\n$ country_name   &lt;str&gt; 'Aruba', 'Aruba', 'Aruba'\n$ country_code_2 &lt;str&gt; 'AW', 'AW', 'AW'\n$ country_code_3 &lt;str&gt; 'ABW', 'ABW', 'ABW'\n$ year           &lt;i64&gt; 1960, 1961, 1962\n$ population     &lt;i64&gt; 54608, 55811, 56682"
  },
  {
    "objectID": "reference/data.countrypops.html#source",
    "href": "reference/data.countrypops.html#source",
    "title": "data.countrypops",
    "section": "",
    "text": "https://data.worldbank.org/indicator/SP.POP.TOTL"
  },
  {
    "objectID": "reference/GT.fmt_flag.html",
    "href": "reference/GT.fmt_flag.html",
    "title": "GT.fmt_flag",
    "section": "",
    "text": "GT.fmt_flag(\n    self,\n    columns=None,\n    rows=None,\n    height='1em',\n    sep=' ',\n    use_title=True,\n)\nGenerate flag icons for countries from their country codes.\nWhile it is fairly straightforward to insert images into body cells (using fmt_image() is one way to it), there is often the need to incorporate specialized types of graphics within a table. One such group of graphics involves iconography representing different countries, and the fmt_flag() method helps with inserting a flag icon (or multiple) in body cells. To make this work seamlessly, the input cells need to contain some reference to a country, and this can be in the form of a 2- or 3-letter ISO 3166-1 country code (e.g., Egypt has the \"EG\" country code). This method will parse the targeted body cells for those codes and insert the appropriate flag graphics.\nMultiple flags can be included per cell by separating country codes with commas (e.g., \"GB,TT\"). The sep= argument allows for a common separator to be applied between flag icons."
  },
  {
    "objectID": "reference/GT.fmt_flag.html#parameters",
    "href": "reference/GT.fmt_flag.html#parameters",
    "title": "GT.fmt_flag",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\nheight : str | int | float | None = '1em'\n\nThe height of the flag icons. The default value is \"1em\". If given as a number, it is assumed to be in pixels.\n\nsep : str = ' '\n\nIn the output of multiple flag icons within a body cell, sep= provides the separator between each of the flag icons.\n\nuse_title : bool = True\n\nThe option to include a title attribute with the country name when hovering over the flag icon. The default is True."
  },
  {
    "objectID": "reference/GT.fmt_flag.html#returns",
    "href": "reference/GT.fmt_flag.html#returns",
    "title": "GT.fmt_flag",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_flag.html#examples",
    "href": "reference/GT.fmt_flag.html#examples",
    "title": "GT.fmt_flag",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the countrypops dataset to create a new table with flag icons. We will only include a few columns and rows from that table. The country_code_2 column has 2-letter country codes in the format required for fmt_flag() and using that method transforms the codes to circular flag icons.\n\nfrom great_tables import GT\nfrom great_tables.data import countrypops\nimport polars as pl\n\ncountrypops_mini = (\n    pl.from_pandas(countrypops)\n    .filter(pl.col(\"year\") == 2021)\n    .filter(pl.col(\"country_name\").str.starts_with(\"S\"))\n    .sort(\"country_name\")\n    .head(10)\n    .drop([\"year\", \"country_code_3\"])\n)\n\n(\n    GT(countrypops_mini)\n    .fmt_integer(columns=\"population\")\n    .fmt_flag(columns=\"country_code_2\")\n    .cols_label(\n        country_code_2=\"\",\n        country_name=\"Country\",\n        population=\"Population (2021)\"\n    )\n    .cols_move_to_start(columns=\"country_code_2\")\n)\n\n\n\n\n\n\n\n  \n  Country\n  Population (2021)\n\n\n\n  \n    Samoa\n    Samoa\n    218,764\n  \n  \n    San Marino\n    San Marino\n    33,745\n  \n  \n    Sao Tome and Principe\n    Sao Tome and Principe\n    223,107\n  \n  \n    Saudi Arabia\n    Saudi Arabia\n    35,950,396\n  \n  \n    Senegal\n    Senegal\n    16,876,720\n  \n  \n    Serbia\n    Serbia\n    6,834,326\n  \n  \n    Seychelles\n    Seychelles\n    99,258\n  \n  \n    Sierra Leone\n    Sierra Leone\n    8,420,641\n  \n  \n    Singapore\n    Singapore\n    5,453,566\n  \n  \n    Sint Maarten (Dutch part)\n    Sint Maarten (Dutch part)\n    42,846\n  \n\n\n\n\n\n\n        \n\n\nHere‚Äôs another example (again using countrypops) where we generate a table providing populations every five years for the Benelux countries (\"BEL\", \"NLD\", and \"LUX\"). After some filtering and a pivot, the fmt_flag() method is used to obtain flag icons from 3-letter country codes present in the country_code_3 column.\n\nimport polars.selectors as cs\n\ncountrypops_mini = (\n    pl.from_pandas(countrypops)\n    .filter(pl.col(\"country_code_3\").is_in([\"BEL\", \"NLD\", \"LUX\"]))\n    .filter((pl.col(\"year\") % 10 == 0) & (pl.col(\"year\") &gt;= 1960))\n    .pivot(\"year\", index = [\"country_code_3\", \"country_name\"], values=\"population\")\n)\n\n(\n    GT(countrypops_mini)\n    .tab_header(title=\"Populations of the Benelux Countries\")\n    .tab_spanner(label=\"Year\", columns=cs.numeric())\n    .fmt_integer(columns=cs.numeric())\n    .fmt_flag(columns=\"country_code_3\")\n    .cols_label(\n        country_code_3=\"\",\n        country_name=\"Country\"\n    )\n)\n\n\n\n\n\n\n  \n    Populations of the Benelux Countries\n  \n\n  \n  Country\n  \n    Year\n  \n\n\n  1960\n  1970\n  1980\n  1990\n  2000\n  2010\n  2020\n\n\n\n  \n    Belgium\n    Belgium\n    9,153,489\n    9,655,549\n    9,859,242\n    9,967,379\n    10,251,250\n    10,895,586\n    11,538,604\n  \n  \n    Luxembourg\n    Luxembourg\n    313,970\n    339,171\n    364,150\n    381,850\n    436,300\n    506,953\n    630,419\n  \n  \n    Netherlands\n    Netherlands\n    11,486,631\n    13,038,526\n    14,149,800\n    14,951,510\n    15,925,513\n    16,615,394\n    17,441,500"
  },
  {
    "objectID": "reference/GT.cols_align.html",
    "href": "reference/GT.cols_align.html",
    "title": "GT.cols_align",
    "section": "",
    "text": "GT.cols_align(self, align='left', columns=None)\nSet the alignment of one or more columns.\nThe cols_align() method sets the alignment of one or more columns. The align argument can be set to one of \"left\", \"center\", or \"right\" and the columns argument can be used to specify which columns to apply the alignment to. If columns is not specified, the alignment is applied to all columns."
  },
  {
    "objectID": "reference/GT.cols_align.html#parameters",
    "href": "reference/GT.cols_align.html#parameters",
    "title": "GT.cols_align",
    "section": "Parameters",
    "text": "Parameters\n\nalign : str = 'left'\n\nThe alignment to apply. Must be one of \"left\", \"center\", or \"right\".\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list. If None, the alignment is applied to all columns."
  },
  {
    "objectID": "reference/GT.cols_align.html#returns",
    "href": "reference/GT.cols_align.html#returns",
    "title": "GT.cols_align",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.cols_align.html#examples",
    "href": "reference/GT.cols_align.html#examples",
    "title": "GT.cols_align",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the countrypops to create a small table. We can change the alignment of the population column with cols_align(). In this example, the column label and body cells of population will be aligned to the left.\n\nfrom great_tables import GT\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"San Marino\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\n(\n    GT(countrypops_mini, rowname_col=\"year\", groupname_col=\"country_name\")\n    .cols_align(align=\"left\", columns=\"population\")\n)\n\n\n\n\n\n\n\n  \n  population\n\n\n\n  \n    San Marino\n  \n  \n    2018\n    34156\n  \n  \n    2019\n    34178\n  \n  \n    2020\n    34007\n  \n  \n    2021\n    33745\n  \n  \n    2022\n    33660"
  },
  {
    "objectID": "reference/GT.write_raw_html.html",
    "href": "reference/GT.write_raw_html.html",
    "title": "GT.write_raw_html",
    "section": "",
    "text": "GT.write_raw_html(\n    gt,\n    filename,\n    encoding='utf-8',\n    inline_css=False,\n    newline=None,\n    make_page=False,\n    all_important=False,\n)\nWrite the table to an HTML file.\nThis helper function saves the output of GT.as_raw_html() to an HTML file specified by the user.\n\n\n\ngt : GT\n\nA GT object.\n\nfilename : str | Path\n\nThe name of the file to save the HTML. Can be a string or a pathlib.Path object.\n\nencoding : str = 'utf-8'\n\nThe encoding used when writing the file. Defaults to ‚Äòutf-8‚Äô.\n\ninline_css : bool = False\n\nAn option to supply styles to table elements as inlined CSS styles. This is useful when including the table HTML as part of an HTML email message body, since inlined styles are largely supported in email clients over using CSS in a &lt;style&gt; block.\n\nnewline : str | None = None\n\nThe newline character to use when writing the file. Defaults to os.linesep.\n\n\n\n\n\n\n : None\n\nAn HTML file is written to the specified path and the method returns None."
  },
  {
    "objectID": "reference/GT.write_raw_html.html#parameters",
    "href": "reference/GT.write_raw_html.html#parameters",
    "title": "GT.write_raw_html",
    "section": "",
    "text": "gt : GT\n\nA GT object.\n\nfilename : str | Path\n\nThe name of the file to save the HTML. Can be a string or a pathlib.Path object.\n\nencoding : str = 'utf-8'\n\nThe encoding used when writing the file. Defaults to ‚Äòutf-8‚Äô.\n\ninline_css : bool = False\n\nAn option to supply styles to table elements as inlined CSS styles. This is useful when including the table HTML as part of an HTML email message body, since inlined styles are largely supported in email clients over using CSS in a &lt;style&gt; block.\n\nnewline : str | None = None\n\nThe newline character to use when writing the file. Defaults to os.linesep."
  },
  {
    "objectID": "reference/GT.write_raw_html.html#returns",
    "href": "reference/GT.write_raw_html.html#returns",
    "title": "GT.write_raw_html",
    "section": "",
    "text": ": None\n\nAn HTML file is written to the specified path and the method returns None."
  },
  {
    "objectID": "reference/data.photolysis.html",
    "href": "reference/data.photolysis.html",
    "title": "data.photolysis",
    "section": "",
    "text": "data.photolysis\nData on photolysis rates for gas-phase organic compounds.\nThe photolysis dataset contains numerical values for describing the photolytic degradation pathways of 25 compounds of relevance in atmospheric chemistry. Many volatile organic compounds (VOCs) are emitted in substantial quantities from both biogenic and anthropogenic sources, and they can have a major influence on the chemistry of the lower atmosphere. A portion of these can be transformed into other VOCs via the energy provided from light.\nIn order to realistically predict the composition of the atmosphere and how it evolves over time, we need accurate estimates of photolysis rates. The data provided here in photolysis allows for computations of photolysis rates (J, having units of s^-1) as a function of the solar zenith angle (SZA). Having such values is essential when deploying atmospheric chemistry models.\n\n\nThis is a dataset with 34 rows and 10 columns.\n\ncompd_name: The name of the primary compound undergoing photolysis.\ncmpd_formula: The chemical formula of the compound.\nproducts: A product pathway for the photolysis of the compound.\ntype: The type of organic compound undergoing photolysis.\nl, m, n: The parameter values given in the l, m, and n columnscan be used to calculate the photolysis rate (J) as a function of the solar zenith angle (X, in radians) through the expression: J = l * cos(X)^m * exp(-n * sec(X)).\nquantum_yield: In the context of photolysis reactions, this is the efficiency of a given photolytic reaction. In other words, it‚Äôs the number of product molecules formed over the number of photons absorbed.\nwavelength_nm, sigma_298_cm2: The wavelength_nm and sigma_298_cm2 columns provide photoabsorption data for the compound undergoing photolysis. The values in wavelength_nm provide the wavelength of light in nanometer units; the sigma_298_cm2 values are paired with the wavelength_nm values and they are in units of cm^2 molecule^-1.\n\n\n\n\nRows: 34\nColumns: 10\n$ cmpd_name     &lt;str&gt; 'ozone', 'ozone', 'hydrogen peroxide'\n$ cmpd_formula  &lt;str&gt; 'O3', 'O3', 'H2O2'\n$ products      &lt;str&gt; '-&gt; O(^1D) + O2', '-&gt; O(^3P) + O2', '-&gt; OH + OH'\n$ type          &lt;str&gt; 'inorganic reactions', 'inorganic reactions', 'inorganic reactions'\n$ l             &lt;f64&gt; 6.073e-05, 0.0004775, 1.041e-05\n$ m             &lt;f64&gt; 1.743, 0.298, 0.723\n$ n             &lt;f64&gt; 0.474, 0.08, 0.279\n$ quantum_yield &lt;f64&gt; None, None, 1.0\n$ wavelength_nm &lt;str&gt; '290,291,292,...', '290,291,292,...', '190,195,200,...'\n$ sigma_298_cm2 &lt;str&gt; '1.43E-18,1.27E-18,1.11E-18,...',\n                      '1.43E-18,1.27E-18,1.11E-18,...',\n                      '6.72E-19,5.63E-19,4.75E-19,...'"
  },
  {
    "objectID": "reference/data.photolysis.html#details",
    "href": "reference/data.photolysis.html#details",
    "title": "data.photolysis",
    "section": "",
    "text": "This is a dataset with 34 rows and 10 columns.\n\ncompd_name: The name of the primary compound undergoing photolysis.\ncmpd_formula: The chemical formula of the compound.\nproducts: A product pathway for the photolysis of the compound.\ntype: The type of organic compound undergoing photolysis.\nl, m, n: The parameter values given in the l, m, and n columnscan be used to calculate the photolysis rate (J) as a function of the solar zenith angle (X, in radians) through the expression: J = l * cos(X)^m * exp(-n * sec(X)).\nquantum_yield: In the context of photolysis reactions, this is the efficiency of a given photolytic reaction. In other words, it‚Äôs the number of product molecules formed over the number of photons absorbed.\nwavelength_nm, sigma_298_cm2: The wavelength_nm and sigma_298_cm2 columns provide photoabsorption data for the compound undergoing photolysis. The values in wavelength_nm provide the wavelength of light in nanometer units; the sigma_298_cm2 values are paired with the wavelength_nm values and they are in units of cm^2 molecule^-1."
  },
  {
    "objectID": "reference/data.photolysis.html#preview",
    "href": "reference/data.photolysis.html#preview",
    "title": "data.photolysis",
    "section": "",
    "text": "Rows: 34\nColumns: 10\n$ cmpd_name     &lt;str&gt; 'ozone', 'ozone', 'hydrogen peroxide'\n$ cmpd_formula  &lt;str&gt; 'O3', 'O3', 'H2O2'\n$ products      &lt;str&gt; '-&gt; O(^1D) + O2', '-&gt; O(^3P) + O2', '-&gt; OH + OH'\n$ type          &lt;str&gt; 'inorganic reactions', 'inorganic reactions', 'inorganic reactions'\n$ l             &lt;f64&gt; 6.073e-05, 0.0004775, 1.041e-05\n$ m             &lt;f64&gt; 1.743, 0.298, 0.723\n$ n             &lt;f64&gt; 0.474, 0.08, 0.279\n$ quantum_yield &lt;f64&gt; None, None, 1.0\n$ wavelength_nm &lt;str&gt; '290,291,292,...', '290,291,292,...', '190,195,200,...'\n$ sigma_298_cm2 &lt;str&gt; '1.43E-18,1.27E-18,1.11E-18,...',\n                      '1.43E-18,1.27E-18,1.11E-18,...',\n                      '6.72E-19,5.63E-19,4.75E-19,...'"
  },
  {
    "objectID": "reference/GT.cols_width.html",
    "href": "reference/GT.cols_width.html",
    "title": "GT.cols_width",
    "section": "",
    "text": "GT.cols_width(self, cases=None, **kwargs)\nSet the widths of columns.\nManual specifications of column widths can be performed using the cols_width() method. We choose which columns get specific widths. This can be in units of pixels or as percentages. Width assignments are supplied inside of a dictionary where columns are the keys and the corresponding width is the value."
  },
  {
    "objectID": "reference/GT.cols_width.html#parameters",
    "href": "reference/GT.cols_width.html#parameters",
    "title": "GT.cols_width",
    "section": "Parameters",
    "text": "Parameters\n\ncases : dict[str, str] | None = None\n\nA dictionary where the keys are column names and the values are the widths. Widths can be specified in pixels (e.g., \"50px\") or as percentages (e.g., \"20%\").\n\n****kwargs** : str = {}\n\nKeyword arguments to specify column widths. Each keyword corresponds to a column name, with its value indicating the width in pixels or percentages."
  },
  {
    "objectID": "reference/GT.cols_width.html#returns",
    "href": "reference/GT.cols_width.html#returns",
    "title": "GT.cols_width",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.cols_width.html#examples",
    "href": "reference/GT.cols_width.html#examples",
    "title": "GT.cols_width",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use select columns from the exibble dataset to create a new table. We can specify the widths of columns with cols_width(). This is done by specifying the exact widths for table columns in a dictionary. In this example, we‚Äôll set the width of the num column to \"150px\", the char column to \"100px\", the date column to \"300px\". All other columns won‚Äôt be affected (their widths will be automatically set by their content).\n\nimport warnings\nfrom great_tables import GT, exibble\n\nwarnings.filterwarnings(\"ignore\")\nexibble_mini = exibble[[\"num\", \"char\", \"date\", \"datetime\", \"row\"]].head(5)\n\n(\n    GT(exibble_mini)\n    .cols_width(\n        cases={\n            \"num\": \"150px\",\n            \"char\": \"100px\",\n            \"date\": \"300px\"\n        }\n    )\n)\n\n\n\n\n\n  \n  \n  \n  \n  \n\n\n\n\n\n  num\n  char\n  date\n  datetime\n  row\n\n\n\n  \n    0.1111\n    apricot\n    2015-01-15\n    2018-01-01 02:22\n    row_1\n  \n  \n    2.222\n    banana\n    2015-02-15\n    2018-02-02 14:33\n    row_2\n  \n  \n    33.33\n    coconut\n    2015-03-15\n    2018-03-03 03:44\n    row_3\n  \n  \n    444.4\n    durian\n    2015-04-15\n    2018-04-04 15:55\n    row_4\n  \n  \n    5550.0\n    \n    2015-05-15\n    2018-05-05 04:00\n    row_5\n  \n\n\n\n\n\n\n        \n\n\nWe can also specify the widths of columns as percentages. In this example, we‚Äôll set the width of the num column to \"20%\", the char column to \"10%\", and the date column to \"30%\". Note that the percentages are relative and don‚Äôt need to sum to 100%.\n\n(\n    GT(exibble_mini)\n    .cols_width(\n        cases={\n            \"num\": \"20%\",\n            \"char\": \"10%\",\n            \"date\": \"30%\"\n        }\n    )\n)\n\n\n\n\n\n  \n  \n  \n  \n  \n\n\n\n\n\n  num\n  char\n  date\n  datetime\n  row\n\n\n\n  \n    0.1111\n    apricot\n    2015-01-15\n    2018-01-01 02:22\n    row_1\n  \n  \n    2.222\n    banana\n    2015-02-15\n    2018-02-02 14:33\n    row_2\n  \n  \n    33.33\n    coconut\n    2015-03-15\n    2018-03-03 03:44\n    row_3\n  \n  \n    444.4\n    durian\n    2015-04-15\n    2018-04-04 15:55\n    row_4\n  \n  \n    5550.0\n    \n    2015-05-15\n    2018-05-05 04:00\n    row_5\n  \n\n\n\n\n\n\n        \n\n\nWe can also mix and match pixel and percentage widths. In this example, we‚Äôll set the width of the num column to \"150px\", the char column to \"10%\", and the date column to \"30%\".\n\n(\n    GT(exibble_mini)\n    .cols_width(\n        cases={\n            \"num\": \"150px\",\n            \"char\": \"10%\",\n            \"date\": \"30%\"\n        }\n    )\n)\n\n\n\n\n\n  \n  \n  \n  \n  \n\n\n\n\n\n  num\n  char\n  date\n  datetime\n  row\n\n\n\n  \n    0.1111\n    apricot\n    2015-01-15\n    2018-01-01 02:22\n    row_1\n  \n  \n    2.222\n    banana\n    2015-02-15\n    2018-02-02 14:33\n    row_2\n  \n  \n    33.33\n    coconut\n    2015-03-15\n    2018-03-03 03:44\n    row_3\n  \n  \n    444.4\n    durian\n    2015-04-15\n    2018-04-04 15:55\n    row_4\n  \n  \n    5550.0\n    \n    2015-05-15\n    2018-05-05 04:00\n    row_5\n  \n\n\n\n\n\n\n        \n\n\nIf we set the width of all columns, the table will be forced to use the specified widths (i.e., a column width less than the content width will be honored). In this next example, we‚Äôll set widths for all columns. This is a good way to ensure that the widths you specify are fully respected (and not overridden by automatic width calculations).\n\n(\n    GT(exibble_mini)\n    .cols_width(\n        cases={\n            \"num\": \"30px\",\n            \"char\": \"100px\",\n            \"date\": \"100px\",\n            \"datetime\": \"200px\",\n            \"row\": \"50px\"\n        }\n    )\n)\n\n\n\n\n\n  \n  \n  \n  \n  \n\n\n\n\n\n  num\n  char\n  date\n  datetime\n  row\n\n\n\n  \n    0.1111\n    apricot\n    2015-01-15\n    2018-01-01 02:22\n    row_1\n  \n  \n    2.222\n    banana\n    2015-02-15\n    2018-02-02 14:33\n    row_2\n  \n  \n    33.33\n    coconut\n    2015-03-15\n    2018-03-03 03:44\n    row_3\n  \n  \n    444.4\n    durian\n    2015-04-15\n    2018-04-04 15:55\n    row_4\n  \n  \n    5550.0\n    \n    2015-05-15\n    2018-05-05 04:00\n    row_5\n  \n\n\n\n\n\n\n        \n\n\nNotice that in the above example, the num column is very small (only 30px) and the content overflows. When not specifying the width of all columns, the table will automatically adjust the column widths based on the content (and you wouldn‚Äôt get the overflowing behavior seen in the previous example)."
  },
  {
    "objectID": "reference/data.towny.html",
    "href": "reference/data.towny.html",
    "title": "data.towny",
    "section": "",
    "text": "data.towny\nPopulations of all municipalities in Ontario from 1996 to 2021.\nA dataset containing census population data from six census years (1996 to 2021) for all 414 of Ontario‚Äôs local municipalities. The Municipal Act of Ontario (2001) defines a local municipality as ‚Äúa single-tier municipality or a lower-tier municipality‚Äù. There are 173 single-tier municipalities and 241 lower-tier municipalities representing 99 percent of Ontario‚Äôs population and 17 percent of its land use.\nIn the towny dataset we include information specific to each municipality such as location (in the latitude and longitude columns), their website URLs, their classifications, and land area sizes according to 2021 boundaries. Additionally, there are computed columns containing population density values for each census year and population change values from adjacent census years.\n\n\nThis is a dataset with 414 rows and 25 columns.\n\nname: The name of the municipality.\nwebsite: The website for the municipality. This is missing if there isn‚Äôt an official site.\nstatus: The status of the municipality. This is either \"lower-tier\" or \"single-tier\". A single-tier municipality, which takes on all municipal duties outlined in the Municipal Act and other Provincial laws, is independent of an upper-tier municipality. Part of an upper-tier municipality is a lower-tier municipality. The upper-tier and lower-tier municipalities are responsible for carrying out the duties laid out in the Municipal Act and other provincial laws.\ncsd_type: The Census Subdivision Type. This can be one of \"village\", \"town\", \"township\", \"municipality\", or \"city\".\ncensus_div: The Census division, of which there are 49. This is made up of single-tier municipalities, regional municipalities, counties, and districts.\nlatitude, longitude: The location of the municipality, given as latitude and longitude values in decimal degrees.\nland_area_km2: The total area of the local municipality in square kilometers.\npopulation_1996, population_2001, population_2006, population_2011, population_2016, population_2021: Population values for each municipality from the 1996 to 2021 census years.\ndensity_1996, density_2001, density_2006, density_2011, density_2016, density_2021: Population density values, calculated as persons per square kilometer, for each municipality from the 1996 to 2021 census years.\npop_change_1996_2001_pct, pop_change_2001_2006_pct, pop_change_2006_2011_pct, pop_change_2011_2016_pct, pop_change_2016_2021_pct: Population changes between adjacent pairs of census years, from 1996 to 2021.\n\n\n\n\nRows: 414\nColumns: 25\n$ name                     &lt;str&gt; 'Addington Highlands', 'Adelaide Metcalfe', 'Adjala-Tosorontio'\n$ website                  &lt;str&gt; 'https://addingtonhighlands.ca',\n                                 'https://adelaidemetcalfe.on.ca',\n                                 'https://www.adjtos.ca'\n$ status                   &lt;str&gt; 'lower-tier', 'lower-tier', 'lower-tier'\n$ csd_type                 &lt;str&gt; 'township', 'township', 'township'\n$ census_div               &lt;str&gt; 'Lennox and Addington', 'Middlesex', 'Simcoe'\n$ latitude                 &lt;f64&gt; 45.0, 42.95, 44.133333\n$ longitude                &lt;f64&gt; -77.25, -81.7, -79.933333\n$ land_area_km2            &lt;f64&gt; 1293.99, 331.11, 371.53\n$ population_1996          &lt;i64&gt; 2429, 3128, 9359\n$ population_2001          &lt;i64&gt; 2402, 3149, 10082\n$ population_2006          &lt;i64&gt; 2512, 3135, 10695\n$ population_2011          &lt;i64&gt; 2517, 3028, 10603\n$ population_2016          &lt;i64&gt; 2318, 2990, 10975\n$ population_2021          &lt;i64&gt; 2534, 3011, 10989\n$ density_1996             &lt;f64&gt; 1.88, 9.45, 25.19\n$ density_2001             &lt;f64&gt; 1.86, 9.51, 27.14\n$ density_2006             &lt;f64&gt; 1.94, 9.47, 28.79\n$ density_2011             &lt;f64&gt; 1.95, 9.14, 28.54\n$ density_2016             &lt;f64&gt; 1.79, 9.03, 29.54\n$ density_2021             &lt;f64&gt; 1.96, 9.09, 29.58\n$ pop_change_1996_2001_pct &lt;f64&gt; -0.0111, 0.0067, 0.0773\n$ pop_change_2001_2006_pct &lt;f64&gt; 0.0458, -0.0044, 0.0608\n$ pop_change_2006_2011_pct &lt;f64&gt; 0.002, -0.0341, -0.0086\n$ pop_change_2011_2016_pct &lt;f64&gt; -0.0791, -0.0125, 0.0351\n$ pop_change_2016_2021_pct &lt;f64&gt; 0.0932, 0.007, 0.0013"
  },
  {
    "objectID": "reference/data.towny.html#details",
    "href": "reference/data.towny.html#details",
    "title": "data.towny",
    "section": "",
    "text": "This is a dataset with 414 rows and 25 columns.\n\nname: The name of the municipality.\nwebsite: The website for the municipality. This is missing if there isn‚Äôt an official site.\nstatus: The status of the municipality. This is either \"lower-tier\" or \"single-tier\". A single-tier municipality, which takes on all municipal duties outlined in the Municipal Act and other Provincial laws, is independent of an upper-tier municipality. Part of an upper-tier municipality is a lower-tier municipality. The upper-tier and lower-tier municipalities are responsible for carrying out the duties laid out in the Municipal Act and other provincial laws.\ncsd_type: The Census Subdivision Type. This can be one of \"village\", \"town\", \"township\", \"municipality\", or \"city\".\ncensus_div: The Census division, of which there are 49. This is made up of single-tier municipalities, regional municipalities, counties, and districts.\nlatitude, longitude: The location of the municipality, given as latitude and longitude values in decimal degrees.\nland_area_km2: The total area of the local municipality in square kilometers.\npopulation_1996, population_2001, population_2006, population_2011, population_2016, population_2021: Population values for each municipality from the 1996 to 2021 census years.\ndensity_1996, density_2001, density_2006, density_2011, density_2016, density_2021: Population density values, calculated as persons per square kilometer, for each municipality from the 1996 to 2021 census years.\npop_change_1996_2001_pct, pop_change_2001_2006_pct, pop_change_2006_2011_pct, pop_change_2011_2016_pct, pop_change_2016_2021_pct: Population changes between adjacent pairs of census years, from 1996 to 2021."
  },
  {
    "objectID": "reference/data.towny.html#preview",
    "href": "reference/data.towny.html#preview",
    "title": "data.towny",
    "section": "",
    "text": "Rows: 414\nColumns: 25\n$ name                     &lt;str&gt; 'Addington Highlands', 'Adelaide Metcalfe', 'Adjala-Tosorontio'\n$ website                  &lt;str&gt; 'https://addingtonhighlands.ca',\n                                 'https://adelaidemetcalfe.on.ca',\n                                 'https://www.adjtos.ca'\n$ status                   &lt;str&gt; 'lower-tier', 'lower-tier', 'lower-tier'\n$ csd_type                 &lt;str&gt; 'township', 'township', 'township'\n$ census_div               &lt;str&gt; 'Lennox and Addington', 'Middlesex', 'Simcoe'\n$ latitude                 &lt;f64&gt; 45.0, 42.95, 44.133333\n$ longitude                &lt;f64&gt; -77.25, -81.7, -79.933333\n$ land_area_km2            &lt;f64&gt; 1293.99, 331.11, 371.53\n$ population_1996          &lt;i64&gt; 2429, 3128, 9359\n$ population_2001          &lt;i64&gt; 2402, 3149, 10082\n$ population_2006          &lt;i64&gt; 2512, 3135, 10695\n$ population_2011          &lt;i64&gt; 2517, 3028, 10603\n$ population_2016          &lt;i64&gt; 2318, 2990, 10975\n$ population_2021          &lt;i64&gt; 2534, 3011, 10989\n$ density_1996             &lt;f64&gt; 1.88, 9.45, 25.19\n$ density_2001             &lt;f64&gt; 1.86, 9.51, 27.14\n$ density_2006             &lt;f64&gt; 1.94, 9.47, 28.79\n$ density_2011             &lt;f64&gt; 1.95, 9.14, 28.54\n$ density_2016             &lt;f64&gt; 1.79, 9.03, 29.54\n$ density_2021             &lt;f64&gt; 1.96, 9.09, 29.58\n$ pop_change_1996_2001_pct &lt;f64&gt; -0.0111, 0.0067, 0.0773\n$ pop_change_2001_2006_pct &lt;f64&gt; 0.0458, -0.0044, 0.0608\n$ pop_change_2006_2011_pct &lt;f64&gt; 0.002, -0.0341, -0.0086\n$ pop_change_2011_2016_pct &lt;f64&gt; -0.0791, -0.0125, 0.0351\n$ pop_change_2016_2021_pct &lt;f64&gt; 0.0932, 0.007, 0.0013"
  },
  {
    "objectID": "reference/GT.cols_hide.html",
    "href": "reference/GT.cols_hide.html",
    "title": "GT.cols_hide",
    "section": "",
    "text": "GT.cols_hide(self, columns)\nHide one or more columns.\nThe cols_hide() method allows us to hide one or more columns from appearing in the final output table. While it‚Äôs possible and often desirable to omit columns from the input table data before introduction to the GT() class, there can be cases where the data in certain columns is useful (as a column reference during formatting of other columns) but the final display of those columns is not necessary."
  },
  {
    "objectID": "reference/GT.cols_hide.html#parameters",
    "href": "reference/GT.cols_hide.html#parameters",
    "title": "GT.cols_hide",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr\n\nThe columns to hide in the output display table. Can either be a single column name or a series of column names provided in a list."
  },
  {
    "objectID": "reference/GT.cols_hide.html#returns",
    "href": "reference/GT.cols_hide.html#returns",
    "title": "GT.cols_hide",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.cols_hide.html#examples",
    "href": "reference/GT.cols_hide.html#examples",
    "title": "GT.cols_hide",
    "section": "Examples",
    "text": "Examples\nFor this example, we‚Äôll use a portion of the countrypops dataset to create a simple table. Let‚Äôs hide the year column with the cols_hide() method.\n\nfrom great_tables import GT\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Benin\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\nGT(countrypops_mini).cols_hide(columns=\"year\")\n\n\n\n\n\n\n\n  country_name\n  population\n\n\n\n  \n    Benin\n    11940683\n  \n  \n    Benin\n    12290444\n  \n  \n    Benin\n    12643123\n  \n  \n    Benin\n    12996895\n  \n  \n    Benin\n    13352864"
  },
  {
    "objectID": "reference/GT.cols_hide.html#details",
    "href": "reference/GT.cols_hide.html#details",
    "title": "GT.cols_hide",
    "section": "Details",
    "text": "Details\nThe hiding of columns is internally a rendering directive, so, all columns that are ‚Äòhidden‚Äô are still accessible and useful in any expression provided to a rows argument. Furthermore, the cols_hide() method (as with many of the methods available in Great Tables) can be placed anywhere in a chain of calls (acting as a promise to hide columns when the timing is right). However there‚Äôs perhaps greater readability when placing this call closer to the end of such a chain. The cols_hide() method quietly changes the visible state of a column and doesn‚Äôt yield warnings when changing the state of already-invisible columns."
  },
  {
    "objectID": "reference/GT.fmt_markdown.html",
    "href": "reference/GT.fmt_markdown.html",
    "title": "GT.fmt_markdown",
    "section": "",
    "text": "GT.fmt_markdown(self, columns=None, rows=None)\nFormat Markdown text.\nAny Markdown-formatted text in the incoming cells will be transformed during render when using the fmt_markdown() method."
  },
  {
    "objectID": "reference/GT.fmt_markdown.html#parameters",
    "href": "reference/GT.fmt_markdown.html#parameters",
    "title": "GT.fmt_markdown",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices."
  },
  {
    "objectID": "reference/GT.fmt_markdown.html#returns",
    "href": "reference/GT.fmt_markdown.html#returns",
    "title": "GT.fmt_markdown",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_markdown.html#examples",
    "href": "reference/GT.fmt_markdown.html#examples",
    "title": "GT.fmt_markdown",
    "section": "Examples:",
    "text": "Examples:\nLet‚Äôs first create a DataFrame containing some text that is Markdown-formatted and then introduce that to GT(). We‚Äôll then transform the md column with the fmt_markdown() method.\n\nimport pandas as pd\nfrom great_tables import GT\nfrom great_tables.data import towny\n\ntext_1 = \"\"\"\n### This is Markdown.\n\nMarkdown‚Äôs syntax is comprised entirely of\npunctuation characters, which punctuation\ncharacters have been carefully chosen so as\nto look like what they mean... assuming\nyou‚Äôve ever used email.\n\"\"\"\n\ntext_2 = \"\"\"\nInfo on Markdown syntax can be found\n[here](https://daringfireball.net/projects/markdown/).\n\"\"\"\n\ndf = pd.DataFrame({\"md\": [text_1, text_2]})\n\n(GT(df).fmt_markdown(\"md\"))\n\n\n\n\n\n\n\n  md\n\n\n\n  \n    This is Markdown.\nMarkdown‚Äôs syntax is comprised entirely of\npunctuation characters, which punctuation\ncharacters have been carefully chosen so as\nto look like what they mean... assuming\nyou‚Äôve ever used email.\n  \n  \n    Info on Markdown syntax can be found\nhere."
  },
  {
    "objectID": "reference/GT.fmt_markdown.html#see-also",
    "href": "reference/GT.fmt_markdown.html#see-also",
    "title": "GT.fmt_markdown",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_markdown(), allows you to format a single string value (or a list of them)."
  },
  {
    "objectID": "reference/data.illness.html",
    "href": "reference/data.illness.html",
    "title": "data.illness",
    "section": "",
    "text": "data.illness\nLab tests for one suffering from an illness.\nA dataset with artificial daily lab data for a patient with Yellow Fever (YF). The table comprises laboratory findings for the patient from day 3 of illness onset until day 9 (after which the patient died). YF viral DNA was found in serum samples from day 3, where the viral load reached 14,000 copies per mL. Several medical interventions were taken to help the patient, including the administration of fresh frozen plasma, platelets, red cells, and coagulation factor VIII. The patient also received advanced support treatment in the form of mechanical ventilation and plasmapheresis. Though the patient‚Äôs temperature remained stable during their illness, unfortunately, the patient‚Äôs condition did not improve. On days 7 and 8, the patient‚Äôs health declined further, with symptoms such as nosebleeds, gastrointestinal bleeding, and hematoma.\nThe various tests are identified in the test column. The following listing provides the full names of any abbreviations seen in that column.\n\n\"WBC\": white blood cells.\n\"RBC\": red blood cells.\n\"Hb\": hemoglobin.\n\"PLT\": platelets.\n\"ALT\": alanine aminotransferase.\n\"AST\": aspartate aminotransferase.\n\"TBIL\": total bilirubin.\n\"DBIL\": direct bilirubin.\n\"NH3\": hydrogen nitride.\n\"PT\": prothrombin time.\n\"APTT\": activated partial thromboplastin time.\n\"PTA\": prothrombin time activity.\n\"DD\": D-dimer.\n\"FDP\": fibrinogen degradation products.\n\"LDH\": lactate dehydrogenase.\n\"HBDH\": hydroxybutyrate dehydrogenase.\n\"CK\": creatine kinase.\n\"CKMB\": the MB fraction of creatine kinase.\n\"BNP\": B-type natriuetic peptide.\n\"MYO\": myohemoglobin.\n\"TnI\": troponin inhibitory.\n\"CREA\": creatinine.\n\"BUN\": blood urea nitrogen.\n\"AMY\": amylase.\n\"LPS\": lipase.\n\"K\": kalium.\n\"Na\": sodium.\n\"Cl\": chlorine.\n\"Ca\": calcium.\n\"P\": phosphorus.\n\"Lac\": lactate, blood.\n\"CRP\": c-reactive protein.\n\"PCT\": procalcitonin.\n\"IL-6\": interleukin-6.\n\"CD3+CD4+\": CD4+T lymphocytes.\n\"CD3+CD8+\": CD8+T lymphocytes.\n\n\n\nThis is a dataset with 39 rows and 11 columns.\n\ntest: The name of the test.\nunits: The measurement units for the test.\nday_3, day_4, day_5, day_6, day_7, day_8, day_9: Measurement values associated with each test administered from days 3 to 9. A missing value indicates that the test could not be performed that day.\nnorm_l, norm_u: Lower and upper bounds for the normal range associated with the test.\n\n\n\n\nRows: 39\nColumns: 11\n$ test   &lt;str&gt; 'Viral load', 'WBC', 'Neutrophils'\n$ units  &lt;str&gt; 'copies per mL', 'x10^9 / L', 'x10^9 / L'\n$ day_3  &lt;f64&gt; 12000.0, 5.26, 4.87\n$ day_4  &lt;f64&gt; 4200.0, 4.26, 4.72\n$ day_5  &lt;f64&gt; 1600.0, 9.92, 7.92\n$ day_6  &lt;f64&gt; 830.0, 10.49, 18.21\n$ day_7  &lt;f64&gt; 760.0, 24.77, 22.08\n$ day_8  &lt;f64&gt; 520.0, 30.26, 27.17\n$ day_9  &lt;f64&gt; 250.0, 19.03, 16.59\n$ norm_l &lt;f64&gt; None, 4.0, 2.0\n$ norm_u &lt;f64&gt; None, 10.0, 8.0"
  },
  {
    "objectID": "reference/data.illness.html#details",
    "href": "reference/data.illness.html#details",
    "title": "data.illness",
    "section": "",
    "text": "This is a dataset with 39 rows and 11 columns.\n\ntest: The name of the test.\nunits: The measurement units for the test.\nday_3, day_4, day_5, day_6, day_7, day_8, day_9: Measurement values associated with each test administered from days 3 to 9. A missing value indicates that the test could not be performed that day.\nnorm_l, norm_u: Lower and upper bounds for the normal range associated with the test."
  },
  {
    "objectID": "reference/data.illness.html#preview",
    "href": "reference/data.illness.html#preview",
    "title": "data.illness",
    "section": "",
    "text": "Rows: 39\nColumns: 11\n$ test   &lt;str&gt; 'Viral load', 'WBC', 'Neutrophils'\n$ units  &lt;str&gt; 'copies per mL', 'x10^9 / L', 'x10^9 / L'\n$ day_3  &lt;f64&gt; 12000.0, 5.26, 4.87\n$ day_4  &lt;f64&gt; 4200.0, 4.26, 4.72\n$ day_5  &lt;f64&gt; 1600.0, 9.92, 7.92\n$ day_6  &lt;f64&gt; 830.0, 10.49, 18.21\n$ day_7  &lt;f64&gt; 760.0, 24.77, 22.08\n$ day_8  &lt;f64&gt; 520.0, 30.26, 27.17\n$ day_9  &lt;f64&gt; 250.0, 19.03, 16.59\n$ norm_l &lt;f64&gt; None, 4.0, 2.0\n$ norm_u &lt;f64&gt; None, 10.0, 8.0"
  },
  {
    "objectID": "reference/system_fonts.html",
    "href": "reference/system_fonts.html",
    "title": "system_fonts",
    "section": "",
    "text": "system_fonts(name='system-ui')\nGet a themed font stack that works well across systems.\nA font stack can be obtained from system_fonts() using one of various keywords such as \"system-ui\", \"old-style\", and \"humanist\" (there are 15 in total) representing a themed set of fonts. These sets comprise a font family that has been tested to work across a wide range of computer systems."
  },
  {
    "objectID": "reference/system_fonts.html#parameters",
    "href": "reference/system_fonts.html#parameters",
    "title": "system_fonts",
    "section": "Parameters",
    "text": "Parameters\n\nname : FontStackName = 'system-ui'\n\nThe name of a font stack. Must be drawn from the set of \"system-ui\" (the default), \"transitional\", \"old-style\", \"humanist\", \"geometric-humanist\", \"classical-humanist\", \"neo-grotesque\", \"monospace-slab-serif\", \"monospace-code\", \"industrial\", \"rounded-sans\", \"slab-serif\", \"antique\", \"didone\", and \"handwritten\"."
  },
  {
    "objectID": "reference/system_fonts.html#returns",
    "href": "reference/system_fonts.html#returns",
    "title": "system_fonts",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of font names that make up the font stack."
  },
  {
    "objectID": "reference/system_fonts.html#the-font-stacks-and-the-individual-fonts-used-by-platform",
    "href": "reference/system_fonts.html#the-font-stacks-and-the-individual-fonts-used-by-platform",
    "title": "system_fonts",
    "section": "The font stacks and the individual fonts used by platform",
    "text": "The font stacks and the individual fonts used by platform\n\nSystem UI (\"system-ui\")\nfont-family: system-ui, sans-serif;\nThe operating system interface‚Äôs default typefaces are known as system UI fonts. They contain a variety of font weights, are quite readable at small sizes, and are perfect for UI elements. These typefaces serve as a great starting point for text in data tables and so this font stack is the default for Great Tables.\n\n\nTransitional (\"transitional\")\nfont-family: Charter, 'Bitstream Charter', 'Sitka Text', Cambria, serif;\nThe Enlightenment saw the development of transitional typefaces, which combine Old Style and Modern typefaces. Times New Roman, a transitional typeface created for the Times of London newspaper, is among the most well-known instances of this style.\n\n\nOld Style (\"old-style\")\nfont-family: 'Iowan Old Style', 'Palatino Linotype', 'URW Palladio L', P052, serif;\nOld style typefaces were created during the Renaissance and are distinguished by diagonal stress, a lack of contrast between thick and thin strokes, and rounded serifs. Garamond is among the most well-known instances of an antique typeface.\n\n\nHumanist (\"humanist\")\nfont-family: Seravek, 'Gill Sans Nova', Ubuntu, Calibri, 'DejaVu Sans', source-sans-pro, sans-serif;\nLow contrast between thick and thin strokes and organic, calligraphic forms are traits of humanist typefaces. These typefaces, which draw their inspiration from Renaissance calligraphy, are frequently regarded as being more readable and easier to read than other sans serif typefaces.\n\n\nGeometric Humanist (\"geometric-humanist\")\nfont-family: Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;\nClean, geometric forms and consistent stroke widths are characteristics of geometric humanist typefaces. These typefaces, which are frequently used for headlines and other display purposes, are frequently thought to be contemporary and slick in appearance. A well-known example of this classification is Futura.\n\n\nClassical Humanist (\"classical-humanist\")\nfont-family: Optima, Candara, 'Noto Sans', source-sans-pro, sans-serif;\nThe way the strokes gradually widen as they approach the stroke terminals without ending in a serif is what distinguishes classical humanist typefaces. The stone carving on Renaissance-era tombstones and classical Roman capitals served as inspiration for these typefaces.\n\n\nNeo-Grotesque (\"neo-grotesque\")\nfont-family: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;\nNeo-grotesque typefaces are a form of sans serif that originated in the late 19th and early 20th centuries. They are distinguished by their crisp, geometric shapes and regular stroke widths. Helvetica is among the most well-known examples of a Neo-grotesque typeface.\n\n\nMonospace Slab Serif (\"monospace-slab-serif\")\nfont-family: 'Nimbus Mono PS', 'Courier New', monospace;\nMonospace slab serif typefaces are distinguished by their fixed-width letters, which are the same width irrespective of their shape, and their straightforward, geometric forms. For reports, tabular work, and technical documentation, this technique is used to simulate typewriter output.\n\n\nMonospace Code (\"monospace-code\")\nfont-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;\nSpecifically created for use in programming and other technical applications, monospace code typefaces are used in these fields. These typefaces are distinguished by their clear, readable forms and monospaced design, which ensures that all letters and characters are the same width.\n\n\nIndustrial (\"industrial\")\nfont-family: Bahnschrift, 'DIN Alternate', 'Franklin Gothic Medium', 'Nimbus Sans Narrow', sans-serif-condensed, sans-serif;\nThe development of industrial typefaces began in the late 19th century and was greatly influenced by the industrial and technological advancements of the time. Industrial typefaces are distinguished by their strong sans serif letterforms, straightforward appearance, and use of geometric shapes and straight lines.\n\n\nRounded Sans (\"rounded-sans\")\nfont-family: ui-rounded, 'Hiragino Maru Gothic ProN', Quicksand, Comfortaa, Manjari, 'Arial Rounded MT', 'Arial Rounded MT Bold', Calibri, source-sans-pro, sans-serif;\nThe rounded, curved letterforms that define rounded typefaces give them a softer, friendlier appearance. The typeface‚Äôs rounded edges give it a more natural and playful feel, making it appropriate for use in casual or kid-friendly designs. Since the 1950s, the rounded sans-serif design has gained popularity and is still frequently used in branding, graphic design, and other fields.\n\n\nSlab Serif (\"slab-serif\")\nfont-family: Rockwell, 'Rockwell Nova', 'Roboto Slab', 'DejaVu Serif', 'Sitka Small', serif;\nSlab Serif typefaces are distinguished by the thick, block-like serifs that appear at the ends of each letterform. Typically, these serifs are unbracketed, which means that they do not have any curved or tapered transitions to the letter‚Äôs main stroke.\n\n\nAntique (\"antique\")\nfont-family: Superclarendon, 'Bookman Old Style', 'URW Bookman', 'URW Bookman L', 'Georgia Pro', Georgia, serif;\nSerif typefaces that were popular in the 19th century include antique typefaces, also referred to as Egyptians. They are distinguished by their thick, uniform stroke weight and block-like serifs. The typeface Clarendon is a highly regarded example of this style and Superclarendon is a modern take on that revered typeface.\n\n\nDidone (\"didone\")\nfont-family: Didot, 'Bodoni MT', 'Noto Serif Display', 'URW Palladio L', P052, Sylfaen, serif;\nDidone typefaces, also referred to as Modern typefaces, are distinguished by their vertical stress, sharp contrast between thick and thin strokes, and hairline serifs without bracketing. The Didone style first appeared in the late 18th century and became well-known in the early 19th century. Bodoni and Didot are two of the most well-known typefaces in this category.\n\n\nHandwritten (\"handwritten\")\nfont-family: 'Segoe Print', 'Bradley Hand', Chilanka, TSCu_Comic, casual, cursive;\nThe appearance and feel of handwriting are replicated by handwritten typefaces. Although there are a wide variety of handwriting styles, this font stack tends to use a more casual and commonplace style. In regards to these types of fonts in tables, one can say that any table having a handwritten font will evoke a feeling of gleefulness."
  },
  {
    "objectID": "reference/system_fonts.html#examples",
    "href": "reference/system_fonts.html#examples",
    "title": "system_fonts",
    "section": "Examples",
    "text": "Examples\nUsing select columns from the exibble dataset, let‚Äôs create a table with a number of components added. Following that, we‚Äôll set a font for the entire table using the tab_options() method with the table_font_names parameter. Instead of passing a list of font names, we‚Äôll use the system_fonts() helper function to get a font stack. In this case, we‚Äôll use the \"industrial\" font stack.\n\nfrom great_tables import GT, exibble, md, system_fonts\n\n(\n  GT(\n    exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n    rowname_col=\"row\",\n    groupname_col=\"group\"\n  )\n  .tab_header(\n    title=md(\"Data listing from **exibble**\"),\n    subtitle=md(\"`exibble` is a **Great Tables** dataset.\")\n  )\n  .fmt_number(columns=\"num\")\n  .fmt_currency(columns=\"currency\")\n  .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n  .opt_align_table_header(align=\"left\")\n  .tab_options(table_font_names=system_fonts(\"industrial\"))\n)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nInvoking the system_fonts() helper function with the \"industrial\" argument will return a list of font names that make up the font stack. This is exactly the type of input that the table_font_names parameter requires."
  },
  {
    "objectID": "reference/GT.save.html",
    "href": "reference/GT.save.html",
    "title": "GT.save",
    "section": "",
    "text": "GT.save(\n    self,\n    file,\n    selector='table',\n    scale=1.0,\n    expand=5,\n    web_driver='chrome',\n    window_size=(6000, 6000),\n    debug_port=None,\n    encoding='utf-8',\n    _debug_dump=None,\n)\nProduce a high-resolution image file or PDF of the table.\nThe output file is created by taking a screenshot of the table using a headless browser.\n\n\n\nfile : Path | str\n\nThe name of the file to save the image to. Accepts names ending with .png, .bmp, and other image extensions. Also accepts the extension .pdf.\n\nselector : str = 'table'\n\n(NOT IMPLEMENTED) The HTML element name used to select table. Defaults to the whole table.\n\nscale : float = 1.0\n\nThe scaling factor that will be used when generating the image. Lower values decrease resolution. A scale of 2 is equivalent to doubling the width of the table in pixels. Note that higher resolution results in larger file sizes.\n\nexpand : int = 5\n\n(NOT IMPLEMENTED) The number of pixels to expand the screenshot by. This can be increased to capture more of the surrounding area, or decreased to capture less.\n\nweb_driver : WebDrivers | webdriver.Remote = 'chrome'\n\nThe webdriver to use when taking the screenshot. Either a driver name, or webdriver instance. By default, uses Google Chrome. Supports \"firefox\" (Mozilla Firefox), \"safari\" (Apple Safari), and \"edge\" (Microsoft Edge). Specified browser must be installed. Note that if a webdriver instance is passed, options that require setting up a webdriver, like debug_port, will not be used.\n\nwindow_size : tuple[int, int] = (6000, 6000)\n\nThe size of the browser window to use when laying out the table. This shouldn‚Äôt be necessary to capture a table, but may affect the tables appearance.\n\ndebug_port : None | int = None\n\nPort number to use for debugging. By default no debugging port is opened.\n\nencoding : str = 'utf-8'\n\nThe character encoding used for the HTML content.\n\n**_debug_dump** : DebugDumpOptions | None = None\n\nWhether the saved image should be a big browser window, with key elements outlined. This is helpful for debugging this function‚Äôs resizing, cropping heuristics. This is an internal parameter and subject to change.\n\n\n\n\n\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining.\n\n\n\n\n\nWe create the output file based on the HTML version of the table.\nThis process is facilitated by two libraries:\n\nselenium, which is used to control the Chrome browser and take a screenshot of the table.\nPIL, which is used to crop the screenshot to only include the table element of the page.\n\nBoth of these packages needs to be installed before attempting to save any table as an image file. The selenium package also requires the Chrome browser to be installed on the system.\nA pip-based reinstallation of Great Tables through the following command will install these required packages:\npip install great_tables[extra]"
  },
  {
    "objectID": "reference/GT.save.html#parameters",
    "href": "reference/GT.save.html#parameters",
    "title": "GT.save",
    "section": "",
    "text": "file : Path | str\n\nThe name of the file to save the image to. Accepts names ending with .png, .bmp, and other image extensions. Also accepts the extension .pdf.\n\nselector : str = 'table'\n\n(NOT IMPLEMENTED) The HTML element name used to select table. Defaults to the whole table.\n\nscale : float = 1.0\n\nThe scaling factor that will be used when generating the image. Lower values decrease resolution. A scale of 2 is equivalent to doubling the width of the table in pixels. Note that higher resolution results in larger file sizes.\n\nexpand : int = 5\n\n(NOT IMPLEMENTED) The number of pixels to expand the screenshot by. This can be increased to capture more of the surrounding area, or decreased to capture less.\n\nweb_driver : WebDrivers | webdriver.Remote = 'chrome'\n\nThe webdriver to use when taking the screenshot. Either a driver name, or webdriver instance. By default, uses Google Chrome. Supports \"firefox\" (Mozilla Firefox), \"safari\" (Apple Safari), and \"edge\" (Microsoft Edge). Specified browser must be installed. Note that if a webdriver instance is passed, options that require setting up a webdriver, like debug_port, will not be used.\n\nwindow_size : tuple[int, int] = (6000, 6000)\n\nThe size of the browser window to use when laying out the table. This shouldn‚Äôt be necessary to capture a table, but may affect the tables appearance.\n\ndebug_port : None | int = None\n\nPort number to use for debugging. By default no debugging port is opened.\n\nencoding : str = 'utf-8'\n\nThe character encoding used for the HTML content.\n\n**_debug_dump** : DebugDumpOptions | None = None\n\nWhether the saved image should be a big browser window, with key elements outlined. This is helpful for debugging this function‚Äôs resizing, cropping heuristics. This is an internal parameter and subject to change."
  },
  {
    "objectID": "reference/GT.save.html#returns",
    "href": "reference/GT.save.html#returns",
    "title": "GT.save",
    "section": "",
    "text": ": GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.save.html#details",
    "href": "reference/GT.save.html#details",
    "title": "GT.save",
    "section": "",
    "text": "We create the output file based on the HTML version of the table.\nThis process is facilitated by two libraries:\n\nselenium, which is used to control the Chrome browser and take a screenshot of the table.\nPIL, which is used to crop the screenshot to only include the table element of the page.\n\nBoth of these packages needs to be installed before attempting to save any table as an image file. The selenium package also requires the Chrome browser to be installed on the system.\nA pip-based reinstallation of Great Tables through the following command will install these required packages:\npip install great_tables[extra]"
  },
  {
    "objectID": "reference/GT.fmt_date.html",
    "href": "reference/GT.fmt_date.html",
    "title": "GT.fmt_date",
    "section": "",
    "text": "GT.fmt_date(\n    self,\n    columns=None,\n    rows=None,\n    date_style='iso',\n    pattern='{x}',\n    locale=None,\n)\nFormat values as dates.\nFormat input values to time values using one of 17 preset date styles. Input can be in the form of date type or as a ISO-8601 string (in the form of YYYY-MM-DD HH:MM:SS or YYYY-MM-DD)."
  },
  {
    "objectID": "reference/GT.fmt_date.html#parameters",
    "href": "reference/GT.fmt_date.html#parameters",
    "title": "GT.fmt_date",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\ndate_style : DateStyle = 'iso'\n\nThe date style to use. By default this is the short name \"iso\" which corresponds to ISO 8601 date formatting. There are 41 date styles in total.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.fmt_date.html#formatting-with-the-date_style-argument",
    "href": "reference/GT.fmt_date.html#formatting-with-the-date_style-argument",
    "title": "GT.fmt_date",
    "section": "Formatting with the date_style= argument",
    "text": "Formatting with the date_style= argument\nWe need to supply a preset date style to the date_style= argument. The date styles are numerous and can handle localization to any supported locale. The following table provides a listing of all date styles and their output values (corresponding to an input date of 2000-02-29).\n\n\n\n\nDate Style\nOutput\n\n\n\n\n1\n\"iso\"\n\"2000-02-29\"\n\n\n2\n\"wday_month_day_year\"\n\"Tuesday, February 29, 2000\"\n\n\n3\n\"wd_m_day_year\"\n\"Tue, Feb 29, 2000\"\n\n\n4\n\"wday_day_month_year\"\n\"Tuesday 29 February 2000\"\n\n\n5\n\"month_day_year\"\n\"February 29, 2000\"\n\n\n6\n\"m_day_year\"\n\"Feb 29, 2000\"\n\n\n7\n\"day_m_year\"\n\"29 Feb 2000\"\n\n\n8\n\"day_month_year\"\n\"29 February 2000\"\n\n\n9\n\"day_month\"\n\"29 February\"\n\n\n10\n\"day_m\"\n\"29 Feb\"\n\n\n11\n\"year\"\n\"2000\"\n\n\n12\n\"month\"\n\"February\"\n\n\n13\n\"day\"\n\"29\"\n\n\n14\n\"year.mn.day\"\n\"2000/02/29\"\n\n\n15\n\"y.mn.day\"\n\"00/02/29\"\n\n\n16\n\"year_week\"\n\"2000-W09\"\n\n\n17\n\"year_quarter\"\n\"2000-Q1\""
  },
  {
    "objectID": "reference/GT.fmt_date.html#returns",
    "href": "reference/GT.fmt_date.html#returns",
    "title": "GT.fmt_date",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_date.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_date.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_date",
    "section": "Adapting output to a specific locale",
    "text": "Adapting output to a specific locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). Note that a locale value provided here will override any global locale setting performed in GT()‚Äôs own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_date.html#examples",
    "href": "reference/GT.fmt_date.html#examples",
    "title": "GT.fmt_date",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the exibble dataset to create a simple, two-column table (keeping only the date and time columns). With the fmt_date() method, we‚Äôll format the date column to display dates formatted with the \"month_day_year\" date style.\n\nfrom great_tables import GT, exibble\n\nexibble_mini = exibble[[\"date\", \"time\"]]\n\n(\n    GT(exibble_mini)\n    .fmt_date(columns=\"date\", date_style=\"month_day_year\")\n)\n\n\n\n\n\n\n\n  date\n  time\n\n\n\n  \n    January 15, 2015\n    13:35\n  \n  \n    February 15, 2015\n    14:40\n  \n  \n    March 15, 2015\n    15:45\n  \n  \n    April 15, 2015\n    16:50\n  \n  \n    May 15, 2015\n    17:55\n  \n  \n    June 15, 2015\n    \n  \n  \n    \n    19:10\n  \n  \n    August 15, 2015\n    20:20"
  },
  {
    "objectID": "reference/GT.fmt_date.html#see-also",
    "href": "reference/GT.fmt_date.html#see-also",
    "title": "GT.fmt_date",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_date(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/style.borders.html",
    "href": "reference/style.borders.html",
    "title": "style.borders",
    "section": "",
    "text": "style.borders(sides='all', color='#000000', style='solid', weight='1px')\nA style specification for cell borders.\nThe styles.borders() class is to be used with the tab_style() method, which itself allows for the setting of custom styles to one or more cells. The sides argument is where we define which borders should be modified (e.g., \"left\", \"right\", etc.). With that selection, the color, style, and weight of the selected borders can then be modified.\n\n\n\nsides : Literal['all', 'top', 'bottom', 'left', 'right'] | list[Literal['all', 'top', 'bottom', 'left', 'right']] = 'all'\n\nThe border sides to be modified. Options include \"left\", \"right\", \"top\", and \"bottom\". For all borders surrounding the selected cells, we can use the \"all\" option.\n\ncolor : str | ColumnExpr = '#000000'\n\nThe border color can be defined with any valid CSS color value, such as a hex code, a named color, or an RGB value. The default color value is \"#000000\" (black).\n\nstyle : str | ColumnExpr = 'solid'\n\nThe border style can be one of either \"solid\" (the default), \"dashed\", \"dotted\", \"hidden\", or \"double\".\n\nweight : str | ColumnExpr = '1px'\n\nThe default value for weight is \"1px\" and higher values will become more visually prominent.\n\n\n\n\n\n\n : CellStyleBorders\n\nA CellStyleBorders object, which is used for a styles argument if specifying cell borders.\n\n\n\n\n\nSee GT.tab_style().\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncolor\nstr(object=‚Äô‚Äô) -&gt; str\n\n\nsides\nstr(object=‚Äô‚Äô) -&gt; str\n\n\nstyle\nstr(object=‚Äô‚Äô) -&gt; str\n\n\nweight\nstr(object=‚Äô‚Äô) -&gt; str"
  },
  {
    "objectID": "reference/style.borders.html#parameters",
    "href": "reference/style.borders.html#parameters",
    "title": "style.borders",
    "section": "",
    "text": "sides : Literal['all', 'top', 'bottom', 'left', 'right'] | list[Literal['all', 'top', 'bottom', 'left', 'right']] = 'all'\n\nThe border sides to be modified. Options include \"left\", \"right\", \"top\", and \"bottom\". For all borders surrounding the selected cells, we can use the \"all\" option.\n\ncolor : str | ColumnExpr = '#000000'\n\nThe border color can be defined with any valid CSS color value, such as a hex code, a named color, or an RGB value. The default color value is \"#000000\" (black).\n\nstyle : str | ColumnExpr = 'solid'\n\nThe border style can be one of either \"solid\" (the default), \"dashed\", \"dotted\", \"hidden\", or \"double\".\n\nweight : str | ColumnExpr = '1px'\n\nThe default value for weight is \"1px\" and higher values will become more visually prominent."
  },
  {
    "objectID": "reference/style.borders.html#returns",
    "href": "reference/style.borders.html#returns",
    "title": "style.borders",
    "section": "",
    "text": ": CellStyleBorders\n\nA CellStyleBorders object, which is used for a styles argument if specifying cell borders."
  },
  {
    "objectID": "reference/style.borders.html#examples",
    "href": "reference/style.borders.html#examples",
    "title": "style.borders",
    "section": "",
    "text": "See GT.tab_style()."
  },
  {
    "objectID": "reference/style.borders.html#attributes",
    "href": "reference/style.borders.html#attributes",
    "title": "style.borders",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncolor\nstr(object=‚Äô‚Äô) -&gt; str\n\n\nsides\nstr(object=‚Äô‚Äô) -&gt; str\n\n\nstyle\nstr(object=‚Äô‚Äô) -&gt; str\n\n\nweight\nstr(object=‚Äô‚Äô) -&gt; str"
  },
  {
    "objectID": "reference/GT.opt_row_striping.html",
    "href": "reference/GT.opt_row_striping.html",
    "title": "GT.opt_row_striping",
    "section": "",
    "text": "GT.opt_row_striping(self, row_striping=True)\nOption to add or remove row striping.\nBy default, a table does not have row striping enabled. However, this method allows us to easily enable or disable striped rows in the table body. It‚Äôs a convenient shortcut for tab_options(row_striping_include_table_body=&lt;True|False&gt;)."
  },
  {
    "objectID": "reference/GT.opt_row_striping.html#parameters",
    "href": "reference/GT.opt_row_striping.html#parameters",
    "title": "GT.opt_row_striping",
    "section": "Parameters",
    "text": "Parameters\n\nrow_striping : bool = True\n\nA boolean that indicates whether row striping should be added or removed. Defaults to True."
  },
  {
    "objectID": "reference/GT.opt_row_striping.html#returns",
    "href": "reference/GT.opt_row_striping.html#returns",
    "title": "GT.opt_row_striping",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.opt_row_striping.html#examples",
    "href": "reference/GT.opt_row_striping.html#examples",
    "title": "GT.opt_row_striping",
    "section": "Examples",
    "text": "Examples\nUsing only a few columns from the exibble dataset, let‚Äôs create a table with a number of components added. Following that, we‚Äôll add row striping to every second row with the opt_row_striping() method.\n\nfrom great_tables import GT, exibble, md\n\n(\n    GT(\n        exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n        rowname_col=\"row\",\n        groupname_col=\"group\"\n    )\n    .tab_header(\n        title=md(\"Data listing from **exibble**\"),\n        subtitle=md(\"`exibble` is a **Great Tables** dataset.\")\n    )\n    .fmt_number(columns=\"num\")\n    .fmt_currency(columns=\"currency\")\n    .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n    .opt_row_striping()\n)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset."
  },
  {
    "objectID": "reference/loc.spanner_labels.html",
    "href": "reference/loc.spanner_labels.html",
    "title": "loc.spanner_labels",
    "section": "",
    "text": "loc.spanner_labels(ids=None)\nTarget spanner labels.\nWith loc.spanner_labels(), we can target the cells containing the spanner labels. This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.spanner_labels.html#parameters",
    "href": "reference/loc.spanner_labels.html#parameters",
    "title": "loc.spanner_labels",
    "section": "Parameters",
    "text": "Parameters\n\nids : SelectExpr = None\n\nThe ID values for the spanner labels to target. A list of one or more ID values is required."
  },
  {
    "objectID": "reference/loc.spanner_labels.html#returns",
    "href": "reference/loc.spanner_labels.html#returns",
    "title": "loc.spanner_labels",
    "section": "Returns",
    "text": "Returns\n\n : LocSpannerLabels\n\nA LocSpannerLabels object, which is used for a locations= argument if specifying the table‚Äôs spanner labels."
  },
  {
    "objectID": "reference/loc.spanner_labels.html#examples",
    "href": "reference/loc.spanner_labels.html#examples",
    "title": "loc.spanner_labels",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. We create two spanner labels through two separate calls of the tab_spanner() method. In each of those, the text supplied to label= argument is used as the ID value (though they have to be explicitly set via the id= argument). We will style only the spanner label having the text \"performance\" by using locations=loc.spanner_labels(ids=[\"performance\"]) within tab_style().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(gtcars[[\"mfr\", \"model\", \"hp\", \"trq\", \"msrp\"]].head(5))\n    .tab_spanner(\n        label=\"performance\",\n        columns=[\"hp\", \"trq\"]\n    )\n    .tab_spanner(\n        label=\"make and model\",\n        columns=[\"mfr\", \"model\"]\n    )\n    .tab_style(\n        style=style.text(color=\"blue\", weight=\"bold\"),\n        locations=loc.spanner_labels(ids=[\"performance\"])\n    )\n    .fmt_integer(columns=[\"hp\", \"trq\"])\n    .fmt_currency(columns=\"msrp\", decimals=0)\n)\n\n\n\n\n\n\n\n  \n    make and model\n  \n  \n    performance\n  \n  msrp\n\n\n  mfr\n  model\n  hp\n  trq\n\n\n\n  \n    Ford\n    GT\n    647\n    550\n    $447,000\n  \n  \n    Ferrari\n    458 Speciale\n    597\n    398\n    $291,744\n  \n  \n    Ferrari\n    458 Spider\n    562\n    398\n    $263,553\n  \n  \n    Ferrari\n    458 Italia\n    562\n    398\n    $233,509\n  \n  \n    Ferrari\n    488 GTB\n    661\n    561\n    $245,400"
  },
  {
    "objectID": "reference/data.metro.html",
    "href": "reference/data.metro.html",
    "title": "data.metro",
    "section": "",
    "text": "data.metro\nThe stations of the Paris Metro.\nA dataset with information on all 314 Paris Metro stations as of June 2024. Each record represents a station, describing which Metro lines are serviced by the station, which other connections are available, and annual passenger volumes. Basic location information is provided for each station in terms where they reside on a municipal level, and, through latitude/longitude coordinates.\nThe system has 16 lines (numbered from 1 to 14, with two additional lines: 3bis and 7bis) and covers over 200 kilometers of track. The Metro runs on standard gauge tracks (1,435 mm) and operates using a variety of rolling stock, including rubber-tired trains and steel-wheeled trains (which are far more common).\nThe Metro is operated by the RATP, which also operates other transit systems in the region, including buses, trams, and the RER. The RER is an important component of the region‚Äôs transit infrastructure, and several RER stations have connectivity with the Metro. This integration allows passengers to transfer between those two systems seamlessly. The Metro also has connections to the Transilien rail network, tramway stations, several major train stations (e.g., Gare du Nord, Gare de l‚ÄôEst, etc.), and many bus lines.\n\n\nThis is a dataset with 314 rows and 11 columns.\n\nname: The name of the station.\ncaption: In some cases, a station will have a caption that might describe a nearby place of interest. This is missing if there isn‚Äôt a caption for the station name.\nlines: All Metro lines associated with the station. This is a string-based, comma-separated series of line names.\nconnect_rer: Station connections with the RER. The RER system has five lines (A, B, C, D, and E) with 257 stations and several interchanges with the Metro.\nconnect_tramway: Connections with tramway lines. This system has twelve lines in operation (T1, T2, T3a, T3b, T4, T5, T6, T7, T8, T9, T11, and T13) with 235 stations.\nconnect_transilien: Connections with Transilien lines. This system has eight lines in operation (H, J, K, L, N, P, R, and U).\nconnect_other: Other connections with transportation infrastructure such as regional, intercity, night, and high-speed trains (typically at railway stations).\nlatitude, longitude: The location of the station, given as latitude and longitude values in decimal degrees.\nlocation: The arrondissement of Paris or municipality in which the station resides. For some stations located at borders, the grouping of locations will be presented as a comma-separated series.\npassengers: The total number of Metro station entries during 2021. Some of the newest stations in the Metro system do not have this data, thus they show as missing values.\n\n\n\n\nRows: 314\nColumns: 11\n$ name               &lt;str&gt; 'Argentine', 'Bastille', 'B√©rault'\n$ caption            &lt;str&gt; None, None, None\n$ lines              &lt;str&gt; '1', '1, 5, 8', '1'\n$ connect_rer        &lt;str&gt; None, None, None\n$ connect_tramway    &lt;str&gt; None, None, None\n$ connect_transilien &lt;str&gt; None, None, None\n$ connect_other      &lt;str&gt; None, None, None\n$ passengers         &lt;i64&gt; 2079212, 8069243, 2106827\n$ latitude           &lt;f64&gt; 48.875278, 48.853082, 48.845278\n$ longitude          &lt;f64&gt; 2.29, 2.369077, 2.428333\n$ location           &lt;str&gt; 'Paris 16th, Paris 17th',\n                           'Paris 4th, Paris 11th, Paris 12th',\n                           'Saint-Mand√©, Vincennes'"
  },
  {
    "objectID": "reference/data.metro.html#details",
    "href": "reference/data.metro.html#details",
    "title": "data.metro",
    "section": "",
    "text": "This is a dataset with 314 rows and 11 columns.\n\nname: The name of the station.\ncaption: In some cases, a station will have a caption that might describe a nearby place of interest. This is missing if there isn‚Äôt a caption for the station name.\nlines: All Metro lines associated with the station. This is a string-based, comma-separated series of line names.\nconnect_rer: Station connections with the RER. The RER system has five lines (A, B, C, D, and E) with 257 stations and several interchanges with the Metro.\nconnect_tramway: Connections with tramway lines. This system has twelve lines in operation (T1, T2, T3a, T3b, T4, T5, T6, T7, T8, T9, T11, and T13) with 235 stations.\nconnect_transilien: Connections with Transilien lines. This system has eight lines in operation (H, J, K, L, N, P, R, and U).\nconnect_other: Other connections with transportation infrastructure such as regional, intercity, night, and high-speed trains (typically at railway stations).\nlatitude, longitude: The location of the station, given as latitude and longitude values in decimal degrees.\nlocation: The arrondissement of Paris or municipality in which the station resides. For some stations located at borders, the grouping of locations will be presented as a comma-separated series.\npassengers: The total number of Metro station entries during 2021. Some of the newest stations in the Metro system do not have this data, thus they show as missing values."
  },
  {
    "objectID": "reference/data.metro.html#preview",
    "href": "reference/data.metro.html#preview",
    "title": "data.metro",
    "section": "",
    "text": "Rows: 314\nColumns: 11\n$ name               &lt;str&gt; 'Argentine', 'Bastille', 'B√©rault'\n$ caption            &lt;str&gt; None, None, None\n$ lines              &lt;str&gt; '1', '1, 5, 8', '1'\n$ connect_rer        &lt;str&gt; None, None, None\n$ connect_tramway    &lt;str&gt; None, None, None\n$ connect_transilien &lt;str&gt; None, None, None\n$ connect_other      &lt;str&gt; None, None, None\n$ passengers         &lt;i64&gt; 2079212, 8069243, 2106827\n$ latitude           &lt;f64&gt; 48.875278, 48.853082, 48.845278\n$ longitude          &lt;f64&gt; 2.29, 2.369077, 2.428333\n$ location           &lt;str&gt; 'Paris 16th, Paris 17th',\n                           'Paris 4th, Paris 11th, Paris 12th',\n                           'Saint-Mand√©, Vincennes'"
  },
  {
    "objectID": "reference/data.constants.html",
    "href": "reference/data.constants.html",
    "title": "data.constants",
    "section": "",
    "text": "data.constants\nThe fundamental physical constants.\nThis dataset contains values for over 300 basic fundamental constants in nature. The values originate from the 2018 adjustment which is based on the latest relevant precision measurements and improvements of theoretical calculations. Such work has been carried out under the authority of the Task Group on Fundamental Constants (TGFC) of the Committee on Data of the International Science Council (CODATA). These updated values became available on May 20, 2019. They are published at http://physics.nist.gov/constants, a website of the Fundamental Constants Data Center of the National Institute of Standards and Technology (NIST), Gaithersburg, Maryland, USA.\n\n\nThis is a dataset with 354 rows and 6 columns.\n\nname: The name of the constant.\nvalue: The value of the constant.\nuncert: The uncertainty associated with the value. If missing then the value is seen as an ‚Äòexact‚Äô value (e.g., an electron volt has the exact value of 1.602 176 634 e-19 J).\nsf_value, sf_uncert: The number of significant figures associated with the value and any uncertainty value.\nunits: The units associated with the constant.\n\n\n\n\nRows: 354\nColumns: 6\n$ name      &lt;str&gt; 'alpha particle-electron mass ratio',\n                  'alpha particle mass',\n                  'alpha particle mass energy equivalent'\n$ value     &lt;f64&gt; 7294.29954142, 6.6446573357e-27, 5.9719201914e-10\n$ uncert    &lt;f64&gt; 2.4e-07, 2e-36, 1.8e-19\n$ sf_value  &lt;i64&gt; 12, 11, 11\n$ sf_uncert &lt;i64&gt; 2, 2, 2\n$ units     &lt;str&gt; None, 'kg', 'J'"
  },
  {
    "objectID": "reference/data.constants.html#details",
    "href": "reference/data.constants.html#details",
    "title": "data.constants",
    "section": "",
    "text": "This is a dataset with 354 rows and 6 columns.\n\nname: The name of the constant.\nvalue: The value of the constant.\nuncert: The uncertainty associated with the value. If missing then the value is seen as an ‚Äòexact‚Äô value (e.g., an electron volt has the exact value of 1.602 176 634 e-19 J).\nsf_value, sf_uncert: The number of significant figures associated with the value and any uncertainty value.\nunits: The units associated with the constant."
  },
  {
    "objectID": "reference/data.constants.html#preview",
    "href": "reference/data.constants.html#preview",
    "title": "data.constants",
    "section": "",
    "text": "Rows: 354\nColumns: 6\n$ name      &lt;str&gt; 'alpha particle-electron mass ratio',\n                  'alpha particle mass',\n                  'alpha particle mass energy equivalent'\n$ value     &lt;f64&gt; 7294.29954142, 6.6446573357e-27, 5.9719201914e-10\n$ uncert    &lt;f64&gt; 2.4e-07, 2e-36, 1.8e-19\n$ sf_value  &lt;i64&gt; 12, 11, 11\n$ sf_uncert &lt;i64&gt; 2, 2, 2\n$ units     &lt;str&gt; None, 'kg', 'J'"
  },
  {
    "objectID": "reference/GT.fmt_datetime.html",
    "href": "reference/GT.fmt_datetime.html",
    "title": "GT.fmt_datetime",
    "section": "",
    "text": "GT.fmt_datetime(\n    self,\n    columns=None,\n    rows=None,\n    date_style='iso',\n    time_style='iso',\n    format_str=None,\n    sep=' ',\n    pattern='{x}',\n    locale=None,\n)\nFormat values as datetimes.\nFormat input values to datetime values using one of 17 preset date styles and one of 5 preset time styles. Input can be in the form of datetime values, or strings in the ISO 8601 forms of YYYY-MM-DD HH:MM:SS or YYYY-MM-DD."
  },
  {
    "objectID": "reference/GT.fmt_datetime.html#parameters",
    "href": "reference/GT.fmt_datetime.html#parameters",
    "title": "GT.fmt_datetime",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\ndate_style : DateStyle = 'iso'\n\nThe date style to use. By default this is the short name \"iso\" which corresponds to ISO 8601 date formatting. There are 41 date styles in total.\n\ntime_style : TimeStyle = 'iso'\n\nThe time style to use. By default this is the short name \"iso\" which corresponds to how times are formatted within ISO 8601 datetime values. There are 5 time styles in total.\n\nformat_str : str | None = None\n\nA string that specifies the format of the datetime string. This is a strftime() format string that can be used to format date or datetime input. If format= is provided, the date_style= and time_style= arguments are ignored.\n\nsep : str = ' '\n\nA string that separates the date and time components of the datetime string. The default is a space character (\" \"). This is ignored if format= is provided.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France). Only relevant if date_style= or time_style= are provided."
  },
  {
    "objectID": "reference/GT.fmt_datetime.html#formatting-with-the-date_style-and-time_style-arguments",
    "href": "reference/GT.fmt_datetime.html#formatting-with-the-date_style-and-time_style-arguments",
    "title": "GT.fmt_datetime",
    "section": "Formatting with the date_style= and time_style= arguments",
    "text": "Formatting with the date_style= and time_style= arguments\nIf not supplying a formatting string to format_str= we need to supply a preset date style to the date_style= argument and a preset time style to the time_style= argument. The date styles are numerous and can handle localization to any supported locale. The following table provides a listing of all date styles and their output values (corresponding to an input date of 2000-02-29 14:35:00).\n\n\n\n\nDate Style\nOutput\n\n\n\n\n1\n\"iso\"\n\"2000-02-29\"\n\n\n2\n\"wday_month_day_year\"\n\"Tuesday, February 29, 2000\"\n\n\n3\n\"wd_m_day_year\"\n\"Tue, Feb 29, 2000\"\n\n\n4\n\"wday_day_month_year\"\n\"Tuesday 29 February 2000\"\n\n\n5\n\"month_day_year\"\n\"February 29, 2000\"\n\n\n6\n\"m_day_year\"\n\"Feb 29, 2000\"\n\n\n7\n\"day_m_year\"\n\"29 Feb 2000\"\n\n\n8\n\"day_month_year\"\n\"29 February 2000\"\n\n\n9\n\"day_month\"\n\"29 February\"\n\n\n10\n\"day_m\"\n\"29 Feb\"\n\n\n11\n\"year\"\n\"2000\"\n\n\n12\n\"month\"\n\"February\"\n\n\n13\n\"day\"\n\"29\"\n\n\n14\n\"year.mn.day\"\n\"2000/02/29\"\n\n\n15\n\"y.mn.day\"\n\"00/02/29\"\n\n\n16\n\"year_week\"\n\"2000-W09\"\n\n\n17\n\"year_quarter\"\n\"2000-Q1\"\n\n\n\nThe time styles can also handle localization to any supported locale. The following table provides a listing of all time styles and their output values (corresponding to an input time of 2000-02-29 14:35:00).\n\n\n\n\nTime Style\nOutput\nNotes\n\n\n\n\n1\n\"iso\"\n\"14:35:00\"\nISO 8601, 24h\n\n\n2\n\"iso-short\"\n\"14:35\"\nISO 8601, 24h\n\n\n3\n\"h_m_s_p\"\n\"2:35:00 PM\"\n12h\n\n\n4\n\"h_m_p\"\n\"2:35 PM\"\n12h\n\n\n5\n\"h_p\"\n\"2 PM\"\n12h"
  },
  {
    "objectID": "reference/GT.fmt_datetime.html#returns",
    "href": "reference/GT.fmt_datetime.html#returns",
    "title": "GT.fmt_datetime",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_datetime.html#examples",
    "href": "reference/GT.fmt_datetime.html#examples",
    "title": "GT.fmt_datetime",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the exibble dataset to create a simple, two-column table (keeping only the date and time columns). With the fmt_datetime() method, we‚Äôll format the date column to display dates formatted with the \"month_day_year\" date style and the time column to display times formatted with the \"h_m_s_p\" time style.\n\nfrom great_tables import GT, exibble\n\nexibble_mini = exibble[[\"date\", \"time\"]]\n\n(\n    GT(exibble_mini)\n    .fmt_datetime(\n        columns=\"date\",\n        date_style=\"month_day_year\",\n        time_style=\"h_m_s_p\"\n    )\n)\n\n\n\n\n\n\n\n  date\n  time\n\n\n\n  \n    January 15, 2015 12:00:00 AM\n    13:35\n  \n  \n    February 15, 2015 12:00:00 AM\n    14:40\n  \n  \n    March 15, 2015 12:00:00 AM\n    15:45\n  \n  \n    April 15, 2015 12:00:00 AM\n    16:50\n  \n  \n    May 15, 2015 12:00:00 AM\n    17:55\n  \n  \n    June 15, 2015 12:00:00 AM\n    \n  \n  \n    \n    19:10\n  \n  \n    August 15, 2015 12:00:00 AM\n    20:20"
  },
  {
    "objectID": "reference/GT.fmt_icon.html",
    "href": "reference/GT.fmt_icon.html",
    "title": "GT.fmt_icon",
    "section": "",
    "text": "GT.fmt_icon(\n    self,\n    columns=None,\n    rows=None,\n    height=None,\n    sep=' ',\n    stroke_color=None,\n    stroke_width=None,\n    stroke_alpha=None,\n    fill_color=None,\n    fill_alpha=None,\n    margin_left=None,\n    margin_right=None,\n)\nUse icons within a table‚Äôs body cells.\nWe can draw from a library of thousands of icons and selectively insert them into a table. The fmt_icon() method makes this possible by mapping input cell labels to an icon name. We are exclusively using Font Awesome icons here so the reference is the short icon name. Multiple icons can be included per cell by separating icon names with commas (e.g., \"hard-drive,clock\"). The sep= argument allows for a common separator to be applied between icons."
  },
  {
    "objectID": "reference/GT.fmt_icon.html#parameters",
    "href": "reference/GT.fmt_icon.html#parameters",
    "title": "GT.fmt_icon",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\nheight : str | None = None\n\nThe absolute height of the icon in the table cell. By default, this is set to ‚Äú1em‚Äù.\n\nsep : str = ' '\n\nIn the output of icons within a body cell, sep= provides the separator between each icon.\n\nstroke_color : str | None = None\n\nThe icon stroke is essentially the outline of the icon. The color of the stroke can be modified by applying a single color here. If not provided then the default value of \"currentColor\" is applied so that the stroke color matches that of the parent HTML element‚Äôs color attribute.\n\nstroke_width : str | int | None = None\n\nThe stroke_width= option allows for setting the color of the icon outline stroke. By default, the stroke width is very small at ‚Äú1px‚Äù so a size adjustment here can sometimes be useful. If an integer value is provided then it is assumed to be in pixels.\n\nstroke_alpha : float | None = None\n\nThe level of transparency for the icon stroke can be controlled with a decimal value between 0 and 1.\n\nfill_color : str | dict[str, str] | None = None\n\nThe fill color of the icon can be set with fill_color=; providing a single color here will change the color of the fill but not of the icon‚Äôs ‚Äòstroke‚Äô or outline (use stroke_color= to modify that). A dictionary comprising the icon names with corresponding fill colors can alternatively be used here (e.g., {\"circle-check\" = \"green\", \"circle-xmark\" = \"red\"}. If nothing is provided then the default value of \"currentColor\" is applied so that the fill matches the color of the parent HTML element‚Äôs color attribute.\n\nfill_alpha : float | None = None\n\nThe level of transparency for the icon fill can be controlled with a decimal value between 0 and 1.\n\nmargin_left : str | None = None\n\nThe length value for the margin that‚Äôs to the left of the icon. By default, \"auto\" is used for this but if space is needed on the left-hand side then a length of \"0.2em\" is recommended as a starting point.\n\nmargin_right : str | None = None\n\nThe length value for the margin right of the icon. By default, \"auto\" is used but if space is needed on the right-hand side then a length of \"0.2em\" is recommended as a starting point."
  },
  {
    "objectID": "reference/GT.fmt_icon.html#returns",
    "href": "reference/GT.fmt_icon.html#returns",
    "title": "GT.fmt_icon",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_icon.html#examples",
    "href": "reference/GT.fmt_icon.html#examples",
    "title": "GT.fmt_icon",
    "section": "Examples",
    "text": "Examples\nFor this first example of generating icons with fmt_icon(), let‚Äôs make a simple DataFrame that has two columns of Font Awesome icon names. We separate multiple icons per cell with commas. By default, the icons are 1 em in height; we‚Äôre going to make the icons slightly larger here (so we can see the fine details of them) by setting height = ‚Äú4em‚Äù.\n\nimport pandas as pd\nfrom great_tables import GT\n\nanimals_foods_df = pd.DataFrame(\n    {\n        \"animals\": [\"hippo\", \"fish,spider\", \"mosquito,locust,frog\", \"dog,cat\", \"kiwi-bird\"],\n        \"foods\": [\"bowl-rice\", \"egg,pizza-slice\", \"burger,lemon,cheese\", \"carrot,hotdog\", \"bacon\"],\n    }\n)\n\n(\n    GT(animals_foods_df)\n    .fmt_icon(\n        columns=[\"animals\", \"foods\"],\n        height=\"4em\"\n    )\n    .cols_align(\n        align=\"center\",\n        columns=[\"animals\", \"foods\"]\n    )\n)\n\n\n\n\n\n\n\n  animals\n  foods\n\n\n\n  \n      \n      \n  \n  \n         \n         \n  \n  \n            \n            \n  \n  \n         \n         \n  \n  \n      \n      \n  \n\n\n\n\n\n\n        \n\n\nLet‚Äôs take a few rows from the towny dataset and make it so the csd_type column contains Font Awesome icon names (we want only the \"city\" and \"house-chimney\" icons here). After using fmt_icon() to format the csd_type column, we get icons that are representative of the two categories of municipality for this subset of data.\n\nimport polars as pl\nfrom great_tables.data import towny\n\ntowny_mini = (\n    pl.from_pandas(towny.loc[[323, 14, 26, 235]])\n    .select([\"name\", \"csd_type\", \"population_2021\"])\n    .with_columns(\n       csd_type = pl.when(pl.col(\"csd_type\") == \"town\")\n       .then(pl.lit(\"house-chimney\"))\n       .otherwise(pl.lit(\"city\"))\n    )\n)\n\n(\n   GT(towny_mini)\n   .fmt_integer(columns=\"population_2021\")\n   .fmt_icon(columns=\"csd_type\")\n   .cols_label(\n       csd_type=\"\",\n       name=\"City/Town\",\n       population_2021=\"Population\"\n   )\n)\n\n\n\n\n\n\n\n  City/Town\n  \n  Population\n\n\n\n  \n    Sarnia\n      \n    72,047\n  \n  \n    Arnprior\n      \n    9,629\n  \n  \n    Barrie\n      \n    147,829\n  \n  \n    Milton\n      \n    132,979\n  \n\n\n\n\n\n\n        \n\n\nA fairly common thing to do with icons in tables is to indicate whether a quantity is either higher or lower than another. Up and down arrow symbols can serve as good visual indicators for this purpose. We can make use of the \"up-arrow\" and \"down-arrow\" icons here. As those strings are available in the dir column of the table derived from the sp500 dataset, fmt_icon() can be used. We set the fill_color argument with a dictionary that indicates which color should be used for each icon.\n\nfrom great_tables.data import sp500\n\nsp500_mini = (\n    pl.from_pandas(sp500)\n    .head(10)\n    .select([\"date\", \"open\", \"close\"])\n    .sort(\"date\", descending=False)\n    .with_columns(\n        dir = pl.when(pl.col(\"close\") &gt;= pl.col(\"open\")).then(\n            pl.lit(\"arrow-up\")).otherwise(pl.lit(\"arrow-down\"))\n    )\n)\n\n(\n    GT(sp500_mini, rowname_col=\"date\")\n    .fmt_icon(\n        columns=\"dir\",\n        fill_color={\"arrow-up\": \"green\", \"arrow-down\": \"red\"}\n    )\n    .cols_label(\n        open=\"Opening Value\",\n        close=\"Closing Value\",\n        dir=\"\"\n    )\n    .opt_stylize(style=1, color=\"gray\")\n)\n\n\n\n\n\n\n\n  \n  Opening Value\n  Closing Value\n  \n\n\n\n  \n    2015-12-17\n    2073.76\n    2041.89\n      \n  \n  \n    2015-12-18\n    2040.8101\n    2005.55\n      \n  \n  \n    2015-12-21\n    2010.27\n    2021.15\n      \n  \n  \n    2015-12-22\n    2023.15\n    2038.97\n      \n  \n  \n    2015-12-23\n    2042.2\n    2064.29\n      \n  \n  \n    2015-12-24\n    2063.52\n    2060.99\n      \n  \n  \n    2015-12-28\n    2057.77\n    2056.5\n      \n  \n  \n    2015-12-29\n    2060.54\n    2078.3601\n      \n  \n  \n    2015-12-30\n    2077.3401\n    2063.3601\n      \n  \n  \n    2015-12-31\n    2060.5901\n    2043.9399"
  },
  {
    "objectID": "reference/data.pizzaplace.html",
    "href": "reference/data.pizzaplace.html",
    "title": "data.pizzaplace",
    "section": "",
    "text": "data.pizzaplace\nA year of pizza sales from a pizza place.\nA synthetic dataset that describes pizza sales for a pizza place somewhere in the US. While the contents are artificial, the ingredients used to make the pizzas are far from it. There are 32 different pizzas that fall into 4 different categories: classic (classic pizzas: ‚ÄòYou probably had one like it before, but never like this!‚Äô), chicken (pizzas with chicken as a major ingredient: ‚ÄòTry the Southwest Chicken Pizza! You‚Äôll love it!‚Äô), supreme (pizzas that try a little harder: ‚ÄòMy Soppressata pizza uses only the finest salami from my personal salumist!‚Äô), and, veggie (pizzas without any meats whatsoever: ‚ÄòMy Five Cheese pizza has so many cheeses, I can only offer it in Large Size!‚Äô).\nEach pizza in the dataset is identified by a short name. The following listings provide the full names of each pizza and their main ingredients.\nClassic Pizzas\n\n\"classic_dlx\": The Classic Deluxe Pizza (Pepperoni, Mushrooms, Red Onions, Red Peppers, Bacon)\n\"big_meat\": The Big Meat Pizza (Bacon, Pepperoni, Italian Sausage, Chorizo Sausage)\n\"pepperoni\": The Pepperoni Pizza (Mozzarella Cheese, Pepperoni)\n\"hawaiian\": The Hawaiian Pizza (Sliced Ham, Pineapple, Mozzarella Cheese)\n\"pep_msh_pep\": The Pepperoni, Mushroom, and Peppers Pizza (Pepperoni, Mushrooms, and Green Peppers)\n\"ital_cpcllo\": The Italian Capocollo Pizza (Capocollo, Red Peppers, Tomatoes, Goat Cheese, Garlic, Oregano)\n\"napolitana\": The Napolitana Pizza (Tomatoes, Anchovies, Green Olives, Red Onions, Garlic)\n\"the_greek\": The Greek Pizza (Kalamata Olives, Feta Cheese, Tomatoes, Garlic, Beef Chuck Roast, Red Onions)\n\nChicken Pizzas\n\n\"thai_ckn\": The Thai Chicken Pizza (Chicken, Pineapple, Tomatoes, Red Peppers, Thai Sweet Chilli Sauce)\n\"bbq_ckn\": The Barbecue Chicken Pizza (Barbecued Chicken, Red Peppers, Green Peppers, Tomatoes, Red Onions, Barbecue Sauce)\n\"southw_ckn\": The Southwest Chicken Pizza (Chicken, Tomatoes, Red Peppers, Red Onions, Jalapeno Peppers, Corn, Cilantro, Chipotle Sauce)\n\"cali_ckn\": The California Chicken Pizza (Chicken, Artichoke, Spinach, Garlic, Jalapeno Peppers, Fontina Cheese, Gouda Cheese)\n\"ckn_pesto\": The Chicken Pesto Pizza (Chicken, Tomatoes, Red Peppers, Spinach, Garlic, Pesto Sauce)\n\"ckn_alfredo\": The Chicken Alfredo Pizza (Chicken, Red Onions, Red Peppers, Mushrooms, Asiago Cheese, Alfredo Sauce)\n\nSupreme Pizzas\n\n\"brie_carre\": The Brie Carre Pizza (Brie Carre Cheese, Prosciutto, Caramelized Onions, Pears, Thyme, Garlic)\n\"calabrese\": The Calabrese Pizza (‚ÄôNduja Salami, Pancetta, Tomatoes, Red Onions, Friggitello Peppers, Garlic)\n\"soppressata\": The Soppressata Pizza (Soppressata Salami, Fontina Cheese, Mozzarella Cheese, Mushrooms, Garlic)\n\"sicilian\": The Sicilian Pizza (Coarse Sicilian Salami, Tomatoes, Green Olives, Luganega Sausage, Onions, Garlic)\n\"ital_supr\": The Italian Supreme Pizza (Calabrese Salami, Capocollo, Tomatoes, Red Onions, Green Olives, Garlic)\n\"peppr_salami\": The Pepper Salami Pizza (Genoa Salami, Capocollo, Pepperoni, Tomatoes, Asiago Cheese, Garlic)\n\"prsc_argla\": The Prosciutto and Arugula Pizza (Prosciutto di San Daniele, Arugula, Mozzarella Cheese)\n\"spinach_supr\": The Spinach Supreme Pizza (Spinach, Red Onions, Pepperoni, Tomatoes, Artichokes, Kalamata Olives, Garlic, Asiago Cheese)\n\"spicy_ital\": The Spicy Italian Pizza (Capocollo, Tomatoes, Goat Cheese, Artichokes, Peperoncini verdi, Garlic)\n\nVegetable Pizzas\n\n\"mexicana\": The Mexicana Pizza (Tomatoes, Red Peppers, Jalapeno Peppers, Red Onions, Cilantro, Corn, Chipotle Sauce, Garlic)\n\"four_cheese\": The Four Cheese Pizza (Ricotta Cheese, Gorgonzola Piccante Cheese, Mozzarella Cheese, Parmigiano Reggiano Cheese, Garlic)\n\"five_cheese\": The Five Cheese Pizza (Mozzarella Cheese, Provolone Cheese, Smoked Gouda Cheese, Romano Cheese, Blue Cheese, Garlic)\n\"spin_pesto\": The Spinach Pesto Pizza (Spinach, Artichokes, Tomatoes, Sun-dried Tomatoes, Garlic, Pesto Sauce)\n\"veggie_veg\": The Vegetables + Vegetables Pizza (Mushrooms, Tomatoes, Red Peppers, Green Peppers, Red Onions, Zucchini, Spinach, Garlic)\n\"green_garden\": The Green Garden Pizza (Spinach, Mushrooms, Tomatoes, Green Olives, Feta Cheese)\n\"mediterraneo\": The Mediterranean Pizza (Spinach, Artichokes, Kalamata Olives, Sun-dried Tomatoes, Feta Cheese, Plum Tomatoes, Red Onions)\n\"spinach_fet\": The Spinach and Feta Pizza (Spinach, Mushrooms, Red Onions, Feta Cheese, Garlic)\n\"ital_veggie\": The Italian Vegetables Pizza (Eggplant, Artichokes, Tomatoes, Zucchini, Red Peppers, Garlic, Pesto Sauce)\n\n\n\nThis is a dataset with 49,574 rows and 7 columns.\n\nid: The ID for the order, which consists of one or more pizzas at a given date and time.\ndate: A string-based representation of the order date, expressed in the ISO 8601 date format (‚ÄòYYYY-MM-DD‚Äô).\ntime: A string-based representation of the order time, expressed as a 24-hour time the ISO 8601 extended time format (‚Äòhh:mm:ss‚Äô).\nname: The short name for the pizza.\nsize: The size of the pizza, which can either be \"S\", \"M\", \"L\", \"XL\" (rare!), or \"XXL\" (even rarer!); most pizzas are available in the \"S\", \"M\", and \"L\" sizes but exceptions apply.\ntype: The category or type of pizza, which can either be \"classic\", \"chicken\", \"supreme\", or \"veggie\".\nprice: The price of the pizza and the amount that it sold for (in USD).\n\n\n\n\nRows: 49574\nColumns: 7\n$ id    &lt;str&gt; '2015-000001', '2015-000002', '2015-000002'\n$ date  &lt;str&gt; '2015-01-01', '2015-01-01', '2015-01-01'\n$ time  &lt;str&gt; '11:38:36', '11:57:40', '11:57:40'\n$ name  &lt;str&gt; 'hawaiian', 'classic_dlx', 'mexicana'\n$ size  &lt;str&gt; 'M', 'M', 'M'\n$ type  &lt;str&gt; 'classic', 'classic', 'veggie'\n$ price &lt;f64&gt; 13.25, 16.0, 16.0"
  },
  {
    "objectID": "reference/data.pizzaplace.html#details",
    "href": "reference/data.pizzaplace.html#details",
    "title": "data.pizzaplace",
    "section": "",
    "text": "This is a dataset with 49,574 rows and 7 columns.\n\nid: The ID for the order, which consists of one or more pizzas at a given date and time.\ndate: A string-based representation of the order date, expressed in the ISO 8601 date format (‚ÄòYYYY-MM-DD‚Äô).\ntime: A string-based representation of the order time, expressed as a 24-hour time the ISO 8601 extended time format (‚Äòhh:mm:ss‚Äô).\nname: The short name for the pizza.\nsize: The size of the pizza, which can either be \"S\", \"M\", \"L\", \"XL\" (rare!), or \"XXL\" (even rarer!); most pizzas are available in the \"S\", \"M\", and \"L\" sizes but exceptions apply.\ntype: The category or type of pizza, which can either be \"classic\", \"chicken\", \"supreme\", or \"veggie\".\nprice: The price of the pizza and the amount that it sold for (in USD)."
  },
  {
    "objectID": "reference/data.pizzaplace.html#preview",
    "href": "reference/data.pizzaplace.html#preview",
    "title": "data.pizzaplace",
    "section": "",
    "text": "Rows: 49574\nColumns: 7\n$ id    &lt;str&gt; '2015-000001', '2015-000002', '2015-000002'\n$ date  &lt;str&gt; '2015-01-01', '2015-01-01', '2015-01-01'\n$ time  &lt;str&gt; '11:38:36', '11:57:40', '11:57:40'\n$ name  &lt;str&gt; 'hawaiian', 'classic_dlx', 'mexicana'\n$ size  &lt;str&gt; 'M', 'M', 'M'\n$ type  &lt;str&gt; 'classic', 'classic', 'veggie'\n$ price &lt;f64&gt; 13.25, 16.0, 16.0"
  },
  {
    "objectID": "reference/GT.tab_stubhead.html",
    "href": "reference/GT.tab_stubhead.html",
    "title": "GT.tab_stubhead",
    "section": "",
    "text": "GT.tab_stubhead(self, label)\nAdd label text to the stubhead.\nAdd a label to the stubhead of a table. The stubhead is the lone element that is positioned left of the column labels, and above the stub. If a stub does not exist, then there is no stubhead (so no change will be made when using this method in that case). We have the flexibility to use Markdown formatting for the stubhead label (through use of the md() helper function). Furthermore, we can use HTML for the stubhead label so long as we also use the html() helper function."
  },
  {
    "objectID": "reference/GT.tab_stubhead.html#parameters",
    "href": "reference/GT.tab_stubhead.html#parameters",
    "title": "GT.tab_stubhead",
    "section": "Parameters",
    "text": "Parameters\n\nlabel : str | Text\n\nThe text to be used as the stubhead label. We can optionally use the md() and html() helper functions to style the text as Markdown or to retain HTML elements in the text."
  },
  {
    "objectID": "reference/GT.tab_stubhead.html#returns",
    "href": "reference/GT.tab_stubhead.html#returns",
    "title": "GT.tab_stubhead",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.tab_stubhead.html#examples",
    "href": "reference/GT.tab_stubhead.html#examples",
    "title": "GT.tab_stubhead",
    "section": "Examples",
    "text": "Examples\nUsing a small subset of the gtcars dataset, we can create a table with row labels. Since we have row labels in the stub (via use of rowname_col=\"model\" in the GT() call) we have a stubhead, so, let‚Äôs add a stubhead label (\"car\") with the tab_stubhead() method to describe what‚Äôs in the stub.\n\nfrom great_tables import GT\nfrom great_tables.data import gtcars\n\ngtcars_mini = gtcars[[\"model\", \"year\", \"hp\", \"trq\"]].head(5)\n\n(\n    GT(gtcars_mini, rowname_col=\"model\")\n    .tab_stubhead(label=\"car\")\n)\n\n\n\n\n\n\n\n  car\n  year\n  hp\n  trq\n\n\n\n  \n    GT\n    2017\n    647.0\n    550.0\n  \n  \n    458 Speciale\n    2015\n    597.0\n    398.0\n  \n  \n    458 Spider\n    2015\n    562.0\n    398.0\n  \n  \n    458 Italia\n    2014\n    562.0\n    398.0\n  \n  \n    488 GTB\n    2016\n    661.0\n    561.0\n  \n\n\n\n\n\n\n        \n\n\nWe can also use Markdown formatting for the stubhead label. In this example, we‚Äôll use md(\"*Car*\") to make the label italicized.\n\nfrom great_tables import GT, md\nfrom great_tables.data import gtcars\n\n(\n    GT(gtcars_mini, rowname_col=\"model\")\n    .tab_stubhead(label=md(\"*Car*\"))\n)\n\n\n\n\n\n\n\n  Car\n  year\n  hp\n  trq\n\n\n\n  \n    GT\n    2017\n    647.0\n    550.0\n  \n  \n    458 Speciale\n    2015\n    597.0\n    398.0\n  \n  \n    458 Spider\n    2015\n    562.0\n    398.0\n  \n  \n    458 Italia\n    2014\n    562.0\n    398.0\n  \n  \n    488 GTB\n    2016\n    661.0\n    561.0"
  },
  {
    "objectID": "reference/loc.body.html",
    "href": "reference/loc.body.html",
    "title": "loc.body",
    "section": "",
    "text": "loc.body(columns=None, rows=None, mask=None)\nTarget data cells in the table body.\nWith loc.body(), we can target the data cells in the table body. This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.body.html#parameters",
    "href": "reference/loc.body.html#parameters",
    "title": "loc.body",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : RowSelectExpr = None\n\nThe rows to target. Can either be a single row name or a series of row names provided in a list.\n\nmask : PlExpr | None = None\n\nThe cells to target. If the underlying wrapped DataFrame is a Polars DataFrame, you can pass a Polars expression for cell-based selection. This argument must be used exclusively and cannot be combined with the columns= or rows= arguments."
  },
  {
    "objectID": "reference/loc.body.html#returns",
    "href": "reference/loc.body.html#returns",
    "title": "loc.body",
    "section": "Returns",
    "text": "Returns\n\n : LocBody\n\nA LocBody object, which is used for a locations= argument if specifying the table body."
  },
  {
    "objectID": "reference/loc.body.html#examples",
    "href": "reference/loc.body.html#examples",
    "title": "loc.body",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. We will style all of the body cells by using locations=loc.body() within tab_style().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(\n        gtcars[[\"mfr\", \"model\", \"hp\", \"trq\", \"msrp\"]].head(5),\n        rowname_col=\"model\",\n        groupname_col=\"mfr\"\n    )\n    .tab_stubhead(label=\"car\")\n    .tab_style(\n        style=[\n            style.text(color=\"darkblue\", weight=\"bold\"),\n            style.fill(color=\"gainsboro\")\n        ],\n        locations=loc.body()\n    )\n    .fmt_integer(columns=[\"hp\", \"trq\"])\n    .fmt_currency(columns=\"msrp\", decimals=0)\n)\n\n\n\n\n\n\n\n  car\n  hp\n  trq\n  msrp\n\n\n\n  \n    Ford\n  \n  \n    GT\n    647\n    550\n    $447,000\n  \n  \n    Ferrari\n  \n  \n    458 Speciale\n    597\n    398\n    $291,744\n  \n  \n    458 Spider\n    562\n    398\n    $263,553\n  \n  \n    458 Italia\n    562\n    398\n    $233,509\n  \n  \n    488 GTB\n    661\n    561\n    $245,400"
  },
  {
    "objectID": "reference/GT.fmt_percent.html",
    "href": "reference/GT.fmt_percent.html",
    "title": "GT.fmt_percent",
    "section": "",
    "text": "GT.fmt_percent(\n    self,\n    columns=None,\n    rows=None,\n    decimals=2,\n    drop_trailing_zeros=False,\n    drop_trailing_dec_mark=True,\n    scale_values=True,\n    use_seps=True,\n    accounting=False,\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign=False,\n    placement='right',\n    incl_space=False,\n    locale=None,\n)\nFormat values as a percentage.\nWith numeric values in a gt table, we can perform percentage-based formatting. It is assumed the input numeric values are proportional values and, in this case, the values will be automatically multiplied by 100 before decorating with a percent sign (the other case is accommodated though setting scale_values to False). For more control over percentage formatting, we can use the following options:"
  },
  {
    "objectID": "reference/GT.fmt_percent.html#parameters",
    "href": "reference/GT.fmt_percent.html#parameters",
    "title": "GT.fmt_percent",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\ndecimals : int = 2\n\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True.\n\ndrop_trailing_zeros : bool = False\n\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\nscale_values : bool = True\n\nShould the values be scaled through multiplication by 100? By default this scaling is performed since the expectation is that incoming values are usually proportional. Setting to False signifies that the values are already scaled and require only the percent sign when formatted.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\naccounting : bool = False\n\nWhether to use accounting style, which wraps negative numbers in parentheses instead of using a minus sign.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nplacement : str = 'right'\n\nThis option governs the placement of the percent sign. This can be either be \"right\" (the default) or \"left\".\n\nincl_space : bool = False\n\nAn option for whether to include a space between the value and the percent sign. The default is to not introduce a space character.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.fmt_percent.html#returns",
    "href": "reference/GT.fmt_percent.html#returns",
    "title": "GT.fmt_percent",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_percent.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_percent.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_percent",
    "section": "Adapting output to a specific locale",
    "text": "Adapting output to a specific locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale‚Äôs preferred values.\nNote that a locale value provided here will override any global locale setting performed in GT()‚Äôs own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_percent.html#examples",
    "href": "reference/GT.fmt_percent.html#examples",
    "title": "GT.fmt_percent",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the towny dataset as the input table. With the fmt_percent() method, we‚Äôll format the pop_change_2016_2021_pct column to to display values as percentages (to two decimal places).\n\nfrom great_tables import GT\nfrom great_tables.data import towny\n\ntowny_mini = (\n    towny[[\"name\", \"pop_change_2016_2021_pct\"]]\n    .head(10)\n)\n\n(GT(towny_mini).fmt_percent(\"pop_change_2016_2021_pct\", decimals=2))\n\n\n\n\n\n\n\n  name\n  pop_change_2016_2021_pct\n\n\n\n  \n    Addington Highlands\n    9.32%\n  \n  \n    Adelaide Metcalfe\n    0.70%\n  \n  \n    Adjala-Tosorontio\n    0.13%\n  \n  \n    Admaston/Bromley\n    2.04%\n  \n  \n    Ajax\n    5.84%\n  \n  \n    Alberton\n    ‚àí1.55%\n  \n  \n    Alfred and Plantagenet\n    2.78%\n  \n  \n    Algonquin Highlands\n    10.08%\n  \n  \n    Alnwick/Haldimand\n    8.79%\n  \n  \n    Amaranth\n    6.08%"
  },
  {
    "objectID": "reference/GT.fmt_percent.html#see-also",
    "href": "reference/GT.fmt_percent.html#see-also",
    "title": "GT.fmt_percent",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_percent(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/loc.subtitle.html",
    "href": "reference/loc.subtitle.html",
    "title": "loc.subtitle",
    "section": "",
    "text": "loc.subtitle()\nTarget the table subtitle.\nWith loc.subtitle(), we can target the part of table containing the subtitle (within the table header). This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.subtitle.html#returns",
    "href": "reference/loc.subtitle.html#returns",
    "title": "loc.subtitle",
    "section": "Returns",
    "text": "Returns\n\n : LocSubTitle\n\nA LocSubTitle object, which is used for a locations= argument if specifying the subtitle of the table."
  },
  {
    "objectID": "reference/loc.subtitle.html#examples",
    "href": "reference/loc.subtitle.html#examples",
    "title": "loc.subtitle",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. We will style only the ‚Äòsubtitle‚Äô part of the table header (leaving the ‚Äòtitle‚Äô part unaffected). This can be done by using locations=loc.subtitle() within tab_style().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5))\n    .tab_header(\n        title=\"Select Cars from the gtcars Dataset\",\n        subtitle=\"Only the first five cars are displayed\"\n    )\n    .tab_style(\n        style=style.fill(color=\"lightblue\"),\n        locations=loc.subtitle()\n    )\n    .fmt_currency(columns=\"msrp\", decimals=0)\n)\n\n\n\n\n\n\n  \n    Select Cars from the gtcars Dataset\n  \n  \n    Only the first five cars are displayed\n  \n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    $447,000\n  \n  \n    Ferrari\n    458 Speciale\n    $291,744\n  \n  \n    Ferrari\n    458 Spider\n    $263,553\n  \n  \n    Ferrari\n    458 Italia\n    $233,509\n  \n  \n    Ferrari\n    488 GTB\n    $245,400"
  },
  {
    "objectID": "reference/GT.fmt_integer.html",
    "href": "reference/GT.fmt_integer.html",
    "title": "GT.fmt_integer",
    "section": "",
    "text": "GT.fmt_integer(\n    self,\n    columns=None,\n    rows=None,\n    use_seps=True,\n    scale_by=1,\n    accounting=False,\n    compact=False,\n    pattern='{x}',\n    sep_mark=',',\n    force_sign=False,\n    locale=None,\n)\nFormat values as integers.\nWith numeric values in one or more table columns, we can perform number-based formatting so that the targeted values are always rendered as integer values.\nWe can have fine control over integer formatting with the following options:"
  },
  {
    "objectID": "reference/GT.fmt_integer.html#parameters",
    "href": "reference/GT.fmt_integer.html#parameters",
    "title": "GT.fmt_integer",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\nscale_by : float = 1\n\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n\naccounting : bool = False\n\nWhether to use accounting style, which wraps negative numbers in parentheses instead of using a minus sign.\n\ncompact : bool = False\n\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1K, and 1230000 becomes 1M). The compact option is False by default.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.fmt_integer.html#returns",
    "href": "reference/GT.fmt_integer.html#returns",
    "title": "GT.fmt_integer",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_integer.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_integer.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_integer",
    "section": "Adapting output to a specific locale",
    "text": "Adapting output to a specific locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator marks will be correct for the given locale. Should any value be provided in sep_mark, it will be overridden by the locale‚Äôs preferred value.\nNote that a locale value provided here will override any global locale setting performed in GT()‚Äôs own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_integer.html#examples",
    "href": "reference/GT.fmt_integer.html#examples",
    "title": "GT.fmt_integer",
    "section": "Examples",
    "text": "Examples\nFor this example, we‚Äôll use the exibble dataset as the input table. With the fmt_integer() method, we‚Äôll format the num column as integer values having no digit separators (with the use_seps=False option).\n\nfrom great_tables import GT, exibble\n\n(\n    GT(exibble)\n    .fmt_integer(columns=\"num\", use_seps=False)\n)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b"
  },
  {
    "objectID": "reference/GT.fmt_integer.html#see-also",
    "href": "reference/GT.fmt_integer.html#see-also",
    "title": "GT.fmt_integer",
    "section": "See Also",
    "text": "See Also\nThe fmt_number() method might be more of what you need if you‚Äôd like decimal values in your outputs. Need to do integer-based formatting on a value or list of values? Take a look at the functional version of this method: val_fmt_integer()."
  },
  {
    "objectID": "reference/GT.cols_move_to_start.html",
    "href": "reference/GT.cols_move_to_start.html",
    "title": "GT.cols_move_to_start",
    "section": "",
    "text": "GT.cols_move_to_start(self, columns)\nMove one or more columns to the start.\nWe can easily move set of columns to the beginning of the column series and we only need to specify which columns. It‚Äôs possible to do this upstream of Great Tables, however, it is easier with this method and it presents less possibility for error. The ordering of the columns that are moved to the start is preserved (same with the ordering of all other columns in the table).\nThe columns supplied in columns must all exist in the table. If you need to place one or columns at the end of the column series, the cols_move_to_end() method should be used. More control is offered with the cols_move() method, where columns could be placed after a specific column."
  },
  {
    "objectID": "reference/GT.cols_move_to_start.html#parameters",
    "href": "reference/GT.cols_move_to_start.html#parameters",
    "title": "GT.cols_move_to_start",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list."
  },
  {
    "objectID": "reference/GT.cols_move_to_start.html#returns",
    "href": "reference/GT.cols_move_to_start.html#returns",
    "title": "GT.cols_move_to_start",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.cols_move_to_start.html#examples",
    "href": "reference/GT.cols_move_to_start.html#examples",
    "title": "GT.cols_move_to_start",
    "section": "Examples",
    "text": "Examples\nFor this example, we‚Äôll use a portion of the countrypops dataset to create a simple table. Let‚Äôs move the year column, which is the middle column, to the start of the column series with the cols_move_to_start() method.\n\nfrom great_tables import GT\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Fiji\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\nGT(countrypops_mini).cols_move_to_start(columns=\"year\")\n\n\n\n\n\n\n\n  year\n  country_name\n  population\n\n\n\n  \n    2018\n    Fiji\n    918996\n  \n  \n    2019\n    Fiji\n    918465\n  \n  \n    2020\n    Fiji\n    920422\n  \n  \n    2021\n    Fiji\n    924610\n  \n  \n    2022\n    Fiji\n    929766\n  \n\n\n\n\n\n\n        \n\n\nWe can also move multiple columns at a time. With the same countrypops-based table (countrypops_mini), let‚Äôs move both the year and population columns to the start of the column series.\n\nGT(countrypops_mini).cols_move_to_start(columns=[\"year\", \"population\"])\n\n\n\n\n\n\n\n  year\n  population\n  country_name\n\n\n\n  \n    2018\n    918996\n    Fiji\n  \n  \n    2019\n    918465\n    Fiji\n  \n  \n    2020\n    920422\n    Fiji\n  \n  \n    2021\n    924610\n    Fiji\n  \n  \n    2022\n    929766\n    Fiji"
  },
  {
    "objectID": "reference/GT.html",
    "href": "reference/GT.html",
    "title": "GT",
    "section": "",
    "text": "GT(\n    self,\n    data,\n    rowname_col=None,\n    groupname_col=None,\n    auto_align=True,\n    id=None,\n    locale=None,\n)\nCreate a Great Tables object.\nThe GT() class creates the GT object when provided with tabular data. Using this class is the the first step in a typical Great Tables workflow. Once we have this object, we can take advantage of numerous methods to get the desired display table for publication.\nThere are a few table structuring options we can consider at this stage. We can choose to create a table stub containing row labels through the use of the rowname_col= argument. Further to this, row groups can be created with the groupname_col= argument. Both arguments take the name of a column in the input table data. Typically, the data in the groupname_col= column will consist of categorical text whereas the data in the rowname_col= column will often contain unique labels (perhaps being unique across the entire table or unique only within the different row groups)."
  },
  {
    "objectID": "reference/GT.html#parameters",
    "href": "reference/GT.html#parameters",
    "title": "GT",
    "section": "Parameters",
    "text": "Parameters\n\ndata : Any\n\nA DataFrame object.\n\nrowname_col : str | None = None\n\nThe column name in the input data= table to use as row labels to be placed in the table stub.\n\ngroupname_col : str | None = None\n\nThe column name in the input data= table to use as group labels for generation of row groups.\n\nauto_align : bool = True\n\nOptionally have column data be aligned depending on the content contained in each column of the input data=.\n\nid : str | None = None\n\nBy default (with None) the table ID will be a random, ten-letter string as generated through internal use of the random_id() function. A custom table ID can be used here by providing a string.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be set as the default locale for all functions that take a locale argument. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.html#returns",
    "href": "reference/GT.html#returns",
    "title": "GT",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nA GT object is returned."
  },
  {
    "objectID": "reference/GT.html#examples",
    "href": "reference/GT.html#examples",
    "title": "GT",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the exibble dataset for the next few examples, we‚Äôll learn how to make simple output tables with the GT() class. The most basic thing to do is to just use GT() with the dataset as the input.\n\nfrom great_tables import GT, exibble\n\nGT(exibble)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nThis dataset has the row and group columns. The former contains unique values that are ideal for labeling rows, and this often happens in what is called the ‚Äòstub‚Äô (a reserved area that serves to label rows). With the GT() class, we can immediately place the contents of the row column into the stub column. To do this, we use the rowname_col= argument with the appropriate column name.\n\nfrom great_tables import GT, exibble\n\nGT(exibble, rowname_col=\"row\")\n\n\n\n\n\n\n\n  \n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  group\n\n\n\n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    grp_a\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    grp_a\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    grp_a\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    grp_a\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    grp_b\n  \n  \n    row_6\n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    grp_b\n  \n  \n    row_7\n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    grp_b\n  \n  \n    row_8\n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nThis sets up a table with a stub, the row labels are placed within the stub column, and a vertical dividing line has been placed on the right-hand side.\nThe group column contains categorical values that are ideal for grouping rows. We can use the groupname_col= argument to place these values into row groups.\n\nfrom great_tables import GT, exibble\n\nGT(exibble, rowname_col=\"row\", groupname_col=\"group\")\n\n\n\n\n\n\n\n  \n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n  \n  \n    row_6\n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n  \n  \n    row_7\n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n  \n  \n    row_8\n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n  \n\n\n\n\n\n\n        \n\n\nBy default, values in the body of a table (and their column labels) are automatically aligned. The alignment is governed by the types of values in a column. If you‚Äôd like to disable this form of auto-alignment, the auto_align=False option can be taken.\n\nfrom great_tables import GT, exibble\n\nGT(exibble, rowname_col=\"row\", auto_align=False)\n\n\n\n\n\n\n\n  \n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  group\n\n\n\n  \n    row_1\n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    grp_a\n  \n  \n    row_2\n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    grp_a\n  \n  \n    row_3\n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    grp_a\n  \n  \n    row_4\n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    grp_a\n  \n  \n    row_5\n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    grp_b\n  \n  \n    row_6\n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    grp_b\n  \n  \n    row_7\n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    grp_b\n  \n  \n    row_8\n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nWhat you‚Äôll get from that is center-alignment of all table body values and all column labels. Note that row labels in the the stub are still left-aligned; and auto_align= has no effect on alignment within the table stub.\nHowever which way you generate the initial table object, you can modify it with a huge variety of methods to further customize the presentation. Formatting body cells is commonly done with the family of formatting methods (e.g., fmt_number(), fmt_date(), etc.). The package supports formatting with internationalization (‚Äòi18n‚Äô features) and so locale-aware methods all come with a locale= argument. To avoid having to use that argument repeatedly, the GT() class has its own locale= argument. Setting a locale in that will make it available globally. Here‚Äôs an example of how that works in practice when setting locale = \"fr\" in GT() prior to using formatting methods:\n\nfrom great_tables import GT, exibble\n\n(\n    GT(exibble, rowname_col=\"row\", locale=\"fr\")\n    .fmt_currency(columns=\"currency\")\n    .fmt_scientific(columns=\"num\")\n    .fmt_date(columns=\"date\", date_style=\"day_month_year\")\n)\n\n\n\n\n\n\n\n  \n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  group\n\n\n\n  \n    row_1\n    1,11 √ó 10‚àí1\n    apricot\n    one\n    15 janvier 2015\n    13:35\n    2018-01-01 02:22\n    ‚Ç¨49,95\n    grp_a\n  \n  \n    row_2\n    2,22\n    banana\n    two\n    15 f√©vrier 2015\n    14:40\n    2018-02-02 14:33\n    ‚Ç¨17,95\n    grp_a\n  \n  \n    row_3\n    3,33 √ó 101\n    coconut\n    three\n    15 mars 2015\n    15:45\n    2018-03-03 03:44\n    ‚Ç¨1,39\n    grp_a\n  \n  \n    row_4\n    4,44 √ó 102\n    durian\n    four\n    15 avril 2015\n    16:50\n    2018-04-04 15:55\n    ‚Ç¨65‚ÄØ100,00\n    grp_a\n  \n  \n    row_5\n    5,55 √ó 103\n    \n    five\n    15 mai 2015\n    17:55\n    2018-05-05 04:00\n    ‚Ç¨1‚ÄØ325,81\n    grp_b\n  \n  \n    row_6\n    \n    fig\n    six\n    15 juin 2015\n    \n    2018-06-06 16:11\n    ‚Ç¨13,26\n    grp_b\n  \n  \n    row_7\n    7,77 √ó 105\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    grp_b\n  \n  \n    row_8\n    8,88 √ó 106\n    honeydew\n    eight\n    15 ao√ªt 2015\n    20:20\n    \n    ‚Ç¨0,44\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nIn this example, the fmt_currency(), fmt_scientific(), and fmt_date() methods understand that the locale for this table is \"fr\" (French), so the appropriate formatting for that locale is apparent in the currency, num, and date columns."
  },
  {
    "objectID": "reference/GT.html#methods",
    "href": "reference/GT.html#methods",
    "title": "GT",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nas_latex\nOutput a GT object as LaTeX\n\n\nas_raw_html\nGet the HTML content of a GT object.\n\n\ncols_align\nSet the alignment of one or more columns.\n\n\ncols_hide\nHide one or more columns.\n\n\ncols_label\nRelabel one or more columns.\n\n\ncols_move\nMove one or more columns.\n\n\ncols_move_to_end\nMove one or more columns to the end.\n\n\ncols_move_to_start\nMove one or more columns to the start.\n\n\ncols_unhide\nUnhide one or more columns.\n\n\ncols_width\nSet the widths of columns.\n\n\ndata_color\nPerform data cell colorization.\n\n\nfmt\nSet a column format with a formatter function.\n\n\nfmt_bytes\nFormat values as bytes.\n\n\nfmt_currency\nFormat values as currencies.\n\n\nfmt_date\nFormat values as dates.\n\n\nfmt_datetime\nFormat values as datetimes.\n\n\nfmt_flag\nGenerate flag icons for countries from their country codes.\n\n\nfmt_icon\nUse icons within a table‚Äôs body cells.\n\n\nfmt_image\nFormat image paths to generate images in cells.\n\n\nfmt_integer\nFormat values as integers.\n\n\nfmt_markdown\nFormat Markdown text.\n\n\nfmt_nanoplot\nFormat data for nanoplot visualizations.\n\n\nfmt_number\nFormat numeric values.\n\n\nfmt_percent\nFormat values as a percentage.\n\n\nfmt_roman\nFormat values as Roman numerals.\n\n\nfmt_scientific\nFormat values to scientific notation.\n\n\nfmt_time\nFormat values as times.\n\n\nfmt_units\nFormat measurement units.\n\n\nopt_align_table_header\nOption to align the table header.\n\n\nopt_all_caps\nOption to use all caps in select table locations.\n\n\nopt_footnote_marks\nOption to modify the set of footnote marks\n\n\nopt_horizontal_padding\nOption to scale the horizontal padding of the table.\n\n\nopt_row_striping\nOption to add or remove row striping.\n\n\nopt_stylize\nStylize your table with a colorful look.\n\n\nopt_table_font\nOptions to define font choices for the entire table.\n\n\nopt_table_outline\nOption to wrap an outline around the entire table.\n\n\nopt_vertical_padding\nOption to scale the vertical padding of the table.\n\n\npipe\nProvide a structured way to chain a function for a GT object.\n\n\nsave\nProduce a high-resolution image file or PDF of the table.\n\n\nshow\nDisplay the table in a notebook or a web browser.\n\n\nsub_missing\nSubstitute missing values in the table body.\n\n\nsub_zero\nSubstitute zero values in the table body.\n\n\ntab_header\nAdd a table header.\n\n\ntab_options\nModify the table output options.\n\n\ntab_source_note\nAdd a source note citation.\n\n\ntab_spanner\nInsert a spanner above a selection of column headings.\n\n\ntab_stub\nAdd a table stub, to emphasize row and group information.\n\n\ntab_stubhead\nAdd label text to the stubhead.\n\n\ntab_style\nAdd custom style to one or more cells\n\n\nwith_id\nSet the id for this table.\n\n\nwith_locale\nSet a column to be the default locale.\n\n\nwrite_raw_html\nWrite the table to an HTML file."
  },
  {
    "objectID": "reference/GT.opt_align_table_header.html",
    "href": "reference/GT.opt_align_table_header.html",
    "title": "GT.opt_align_table_header",
    "section": "",
    "text": "GT.opt_align_table_header(self, align='center')\nOption to align the table header.\nBy default, an added table header will have center alignment for both the title and the subtitle elements. This method allows us to easily set the horizontal alignment of the title and subtitle to the left, right, or center by using the \"align\" argument. This method serves as a convenient shortcut for gt.tab_options(heading_align=&lt;align&gt;)."
  },
  {
    "objectID": "reference/GT.opt_align_table_header.html#parameters",
    "href": "reference/GT.opt_align_table_header.html#parameters",
    "title": "GT.opt_align_table_header",
    "section": "Parameters",
    "text": "Parameters\n\nalign : str = 'center'\n\nThe alignment of the title and subtitle elements in the table header. Options are \"center\" (the default), \"left\", or \"right\"."
  },
  {
    "objectID": "reference/GT.opt_align_table_header.html#returns",
    "href": "reference/GT.opt_align_table_header.html#returns",
    "title": "GT.opt_align_table_header",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.opt_align_table_header.html#examples",
    "href": "reference/GT.opt_align_table_header.html#examples",
    "title": "GT.opt_align_table_header",
    "section": "Examples",
    "text": "Examples\nUsing select columns from the exibble dataset, let‚Äôs create a table with a number of components added. Following that, we‚Äôll align the header contents (consisting of the title and the subtitle) to the left with the opt_align_table_header() method.\n\nfrom great_tables import GT, exibble, md\n\n(\n  GT(\n    exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n    rowname_col=\"row\",\n    groupname_col=\"group\"\n  )\n  .tab_header(\n    title=md(\"Data listing from **exibble**\"),\n    subtitle=md(\"`exibble` is a **Great Tables** dataset.\")\n  )\n  .fmt_number(columns=\"num\")\n  .fmt_currency(columns=\"currency\")\n  .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n  .opt_align_table_header(align=\"left\")\n)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset."
  },
  {
    "objectID": "reference/GT.cols_unhide.html",
    "href": "reference/GT.cols_unhide.html",
    "title": "GT.cols_unhide",
    "section": "",
    "text": "GT.cols_unhide(self, columns)\nUnhide one or more columns.\nThe cols_unhide() method allows us to unhide one or more columns from appearing in the final output table. This may be important in cases where the user obtains a GT instance with hidden columns and there is motivation to reveal one or more of those."
  },
  {
    "objectID": "reference/GT.cols_unhide.html#parameters",
    "href": "reference/GT.cols_unhide.html#parameters",
    "title": "GT.cols_unhide",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr\n\nThe columns to unhide in the output display table. Can either be a single column name or a series of column names provided in a list."
  },
  {
    "objectID": "reference/GT.cols_unhide.html#returns",
    "href": "reference/GT.cols_unhide.html#returns",
    "title": "GT.cols_unhide",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.cols_unhide.html#examples",
    "href": "reference/GT.cols_unhide.html#examples",
    "title": "GT.cols_unhide",
    "section": "Examples",
    "text": "Examples\nFor this example, we‚Äôll use a portion of the countrypops dataset to create a simple table. We‚Äôll hide the year column using cols_hide() and then unhide it with cols_unhide(), ensuring that the year column remains visible in the table.\n\nfrom great_tables import GT\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Benin\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\nGT(countrypops_mini).cols_hide(columns=\"year\").cols_unhide(columns=\"year\")\n\n\n\n\n\n\n\n  country_name\n  year\n  population\n\n\n\n  \n    Benin\n    2018\n    11940683\n  \n  \n    Benin\n    2019\n    12290444\n  \n  \n    Benin\n    2020\n    12643123\n  \n  \n    Benin\n    2021\n    12996895\n  \n  \n    Benin\n    2022\n    13352864"
  },
  {
    "objectID": "reference/GT.cols_unhide.html#see-also",
    "href": "reference/GT.cols_unhide.html#see-also",
    "title": "GT.cols_unhide",
    "section": "See Also",
    "text": "See Also\nThe counterpart of this function, cols_hide(), allows you to hide one or more columns."
  },
  {
    "objectID": "reference/GT.fmt_bytes.html",
    "href": "reference/GT.fmt_bytes.html",
    "title": "GT.fmt_bytes",
    "section": "",
    "text": "GT.fmt_bytes(\n    self,\n    columns=None,\n    rows=None,\n    standard='decimal',\n    decimals=1,\n    n_sigfig=None,\n    drop_trailing_zeros=True,\n    drop_trailing_dec_mark=True,\n    use_seps=True,\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign=False,\n    incl_space=True,\n    locale=None,\n)\nFormat values as bytes.\nWith numeric values in a table, we can transform those to values of bytes with human readable units. The fmt_bytes() method allows for the formatting of byte sizes to either of two common representations: (1) with decimal units (powers of 1000, examples being \"kB\" and \"MB\"), and (2) with binary units (powers of 1024, examples being \"KiB\" and \"MiB\"). It is assumed the input numeric values represent the number of bytes and automatic truncation of values will occur. The numeric values will be scaled to be in the range of 1 to &lt;1000 and then decorated with the correct unit symbol according to the standard chosen. For more control over the formatting of byte sizes, we can use the following options:"
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#parameters",
    "href": "reference/GT.fmt_bytes.html#parameters",
    "title": "GT.fmt_bytes",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\nstandard : str = 'decimal'\n\nThe form of expressing large byte sizes is divided between: (1) decimal units (powers of 1000; e.g., \"kB\" and \"MB\"), and (2) binary units (powers of 1024; e.g., \"KiB\" and \"MiB\"). The default is to use decimal units with the \"decimal\" option. The alternative is to use binary units with the \"binary\" option.\n\ndecimals : int = 1\n\nThis corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True.\n\ndrop_trailing_zeros : bool = True\n\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nincl_space : bool = True\n\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#returns",
    "href": "reference/GT.fmt_bytes.html#returns",
    "title": "GT.fmt_bytes",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_bytes.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_bytes",
    "section": "Adapting output to a specific locale",
    "text": "Adapting output to a specific locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale‚Äôs preferred values.\nNote that a locale value provided here will override any global locale setting performed in GT()‚Äôs own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#examples",
    "href": "reference/GT.fmt_bytes.html#examples",
    "title": "GT.fmt_bytes",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a single column from the exibble dataset and create a new table. We‚Äôll format the num column to display as byte sizes in the decimal standard through use of the fmt_bytes() method.\n\nfrom great_tables import GT, exibble\n\n(\n    GT(exibble[[\"num\"]])\n    .fmt_bytes(columns=\"num\", standard=\"decimal\")\n)\n\n\n\n\n\n\n\n  num\n\n\n\n  \n    0 B\n  \n  \n    2 B\n  \n  \n    33 B\n  \n  \n    444 B\n  \n  \n    5.5 kB\n  \n  \n    \n  \n  \n    777 kB\n  \n  \n    8.9 MB"
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#see-also",
    "href": "reference/GT.fmt_bytes.html#see-also",
    "title": "GT.fmt_bytes",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_bytes(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/loc.source_notes.html",
    "href": "reference/loc.source_notes.html",
    "title": "loc.source_notes",
    "section": "",
    "text": "loc.source_notes()\nTarget the source notes.\nWith loc.source_notes(), we can target the source notes in the table. This is useful when applying custom with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting. The ‚Äòsource_notes‚Äô location is generated by tab_source_note()."
  },
  {
    "objectID": "reference/loc.source_notes.html#returns",
    "href": "reference/loc.source_notes.html#returns",
    "title": "loc.source_notes",
    "section": "Returns",
    "text": "Returns\n\n : LocSourceNotes\n\nA LocSourceNotes object, which is used for a locations= argument if specifying the source notes."
  },
  {
    "objectID": "reference/loc.source_notes.html#examples",
    "href": "reference/loc.source_notes.html#examples",
    "title": "loc.source_notes",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. Add a source note (with tab_source_note() and style the source notes section inside tab_style() with locations=loc.source_notes().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5))\n    .tab_source_note(source_note=\"From edmunds.com\")\n    .tab_style(\n        style=style.text(color=\"blue\", size=\"small\", weight=\"bold\"),\n        locations=loc.source_notes()\n    )\n)\n\n\n\n\n\n\n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    447000.0\n  \n  \n    Ferrari\n    458 Speciale\n    291744.0\n  \n  \n    Ferrari\n    458 Spider\n    263553.0\n  \n  \n    Ferrari\n    458 Italia\n    233509.0\n  \n  \n    Ferrari\n    488 GTB\n    245400.0\n  \n\n  \n  \n  \n    From edmunds.com"
  },
  {
    "objectID": "reference/vals.fmt_bytes.html",
    "href": "reference/vals.fmt_bytes.html",
    "title": "vals.fmt_bytes",
    "section": "",
    "text": "vals.fmt_bytes(\n    x,\n    standard='decimal',\n    decimals=1,\n    n_sigfig=None,\n    drop_trailing_zeros=True,\n    drop_trailing_dec_mark=True,\n    use_seps=True,\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign=False,\n    incl_space=True,\n    locale=None,\n)\nFormat values as bytes.\nWith numeric values in a list, we can transform those to values of bytes with human readable units. The val_fmt_bytes() function allows for the formatting of byte sizes to either of two common representations: (1) with decimal units (powers of 1000, examples being \"kB\" and \"MB\"), and (2) with binary units (powers of 1024, examples being \"KiB\" and \"MiB\"). It is assumed the input numeric values represent the number of bytes and automatic truncation of values will occur. The numeric values will be scaled to be in the range of 1 to &lt;1000 and then decorated with the correct unit symbol according to the standard chosen. For more control over the formatting of byte sizes, we can use the following options:"
  },
  {
    "objectID": "reference/vals.fmt_bytes.html#parameters",
    "href": "reference/vals.fmt_bytes.html#parameters",
    "title": "vals.fmt_bytes",
    "section": "Parameters",
    "text": "Parameters\n\nx : X\n\nA list of values to be formatted.\n\nstandard : str = 'decimal'\n\nThe form of expressing large byte sizes is divided between: (1) decimal units (powers of 1000; e.g., \"kB\" and \"MB\"), and (2) binary units (powers of 1024; e.g., \"KiB\" and \"MiB\"). The default is to use decimal units with the \"decimal\" option. The alternative is to use binary units with the \"binary\" option.\n\ndecimals : int = 1\n\nThis corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True.\n\ndrop_trailing_zeros : bool = True\n\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nincl_space : bool = True\n\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/vals.fmt_bytes.html#returns",
    "href": "reference/vals.fmt_bytes.html#returns",
    "title": "vals.fmt_bytes",
    "section": "Returns",
    "text": "Returns\n\n : list[str]\n\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_bytes.html#examples",
    "href": "reference/vals.fmt_bytes.html#examples",
    "title": "vals.fmt_bytes",
    "section": "Examples",
    "text": "Examples\n\nfrom great_tables import vals\n\nvals.fmt_bytes([123.45, 3615844.256], standard=\"decimal\")\n\n['123 B', '3.6 MB']"
  },
  {
    "objectID": "reference/loc.stub.html",
    "href": "reference/loc.stub.html",
    "title": "loc.stub",
    "section": "",
    "text": "loc.stub(rows=None)\nTarget the table stub.\nWith loc.stub() we can target the cells containing the row labels, which reside in the table stub. This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.stub.html#parameters",
    "href": "reference/loc.stub.html#parameters",
    "title": "loc.stub",
    "section": "Parameters",
    "text": "Parameters\n\nrows : RowSelectExpr = None\n\nThe rows to target within the stub. Can either be a single row name or a series of row names provided in a list. If no rows are specified, all rows are targeted."
  },
  {
    "objectID": "reference/loc.stub.html#returns",
    "href": "reference/loc.stub.html#returns",
    "title": "loc.stub",
    "section": "Returns",
    "text": "Returns\n\n : LocStub\n\nA LocStub object, which is used for a locations= argument if specifying the table‚Äôs stub."
  },
  {
    "objectID": "reference/loc.stub.html#examples",
    "href": "reference/loc.stub.html#examples",
    "title": "loc.stub",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. We will style the entire table stub (the row labels) by using locations=loc.stub() within tab_style().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(\n        gtcars[[\"mfr\", \"model\", \"hp\", \"trq\", \"msrp\"]].head(5),\n        rowname_col=\"model\",\n        groupname_col=\"mfr\"\n    )\n    .tab_stubhead(label=\"car\")\n    .tab_style(\n        style=[\n            style.text(color=\"crimson\", weight=\"bold\"),\n            style.fill(color=\"lightgray\")\n        ],\n        locations=loc.stub()\n    )\n    .fmt_integer(columns=[\"hp\", \"trq\"])\n    .fmt_currency(columns=\"msrp\", decimals=0)\n)\n\n\n\n\n\n\n\n  car\n  hp\n  trq\n  msrp\n\n\n\n  \n    Ford\n  \n  \n    GT\n    647\n    550\n    $447,000\n  \n  \n    Ferrari\n  \n  \n    458 Speciale\n    597\n    398\n    $291,744\n  \n  \n    458 Spider\n    562\n    398\n    $263,553\n  \n  \n    458 Italia\n    562\n    398\n    $233,509\n  \n  \n    488 GTB\n    661\n    561\n    $245,400"
  },
  {
    "objectID": "reference/GT.opt_horizontal_padding.html",
    "href": "reference/GT.opt_horizontal_padding.html",
    "title": "GT.opt_horizontal_padding",
    "section": "",
    "text": "GT.opt_horizontal_padding(self, scale=1.0)\nOption to scale the horizontal padding of the table.\nThis method allows us to scale the horizontal padding of the table by a factor of scale. The default value is 1.0 and this method serves as a convenient shortcut for gt.tab_options( heading_padding_horizontal=&lt;new_val&gt;, column_labels_padding_horizontal=&lt;new_val&gt;, data_row_padding_horizontal=&lt;new_val&gt;, row_group_padding_horizontal=&lt;new_val&gt;, source_notes_padding_horizontal=&lt;new_val&gt;)."
  },
  {
    "objectID": "reference/GT.opt_horizontal_padding.html#parameters",
    "href": "reference/GT.opt_horizontal_padding.html#parameters",
    "title": "GT.opt_horizontal_padding",
    "section": "Parameters",
    "text": "Parameters\n\nscale : float = 1.0\n\nThe factor by which to scale the horizontal padding. The default value is 1.0. A value less than 1.0 will reduce the padding, and a value greater than 1.0 will increase the padding. The value must be between 0 and 3."
  },
  {
    "objectID": "reference/GT.opt_horizontal_padding.html#returns",
    "href": "reference/GT.opt_horizontal_padding.html#returns",
    "title": "GT.opt_horizontal_padding",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.opt_horizontal_padding.html#examples",
    "href": "reference/GT.opt_horizontal_padding.html#examples",
    "title": "GT.opt_horizontal_padding",
    "section": "Examples",
    "text": "Examples\nUsing select columns from the exibble dataset, let‚Äôs create a table with a number of components added. Following that, we‚Äôll scale the horizontal padding of the table by a factor of 3 using the opt_horizontal_padding() method.\n\nfrom great_tables import GT, exibble, md\n\ngt_tbl = (\n    GT(\n        exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n        rowname_col=\"row\",\n        groupname_col=\"group\"\n    )\n    .tab_header(\n        title=md(\"Data listing from **exibble**\"),\n        subtitle=md(\"`exibble` is a **Great Tables** dataset.\")\n    )\n    .fmt_number(columns=\"num\")\n    .fmt_currency(columns=\"currency\")\n    .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n)\n\ngt_tbl.opt_horizontal_padding(scale=3)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nThe overall effect of scaling the horizontal padding is that the table will appear wider or and there will added buffer space between the table elements. The overall look of the table will be more spacious and neigboring pieces of text will be less cramped.\nLet‚Äôs go the other way and scale the horizontal padding of the table by a factor of 0.5 using the opt_horizontal_padding() method.\n\ngt_tbl.opt_horizontal_padding(scale=0.5)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset.\n  \n\n\n\n\n\n\n        \n\n\nWhat you get in this case is more condensed text across the horizontal axis. This may not always be desired when cells consist mainly of text, but it could be useful when the table is more visual and the cells are filled with graphics or other non-textual elements."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "API Reference",
    "section": "",
    "text": "All tables created in Great Tables begin by using GT(). With this class, we supply the input data table and some basic options for creating a stub and row groups (with the rowname_col= and groupname_col= arguments).\n\n\n\nGT\nCreate a Great Tables object.\n\n\n\n\n\n\nA table can contain a few useful components for conveying additional information. These include a header (with a titles and subtitle), a footer (with source notes), and additional areas for labels (row group labels, column spanner labels, the stubhead label). We can perform styling on targeted table locations with the tab_style() method.\n\n\n\nGT.tab_header\nAdd a table header.\n\n\nGT.tab_spanner\nInsert a spanner above a selection of column headings.\n\n\nGT.tab_stub\nAdd a table stub, to emphasize row and group information.\n\n\nGT.tab_stubhead\nAdd label text to the stubhead.\n\n\nGT.tab_source_note\nAdd a source note citation.\n\n\nGT.tab_style\nAdd custom style to one or more cells\n\n\nGT.tab_options\nModify the table output options.\n\n\n\n\n\n\nColumns of data can be formatted with the fmt_*() methods. We can specify the rows of these columns quite precisely with the rows argument. We get to apply these methods exactly once to each data cell (last call wins). Need to do custom formatting? Use the fmt() method and define your own formatter.\n\n\n\nGT.fmt_number\nFormat numeric values.\n\n\nGT.fmt_integer\nFormat values as integers.\n\n\nGT.fmt_percent\nFormat values as a percentage.\n\n\nGT.fmt_scientific\nFormat values to scientific notation.\n\n\nGT.fmt_currency\nFormat values as currencies.\n\n\nGT.fmt_bytes\nFormat values as bytes.\n\n\nGT.fmt_roman\nFormat values as Roman numerals.\n\n\nGT.fmt_date\nFormat values as dates.\n\n\nGT.fmt_time\nFormat values as times.\n\n\nGT.fmt_datetime\nFormat values as datetimes.\n\n\nGT.fmt_markdown\nFormat Markdown text.\n\n\nGT.fmt_units\nFormat measurement units.\n\n\nGT.fmt_image\nFormat image paths to generate images in cells.\n\n\nGT.fmt_icon\nUse icons within a table‚Äôs body cells.\n\n\nGT.fmt_flag\nGenerate flag icons for countries from their country codes.\n\n\nGT.fmt_nanoplot\nFormat data for nanoplot visualizations.\n\n\nGT.fmt\nSet a column format with a formatter function.\n\n\nGT.data_color\nPerform data cell colorization.\n\n\nGT.sub_missing\nSubstitute missing values in the table body.\n\n\nGT.sub_zero\nSubstitute zero values in the table body.\n\n\n\n\n\n\nThe cols_*() methods allow for modifications that act on entire columns. This includes alignment of the data in columns (cols_align()), hiding columns from view (cols_hide()), re-labeling the column labels (cols_label()), and moving columns around (with the cols_move*() methods).\n\n\n\nGT.cols_align\nSet the alignment of one or more columns.\n\n\nGT.cols_width\nSet the widths of columns.\n\n\nGT.cols_label\nRelabel one or more columns.\n\n\nGT.cols_move\nMove one or more columns.\n\n\nGT.cols_move_to_start\nMove one or more columns to the start.\n\n\nGT.cols_move_to_end\nMove one or more columns to the end.\n\n\nGT.cols_hide\nHide one or more columns.\n\n\nGT.cols_unhide\nUnhide one or more columns.\n\n\n\n\n\n\nLocation targeting is a powerful feature of Great Tables. It allows for the precise selection of table locations for styling (using the tab_style() method). The styling classes allow for the specification of the styling properties to be applied to the targeted locations.\n\n\n\nloc.header\nTarget the table header (title and subtitle).\n\n\nloc.title\nTarget the table title.\n\n\nloc.subtitle\nTarget the table subtitle.\n\n\nloc.stubhead\nTarget the stubhead.\n\n\nloc.column_header\nTarget column spanners and column labels.\n\n\nloc.spanner_labels\nTarget spanner labels.\n\n\nloc.column_labels\nTarget column labels.\n\n\nloc.stub\nTarget the table stub.\n\n\nloc.row_groups\nTarget row groups.\n\n\nloc.body\nTarget data cells in the table body.\n\n\nloc.footer\nTarget the table footer.\n\n\nloc.source_notes\nTarget the source notes.\n\n\nstyle.fill\nA style specification for the background fill of targeted cells.\n\n\nstyle.text\nA style specification for cell text.\n\n\nstyle.borders\nA style specification for cell borders.\n\n\nstyle.css\nA style specification for custom CSS rules.\n\n\n\n\n\n\nAn assortment of helper functions is available in the Great Tables package. The md() and html() helper functions can used during label creation with the tab_header(), tab_spanner(), tab_stubhead(), and tab_source_note() methods.\n\n\n\nGT.with_id\nSet the id for this table.\n\n\nGT.with_locale\nSet a column to be the default locale.\n\n\nmd\nInterpret input text as Markdown-formatted text.\n\n\nhtml\nInterpret input text as HTML-formatted text.\n\n\nfrom_column\nSpecify that a style value should be fetched from a column in the data.\n\n\ngoogle_font\nSpecify a font from the Google Fonts service.\n\n\nsystem_fonts\nGet a themed font stack that works well across systems.\n\n\ndefine_units\nWith define_units() you can work with a specially-crafted units notation string and emit the\n\n\nnanoplot_options\nHelper for setting the options for a nanoplot.\n\n\n\n\n\n\nWith the opt_*() functions, we have an easy way to set commonly-used table options without having to use tab_options() directly.\n\n\n\nGT.opt_align_table_header\nOption to align the table header.\n\n\nGT.opt_row_striping\nOption to add or remove row striping.\n\n\nGT.opt_all_caps\nOption to use all caps in select table locations.\n\n\nGT.opt_vertical_padding\nOption to scale the vertical padding of the table.\n\n\nGT.opt_horizontal_padding\nOption to scale the horizontal padding of the table.\n\n\nGT.opt_table_outline\nOption to wrap an outline around the entire table.\n\n\nGT.opt_table_font\nOptions to define font choices for the entire table.\n\n\nGT.opt_stylize\nStylize your table with a colorful look.\n\n\n\n\n\n\nThere may come a day when you need to export a table to some specific format. A great method for that is save(), which allows us to save the table as a standalone image file. You can also get the table code as an HTML fragment with the *_raw_html() methods.\n\n\n\nGT.save\nProduce a high-resolution image file or PDF of the table.\n\n\nGT.show\nDisplay the table in a notebook or a web browser.\n\n\nGT.as_raw_html\nGet the HTML content of a GT object.\n\n\nGT.write_raw_html\nWrite the table to an HTML file.\n\n\nGT.as_latex\nOutput a GT object as LaTeX\n\n\n\n\n\n\nSometimes, you might want to programmatically manipulate the table while still benefiting from the chained API that Great Tables offers. pipe() is designed to tackle this issue.\n\n\n\nGT.pipe\nProvide a structured way to chain a function for a GT object.\n\n\n\n\n\n\nIf you have single values (or lists of them) in need of formatting, we have a set of val_fmt_*() functions that have been adapted from the corresponding fmt_*() methods.\n\n\n\nvals.fmt_number\nFormat numeric values.\n\n\nvals.fmt_integer\nFormat values as integers.\n\n\nvals.fmt_scientific\nFormat values to scientific notation.\n\n\nvals.fmt_percent\nFormat values as a percentage.\n\n\nvals.fmt_currency\nFormat values as currencies.\n\n\nvals.fmt_roman\nFormat values as Roman numerals.\n\n\nvals.fmt_bytes\nFormat values as bytes.\n\n\nvals.fmt_date\nFormat values as dates.\n\n\nvals.fmt_time\nFormat values as times.\n\n\nvals.fmt_markdown\nFormat Markdown text.\n\n\nvals.fmt_image\nFormat image paths to generate images in cells.\n\n\n\n\n\n\nThe Great Tables package is equipped with sixteen datasets that come in all shapes and sizes. Many examples thoughout the help docs use these datasets to quickly demonstrate the awesome features of the package! Please note that using any of these datasets requires the Pandas library to be installed.\n\n\n\ndata.countrypops\nYearly populations of countries from 1960 to 2022.\n\n\ndata.sza\nTwice hourly solar zenith angles by month & latitude.\n\n\ndata.gtcars\nDeluxe automobiles from the 2014-2017 period.\n\n\ndata.sp500\nDaily S&P 500 Index data from 1950 to 2015.\n\n\ndata.pizzaplace\nA year of pizza sales from a pizza place.\n\n\ndata.exibble\nA toy example table for testing with great_tables: exibble.\n\n\ndata.towny\nPopulations of all municipalities in Ontario from 1996 to 2021.\n\n\ndata.peeps\nA table of personal information for people all over the world.\n\n\ndata.films\nFeature films in competition at the Cannes Film Festival.\n\n\ndata.metro\nThe stations of the Paris Metro.\n\n\ndata.gibraltar\nWeather conditions in Gibraltar, May 2023.\n\n\ndata.constants\nThe fundamental physical constants.\n\n\ndata.illness\nLab tests for one suffering from an illness.\n\n\ndata.reactions\nReaction rates for gas-phase atmospheric reactions of organic compounds.\n\n\ndata.photolysis\nData on photolysis rates for gas-phase organic compounds.\n\n\ndata.nuclides\nNuclide data."
  },
  {
    "objectID": "reference/index.html#table-creation",
    "href": "reference/index.html#table-creation",
    "title": "API Reference",
    "section": "",
    "text": "All tables created in Great Tables begin by using GT(). With this class, we supply the input data table and some basic options for creating a stub and row groups (with the rowname_col= and groupname_col= arguments).\n\n\n\nGT\nCreate a Great Tables object."
  },
  {
    "objectID": "reference/index.html#creating-or-modifying-parts-of-a-table",
    "href": "reference/index.html#creating-or-modifying-parts-of-a-table",
    "title": "API Reference",
    "section": "",
    "text": "A table can contain a few useful components for conveying additional information. These include a header (with a titles and subtitle), a footer (with source notes), and additional areas for labels (row group labels, column spanner labels, the stubhead label). We can perform styling on targeted table locations with the tab_style() method.\n\n\n\nGT.tab_header\nAdd a table header.\n\n\nGT.tab_spanner\nInsert a spanner above a selection of column headings.\n\n\nGT.tab_stub\nAdd a table stub, to emphasize row and group information.\n\n\nGT.tab_stubhead\nAdd label text to the stubhead.\n\n\nGT.tab_source_note\nAdd a source note citation.\n\n\nGT.tab_style\nAdd custom style to one or more cells\n\n\nGT.tab_options\nModify the table output options."
  },
  {
    "objectID": "reference/index.html#formatting-column-data",
    "href": "reference/index.html#formatting-column-data",
    "title": "API Reference",
    "section": "",
    "text": "Columns of data can be formatted with the fmt_*() methods. We can specify the rows of these columns quite precisely with the rows argument. We get to apply these methods exactly once to each data cell (last call wins). Need to do custom formatting? Use the fmt() method and define your own formatter.\n\n\n\nGT.fmt_number\nFormat numeric values.\n\n\nGT.fmt_integer\nFormat values as integers.\n\n\nGT.fmt_percent\nFormat values as a percentage.\n\n\nGT.fmt_scientific\nFormat values to scientific notation.\n\n\nGT.fmt_currency\nFormat values as currencies.\n\n\nGT.fmt_bytes\nFormat values as bytes.\n\n\nGT.fmt_roman\nFormat values as Roman numerals.\n\n\nGT.fmt_date\nFormat values as dates.\n\n\nGT.fmt_time\nFormat values as times.\n\n\nGT.fmt_datetime\nFormat values as datetimes.\n\n\nGT.fmt_markdown\nFormat Markdown text.\n\n\nGT.fmt_units\nFormat measurement units.\n\n\nGT.fmt_image\nFormat image paths to generate images in cells.\n\n\nGT.fmt_icon\nUse icons within a table‚Äôs body cells.\n\n\nGT.fmt_flag\nGenerate flag icons for countries from their country codes.\n\n\nGT.fmt_nanoplot\nFormat data for nanoplot visualizations.\n\n\nGT.fmt\nSet a column format with a formatter function.\n\n\nGT.data_color\nPerform data cell colorization.\n\n\nGT.sub_missing\nSubstitute missing values in the table body.\n\n\nGT.sub_zero\nSubstitute zero values in the table body."
  },
  {
    "objectID": "reference/index.html#modifying-columns",
    "href": "reference/index.html#modifying-columns",
    "title": "API Reference",
    "section": "",
    "text": "The cols_*() methods allow for modifications that act on entire columns. This includes alignment of the data in columns (cols_align()), hiding columns from view (cols_hide()), re-labeling the column labels (cols_label()), and moving columns around (with the cols_move*() methods).\n\n\n\nGT.cols_align\nSet the alignment of one or more columns.\n\n\nGT.cols_width\nSet the widths of columns.\n\n\nGT.cols_label\nRelabel one or more columns.\n\n\nGT.cols_move\nMove one or more columns.\n\n\nGT.cols_move_to_start\nMove one or more columns to the start.\n\n\nGT.cols_move_to_end\nMove one or more columns to the end.\n\n\nGT.cols_hide\nHide one or more columns.\n\n\nGT.cols_unhide\nUnhide one or more columns."
  },
  {
    "objectID": "reference/index.html#location-targeting-and-styling-classes",
    "href": "reference/index.html#location-targeting-and-styling-classes",
    "title": "API Reference",
    "section": "",
    "text": "Location targeting is a powerful feature of Great Tables. It allows for the precise selection of table locations for styling (using the tab_style() method). The styling classes allow for the specification of the styling properties to be applied to the targeted locations.\n\n\n\nloc.header\nTarget the table header (title and subtitle).\n\n\nloc.title\nTarget the table title.\n\n\nloc.subtitle\nTarget the table subtitle.\n\n\nloc.stubhead\nTarget the stubhead.\n\n\nloc.column_header\nTarget column spanners and column labels.\n\n\nloc.spanner_labels\nTarget spanner labels.\n\n\nloc.column_labels\nTarget column labels.\n\n\nloc.stub\nTarget the table stub.\n\n\nloc.row_groups\nTarget row groups.\n\n\nloc.body\nTarget data cells in the table body.\n\n\nloc.footer\nTarget the table footer.\n\n\nloc.source_notes\nTarget the source notes.\n\n\nstyle.fill\nA style specification for the background fill of targeted cells.\n\n\nstyle.text\nA style specification for cell text.\n\n\nstyle.borders\nA style specification for cell borders.\n\n\nstyle.css\nA style specification for custom CSS rules."
  },
  {
    "objectID": "reference/index.html#helper-functions",
    "href": "reference/index.html#helper-functions",
    "title": "API Reference",
    "section": "",
    "text": "An assortment of helper functions is available in the Great Tables package. The md() and html() helper functions can used during label creation with the tab_header(), tab_spanner(), tab_stubhead(), and tab_source_note() methods.\n\n\n\nGT.with_id\nSet the id for this table.\n\n\nGT.with_locale\nSet a column to be the default locale.\n\n\nmd\nInterpret input text as Markdown-formatted text.\n\n\nhtml\nInterpret input text as HTML-formatted text.\n\n\nfrom_column\nSpecify that a style value should be fetched from a column in the data.\n\n\ngoogle_font\nSpecify a font from the Google Fonts service.\n\n\nsystem_fonts\nGet a themed font stack that works well across systems.\n\n\ndefine_units\nWith define_units() you can work with a specially-crafted units notation string and emit the\n\n\nnanoplot_options\nHelper for setting the options for a nanoplot."
  },
  {
    "objectID": "reference/index.html#table-options",
    "href": "reference/index.html#table-options",
    "title": "API Reference",
    "section": "",
    "text": "With the opt_*() functions, we have an easy way to set commonly-used table options without having to use tab_options() directly.\n\n\n\nGT.opt_align_table_header\nOption to align the table header.\n\n\nGT.opt_row_striping\nOption to add or remove row striping.\n\n\nGT.opt_all_caps\nOption to use all caps in select table locations.\n\n\nGT.opt_vertical_padding\nOption to scale the vertical padding of the table.\n\n\nGT.opt_horizontal_padding\nOption to scale the horizontal padding of the table.\n\n\nGT.opt_table_outline\nOption to wrap an outline around the entire table.\n\n\nGT.opt_table_font\nOptions to define font choices for the entire table.\n\n\nGT.opt_stylize\nStylize your table with a colorful look."
  },
  {
    "objectID": "reference/index.html#export",
    "href": "reference/index.html#export",
    "title": "API Reference",
    "section": "",
    "text": "There may come a day when you need to export a table to some specific format. A great method for that is save(), which allows us to save the table as a standalone image file. You can also get the table code as an HTML fragment with the *_raw_html() methods.\n\n\n\nGT.save\nProduce a high-resolution image file or PDF of the table.\n\n\nGT.show\nDisplay the table in a notebook or a web browser.\n\n\nGT.as_raw_html\nGet the HTML content of a GT object.\n\n\nGT.write_raw_html\nWrite the table to an HTML file.\n\n\nGT.as_latex\nOutput a GT object as LaTeX"
  },
  {
    "objectID": "reference/index.html#pipeline",
    "href": "reference/index.html#pipeline",
    "title": "API Reference",
    "section": "",
    "text": "Sometimes, you might want to programmatically manipulate the table while still benefiting from the chained API that Great Tables offers. pipe() is designed to tackle this issue.\n\n\n\nGT.pipe\nProvide a structured way to chain a function for a GT object."
  },
  {
    "objectID": "reference/index.html#value-formatting-functions",
    "href": "reference/index.html#value-formatting-functions",
    "title": "API Reference",
    "section": "",
    "text": "If you have single values (or lists of them) in need of formatting, we have a set of val_fmt_*() functions that have been adapted from the corresponding fmt_*() methods.\n\n\n\nvals.fmt_number\nFormat numeric values.\n\n\nvals.fmt_integer\nFormat values as integers.\n\n\nvals.fmt_scientific\nFormat values to scientific notation.\n\n\nvals.fmt_percent\nFormat values as a percentage.\n\n\nvals.fmt_currency\nFormat values as currencies.\n\n\nvals.fmt_roman\nFormat values as Roman numerals.\n\n\nvals.fmt_bytes\nFormat values as bytes.\n\n\nvals.fmt_date\nFormat values as dates.\n\n\nvals.fmt_time\nFormat values as times.\n\n\nvals.fmt_markdown\nFormat Markdown text.\n\n\nvals.fmt_image\nFormat image paths to generate images in cells."
  },
  {
    "objectID": "reference/index.html#built-in-datasets",
    "href": "reference/index.html#built-in-datasets",
    "title": "API Reference",
    "section": "",
    "text": "The Great Tables package is equipped with sixteen datasets that come in all shapes and sizes. Many examples thoughout the help docs use these datasets to quickly demonstrate the awesome features of the package! Please note that using any of these datasets requires the Pandas library to be installed.\n\n\n\ndata.countrypops\nYearly populations of countries from 1960 to 2022.\n\n\ndata.sza\nTwice hourly solar zenith angles by month & latitude.\n\n\ndata.gtcars\nDeluxe automobiles from the 2014-2017 period.\n\n\ndata.sp500\nDaily S&P 500 Index data from 1950 to 2015.\n\n\ndata.pizzaplace\nA year of pizza sales from a pizza place.\n\n\ndata.exibble\nA toy example table for testing with great_tables: exibble.\n\n\ndata.towny\nPopulations of all municipalities in Ontario from 1996 to 2021.\n\n\ndata.peeps\nA table of personal information for people all over the world.\n\n\ndata.films\nFeature films in competition at the Cannes Film Festival.\n\n\ndata.metro\nThe stations of the Paris Metro.\n\n\ndata.gibraltar\nWeather conditions in Gibraltar, May 2023.\n\n\ndata.constants\nThe fundamental physical constants.\n\n\ndata.illness\nLab tests for one suffering from an illness.\n\n\ndata.reactions\nReaction rates for gas-phase atmospheric reactions of organic compounds.\n\n\ndata.photolysis\nData on photolysis rates for gas-phase organic compounds.\n\n\ndata.nuclides\nNuclide data."
  },
  {
    "objectID": "reference/data.nuclides.html",
    "href": "reference/data.nuclides.html",
    "title": "data.nuclides",
    "section": "",
    "text": "data.nuclides\nNuclide data.\nThe nuclides dataset contains information on all known nuclides, providing data on nuclear structure and decay modes across 118 elements. There is data here on natural abundances, atomic mass, spin, half-life, and more. The typical users for such a dataset include researchers in fields such as nuclear physics, radiochemistry, and nuclear medicine.\n\n\nThis is a dataset with 3,383 rows and 29 columns.\n\nnuclide: The symbol for the nuclide.\nz, n: The number of protons and neutrons.\nelement: The element symbol.\nradius, radius_uncert: The charge radius and its associated uncertainty. In units of fm.\nabundance, abundance_uncert: The abundance of the stable isotope as a mole fraction (in relation to other stable isotopes of the same element). Values are provided for the nuclide only if is_stable is \"TRUE\".\nis_stable: Is the nuclide a stable isotope?\nhalf_life, half_life_uncert: The nuclide‚Äôs half life represented as seconds.\nisospin: The isospin, or the quantum number related to the up and down quark content of the particle.\ndecay_1, decay_2, decay_3: The 1st, 2nd, and 3rd decay modes.\ndecay_1_pct, decay_1_pct_uncert, decay_2_pct, decay_2_pct_uncert, decay_3_pct, decay_3_pct_uncert: The branching proportions for the 1st, 2nd, and 3rd decays (along with uncertainty values).\nmagnetic_dipole, magnetic_dipole_uncert: The magnetic dipole and its associated uncertainty. Expressed in units of micro N, or nuclear magneton values.\nelectric_quadrupole, electric_quadrupole_uncert: The electric quadrupole and its associated uncertainty. In units of barn (b).\natomic_mass, atomic_mass_uncert: The atomic mass and its associated uncertainty. In units of micro AMU.\nmass_excess, mass_excess_uncert: The mass excess and its associated uncertainty. In units of keV.\n\n\n\n\nRows: 3383\nColumns: 29\n$ nuclide                    &lt;str&gt; '^{1}_{1}H0', '^{2}_{1}H1', '^{3}_{1}H2'\n$ z                          &lt;i64&gt; 1, 1, 1\n$ n                          &lt;i64&gt; 0, 1, 2\n$ element                    &lt;str&gt; 'H', 'H', 'H'\n$ radius                     &lt;f64&gt; 0.8783, 2.1421, 1.7591\n$ radius_uncert              &lt;f64&gt; 0.0086, 0.0088, 0.0363\n$ abundance                  &lt;f64&gt; 0.999855, 0.000145, None\n$ abundance_uncert           &lt;f64&gt; 7.8e-05, 7.8e-05, None\n$ is_stable                  &lt;str&gt; 'TRUE', 'TRUE', 'FALSE'\n$ half_life                  &lt;f64&gt; None, None, 388781328.00697297\n$ half_life_uncert           &lt;f64&gt; None, None, 631138.51949184\n$ isospin                    &lt;str&gt; None, None, None\n$ decay_1                    &lt;str&gt; None, None, 'B-'\n$ decay_1_pct                &lt;f64&gt; None, None, 1.0\n$ decay_1_pct_uncert         &lt;f64&gt; None, None, None\n$ decay_2                    &lt;str&gt; None, None, None\n$ decay_2_pct                &lt;f64&gt; None, None, None\n$ decay_2_pct_uncert         &lt;f64&gt; None, None, None\n$ decay_3                    &lt;str&gt; None, None, None\n$ decay_3_pct                &lt;f64&gt; None, None, None\n$ decay_3_pct_uncert         &lt;f64&gt; None, None, None\n$ magnetic_dipole            &lt;f64&gt; 2.792847351, 0.857438231, 2.97896246\n$ magnetic_dipole_uncert     &lt;f64&gt; 9e-09, 5e-09, 1.4e-08\n$ electric_quadrupole        &lt;f64&gt; None, 0.0028578, None\n$ electric_quadrupole_uncert &lt;f64&gt; None, 3e-07, None\n$ atomic_mass                &lt;f64&gt; 1007825.031898, 2014101.777844, 3016049.28132\n$ atomic_mass_uncert         &lt;f64&gt; 1.4e-05, 1.5e-05, 8e-05\n$ mass_excess                &lt;f64&gt; 7288.971064, 13135.722895, 14949.8109\n$ mass_excess_uncert         &lt;f64&gt; 1.3e-05, 1.5e-05, 8e-05"
  },
  {
    "objectID": "reference/data.nuclides.html#details",
    "href": "reference/data.nuclides.html#details",
    "title": "data.nuclides",
    "section": "",
    "text": "This is a dataset with 3,383 rows and 29 columns.\n\nnuclide: The symbol for the nuclide.\nz, n: The number of protons and neutrons.\nelement: The element symbol.\nradius, radius_uncert: The charge radius and its associated uncertainty. In units of fm.\nabundance, abundance_uncert: The abundance of the stable isotope as a mole fraction (in relation to other stable isotopes of the same element). Values are provided for the nuclide only if is_stable is \"TRUE\".\nis_stable: Is the nuclide a stable isotope?\nhalf_life, half_life_uncert: The nuclide‚Äôs half life represented as seconds.\nisospin: The isospin, or the quantum number related to the up and down quark content of the particle.\ndecay_1, decay_2, decay_3: The 1st, 2nd, and 3rd decay modes.\ndecay_1_pct, decay_1_pct_uncert, decay_2_pct, decay_2_pct_uncert, decay_3_pct, decay_3_pct_uncert: The branching proportions for the 1st, 2nd, and 3rd decays (along with uncertainty values).\nmagnetic_dipole, magnetic_dipole_uncert: The magnetic dipole and its associated uncertainty. Expressed in units of micro N, or nuclear magneton values.\nelectric_quadrupole, electric_quadrupole_uncert: The electric quadrupole and its associated uncertainty. In units of barn (b).\natomic_mass, atomic_mass_uncert: The atomic mass and its associated uncertainty. In units of micro AMU.\nmass_excess, mass_excess_uncert: The mass excess and its associated uncertainty. In units of keV."
  },
  {
    "objectID": "reference/data.nuclides.html#preview",
    "href": "reference/data.nuclides.html#preview",
    "title": "data.nuclides",
    "section": "",
    "text": "Rows: 3383\nColumns: 29\n$ nuclide                    &lt;str&gt; '^{1}_{1}H0', '^{2}_{1}H1', '^{3}_{1}H2'\n$ z                          &lt;i64&gt; 1, 1, 1\n$ n                          &lt;i64&gt; 0, 1, 2\n$ element                    &lt;str&gt; 'H', 'H', 'H'\n$ radius                     &lt;f64&gt; 0.8783, 2.1421, 1.7591\n$ radius_uncert              &lt;f64&gt; 0.0086, 0.0088, 0.0363\n$ abundance                  &lt;f64&gt; 0.999855, 0.000145, None\n$ abundance_uncert           &lt;f64&gt; 7.8e-05, 7.8e-05, None\n$ is_stable                  &lt;str&gt; 'TRUE', 'TRUE', 'FALSE'\n$ half_life                  &lt;f64&gt; None, None, 388781328.00697297\n$ half_life_uncert           &lt;f64&gt; None, None, 631138.51949184\n$ isospin                    &lt;str&gt; None, None, None\n$ decay_1                    &lt;str&gt; None, None, 'B-'\n$ decay_1_pct                &lt;f64&gt; None, None, 1.0\n$ decay_1_pct_uncert         &lt;f64&gt; None, None, None\n$ decay_2                    &lt;str&gt; None, None, None\n$ decay_2_pct                &lt;f64&gt; None, None, None\n$ decay_2_pct_uncert         &lt;f64&gt; None, None, None\n$ decay_3                    &lt;str&gt; None, None, None\n$ decay_3_pct                &lt;f64&gt; None, None, None\n$ decay_3_pct_uncert         &lt;f64&gt; None, None, None\n$ magnetic_dipole            &lt;f64&gt; 2.792847351, 0.857438231, 2.97896246\n$ magnetic_dipole_uncert     &lt;f64&gt; 9e-09, 5e-09, 1.4e-08\n$ electric_quadrupole        &lt;f64&gt; None, 0.0028578, None\n$ electric_quadrupole_uncert &lt;f64&gt; None, 3e-07, None\n$ atomic_mass                &lt;f64&gt; 1007825.031898, 2014101.777844, 3016049.28132\n$ atomic_mass_uncert         &lt;f64&gt; 1.4e-05, 1.5e-05, 8e-05\n$ mass_excess                &lt;f64&gt; 7288.971064, 13135.722895, 14949.8109\n$ mass_excess_uncert         &lt;f64&gt; 1.3e-05, 1.5e-05, 8e-05"
  },
  {
    "objectID": "reference/GT.fmt_number.html",
    "href": "reference/GT.fmt_number.html",
    "title": "GT.fmt_number",
    "section": "",
    "text": "GT.fmt_number(\n    self,\n    columns=None,\n    rows=None,\n    decimals=2,\n    n_sigfig=None,\n    drop_trailing_zeros=False,\n    drop_trailing_dec_mark=True,\n    use_seps=True,\n    accounting=False,\n    scale_by=1,\n    compact=False,\n    pattern='{x}',\n    sep_mark=',',\n    dec_mark='.',\n    force_sign=False,\n    locale=None,\n)\nFormat numeric values.\nWith numeric values within a table‚Äôs body cells, we can perform number-based formatting so that the targeted values are rendered with a higher consideration for tabular presentation. Furthermore, there is finer control over numeric formatting with the following options:"
  },
  {
    "objectID": "reference/GT.fmt_number.html#parameters",
    "href": "reference/GT.fmt_number.html#parameters",
    "title": "GT.fmt_number",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\ndecimals : int = 2\n\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n\nn_sigfig : int | None = None\n\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\n\ndrop_trailing_zeros : bool = False\n\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\n\ndrop_trailing_dec_mark : bool = True\n\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\n\nuse_seps : bool = True\n\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\n\naccounting : bool = False\n\nWhether to use accounting style, which wraps negative numbers in parentheses instead of using a minus sign.\n\nscale_by : float = 1\n\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n\ncompact : bool = False\n\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1.23K, and 1230000 becomes 1.23M). The compact option is False by default.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nsep_mark : str = ','\n\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n\ndec_mark : str = '.'\n\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n\nforce_sign : bool = False\n\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.fmt_number.html#returns",
    "href": "reference/GT.fmt_number.html#returns",
    "title": "GT.fmt_number",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_number.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_number.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_number",
    "section": "Adapting output to a specific locale",
    "text": "Adapting output to a specific locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale‚Äôs preferred values.\nNote that a locale value provided here will override any global locale setting performed in GT()‚Äôs own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_number.html#examples",
    "href": "reference/GT.fmt_number.html#examples",
    "title": "GT.fmt_number",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the exibble dataset to create a table. With the fmt_number() method, we‚Äôll format the num column to have three decimal places (with decimals=3) and omit the use of digit separators (with use_seps=False).\n\nfrom great_tables import GT, exibble\n\n(\n    GT(exibble)\n    .fmt_number(columns=\"num\", decimals=3, use_seps=False)\n)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33.330\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444.400\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550.000\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000.000\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.000\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b"
  },
  {
    "objectID": "reference/GT.fmt_number.html#see-also",
    "href": "reference/GT.fmt_number.html#see-also",
    "title": "GT.fmt_number",
    "section": "See Also",
    "text": "See Also\nThe fmt_integer() method might be more useful if you really need to format numeric values to appear as integers (i.e., no decimals will be shown and input values are rounded as necessary). Need to do numeric formatting on a value or list of values? Take a look at the functional version of this method: val_fmt_number()."
  },
  {
    "objectID": "reference/html.html",
    "href": "reference/html.html",
    "title": "html",
    "section": "",
    "text": "html(text)\nInterpret input text as HTML-formatted text.\nFor certain pieces of text (like in column labels or table headings) we may want to express them as raw HTML. In fact, with HTML, anything goes so it can be much more than just text. The html() function will guard the input HTML against escaping, so, your HTML tags will come through as HTML when rendered.\n\n\n\ntext : str\n\nThe text that is understood to contain HTML formatting.\n\n\n\n\n\nSee GT.tab_header()."
  },
  {
    "objectID": "reference/html.html#parameters",
    "href": "reference/html.html#parameters",
    "title": "html",
    "section": "",
    "text": "text : str\n\nThe text that is understood to contain HTML formatting."
  },
  {
    "objectID": "reference/html.html#examples",
    "href": "reference/html.html#examples",
    "title": "html",
    "section": "",
    "text": "See GT.tab_header()."
  },
  {
    "objectID": "reference/GT.cols_label.html",
    "href": "reference/GT.cols_label.html",
    "title": "GT.cols_label",
    "section": "",
    "text": "GT.cols_label(self, cases=None, **kwargs)\nRelabel one or more columns.\nThere are three important pieces to labelling:\nSee define_units() for details on unit notation."
  },
  {
    "objectID": "reference/GT.cols_label.html#parameters",
    "href": "reference/GT.cols_label.html#parameters",
    "title": "GT.cols_label",
    "section": "Parameters",
    "text": "Parameters\n\ncases : dict[str, str | BaseText] | None = None\n\nA dictionary where the keys are column names and the values are the labels. Labels may use md() or html() helpers for formatting.\n\n****kwargs** : str | BaseText = {}\n\nKeyword arguments to specify column labels. Each keyword corresponds to a column name, with its value indicating the new label."
  },
  {
    "objectID": "reference/GT.cols_label.html#returns",
    "href": "reference/GT.cols_label.html#returns",
    "title": "GT.cols_label",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.cols_label.html#notes",
    "href": "reference/GT.cols_label.html#notes",
    "title": "GT.cols_label",
    "section": "Notes",
    "text": "Notes\nGT always selects columns using their name in the underlying data. This means that a column‚Äôs label is purely for final presentation."
  },
  {
    "objectID": "reference/GT.cols_label.html#examples",
    "href": "reference/GT.cols_label.html#examples",
    "title": "GT.cols_label",
    "section": "Examples",
    "text": "Examples\nThe example below relabels columns from the countrypops data to start with uppercase.\n\nfrom great_tables import GT\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Uganda\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\n(\n    GT(countrypops_mini)\n    .cols_label(\n        country_name=\"Country Name\",\n        year=\"Year\",\n        population=\"Population\"\n    )\n)\n\n\n\n\n\n\n\n  Country Name\n  Year\n  Population\n\n\n\n  \n    Uganda\n    2018\n    41515395\n  \n  \n    Uganda\n    2019\n    42949080\n  \n  \n    Uganda\n    2020\n    44404611\n  \n  \n    Uganda\n    2021\n    45853778\n  \n  \n    Uganda\n    2022\n    47249585\n  \n\n\n\n\n\n\n        \n\n\nNote that we supplied the name of the column as the key, and the new label as the value.\nWe can also use Markdown formatting for the column labels. In this example, we‚Äôll use md(\"*Population*\") to make the label italicized.\n\nfrom great_tables import GT, md\nfrom great_tables.data import countrypops\n\n(\n    GT(countrypops_mini)\n    .cols_label(\n        country_name=\"Name\",\n        year=\"Year\",\n        population=md(\"*Population*\")\n    )\n)\n\n\n\n\n\n\n\n  Name\n  Year\n  Population\n\n\n\n  \n    Uganda\n    2018\n    41515395\n  \n  \n    Uganda\n    2019\n    42949080\n  \n  \n    Uganda\n    2020\n    44404611\n  \n  \n    Uganda\n    2021\n    45853778\n  \n  \n    Uganda\n    2022\n    47249585\n  \n\n\n\n\n\n\n        \n\n\nWe can also use unit notation to format the column labels. In this example, we‚Äôll use {cm^3 molecules^-1 s^-1} for part of the label for the OH_k298 column.\n\nfrom great_tables import GT\nfrom great_tables.data import reactions\nimport polars as pl\n\nreactions_mini = (\n    pl.from_pandas(reactions)\n    .filter(pl.col(\"cmpd_type\") == \"mercaptan\")\n    .select([\"cmpd_name\", \"OH_k298\"])\n)\n\n(\n    GT(reactions_mini)\n    .fmt_scientific(\"OH_k298\")\n    .sub_missing()\n    .cols_label(\n        cmpd_name=\"Compound Name\",\n        OH_k298=\"OH, {{cm^3 molecules^-1 s^-1}}\",\n    )\n)\n\n\n\n\n\n\n\n  Compound Name\n  OH, cm3 molecules‚àí1 s‚àí1\n\n\n\n  \n    methanethiol\n    3.50 √ó 10‚àí11\n  \n  \n    ethanethiol\n    4.50 √ó 10‚àí11\n  \n  \n    propanethiol\n    5.30 √ó 10‚àí11\n  \n  \n    2-propanethiol\n    3.90 √ó 10‚àí11\n  \n  \n    1-butanethiol\n    5.60 √ó 10‚àí11\n  \n  \n    2-methyl-1-propanethiol\n    4.60 √ó 10‚àí11\n  \n  \n    2-butanethiol\n    3.80 √ó 10‚àí11\n  \n  \n    t-butylsulfide\n    2.90 √ó 10‚àí11\n  \n  \n    2-methylbutanethiol\n    5.20 √ó 10‚àí11\n  \n  \n    n-pentanethiol\n    ‚Äî\n  \n  \n    1,2-ethanedithiol\n    3.80 √ó 10‚àí11"
  },
  {
    "objectID": "reference/data.films.html",
    "href": "reference/data.films.html",
    "title": "data.films",
    "section": "",
    "text": "data.films\nFeature films in competition at the Cannes Film Festival.\nEach entry in the films is a feature film that appeared in the official selection during a festival year (starting in 1946 and active to the present day). The year column refers to the year of the festival and this figure doesn‚Äôt always coincide with the release year of the film. The film‚Äôs title reflects the most common title of the film in English, where the original_title column provides the title of the film in its spoken language (transliterated to Roman script where necessary).\n\n\nThis is a dataset with 1,851 rows and 8 columns.\n\nyear: The year of the festival in which the film was in competition.\ntitle, original_title: The title field provides the film title used for English-speaking audiences. The original_title field is populated when title differs greatly from the non-English original.\ndirector: The director or set of co-directors for the film. Multiple directors are separated by a comma.\nlanguages: The languages spoken in the film in the order of appearance. This consists of ISO 639 language codes (primarily as two-letter codes, but using three-letter codes where necessary).\ncountries_of_origin: The country or countries of origin for the production. Here, 2-letter ISO 3166-1 country codes (set in uppercase) are used.\nrun_time: The run time of the film in hours and minutes. This is given as a string in the format &lt;x&gt;h &lt;y&gt;m.\nimdb_url: The URL of the film‚Äôs information page in the Internet Movie Database (IMDB).\n\n\n\n\nRows: 1851\nColumns: 8\n$ year                &lt;i64&gt; 1946, 1946, 1946\n$ title               &lt;str&gt; 'The Lovers', 'Anna and the King of Siam', 'Blood and Fire'\n$ original_title      &lt;str&gt; 'Amanti in fuga', None, 'Blod och eld'\n$ director            &lt;str&gt; 'Giacomo Gentilomo', 'John Cromwell', 'Anders Henrikson'\n$ languages           &lt;str&gt; 'it', 'en', 'sv'\n$ countries_of_origin &lt;str&gt; 'IT', 'US', 'SE'\n$ run_time            &lt;str&gt; '1h 30m', '2h 8m', '1h 40m'\n$ imdb_url            &lt;str&gt; 'https://www.imdb.com/title/tt0038297/',\n                            'https://www.imdb.com/title/tt0038303/',\n                            'https://www.imdb.com/title/tt0037544/'"
  },
  {
    "objectID": "reference/data.films.html#details",
    "href": "reference/data.films.html#details",
    "title": "data.films",
    "section": "",
    "text": "This is a dataset with 1,851 rows and 8 columns.\n\nyear: The year of the festival in which the film was in competition.\ntitle, original_title: The title field provides the film title used for English-speaking audiences. The original_title field is populated when title differs greatly from the non-English original.\ndirector: The director or set of co-directors for the film. Multiple directors are separated by a comma.\nlanguages: The languages spoken in the film in the order of appearance. This consists of ISO 639 language codes (primarily as two-letter codes, but using three-letter codes where necessary).\ncountries_of_origin: The country or countries of origin for the production. Here, 2-letter ISO 3166-1 country codes (set in uppercase) are used.\nrun_time: The run time of the film in hours and minutes. This is given as a string in the format &lt;x&gt;h &lt;y&gt;m.\nimdb_url: The URL of the film‚Äôs information page in the Internet Movie Database (IMDB)."
  },
  {
    "objectID": "reference/data.films.html#preview",
    "href": "reference/data.films.html#preview",
    "title": "data.films",
    "section": "",
    "text": "Rows: 1851\nColumns: 8\n$ year                &lt;i64&gt; 1946, 1946, 1946\n$ title               &lt;str&gt; 'The Lovers', 'Anna and the King of Siam', 'Blood and Fire'\n$ original_title      &lt;str&gt; 'Amanti in fuga', None, 'Blod och eld'\n$ director            &lt;str&gt; 'Giacomo Gentilomo', 'John Cromwell', 'Anders Henrikson'\n$ languages           &lt;str&gt; 'it', 'en', 'sv'\n$ countries_of_origin &lt;str&gt; 'IT', 'US', 'SE'\n$ run_time            &lt;str&gt; '1h 30m', '2h 8m', '1h 40m'\n$ imdb_url            &lt;str&gt; 'https://www.imdb.com/title/tt0038297/',\n                            'https://www.imdb.com/title/tt0038303/',\n                            'https://www.imdb.com/title/tt0037544/'"
  },
  {
    "objectID": "reference/GT.fmt_roman.html",
    "href": "reference/GT.fmt_roman.html",
    "title": "GT.fmt_roman",
    "section": "",
    "text": "GT.fmt_roman(self, columns=None, rows=None, case='upper', pattern='{x}')\nFormat values as Roman numerals.\nWith numeric values in a gt table we can transform those to Roman numerals, rounding values as necessary."
  },
  {
    "objectID": "reference/GT.fmt_roman.html#parameters",
    "href": "reference/GT.fmt_roman.html#parameters",
    "title": "GT.fmt_roman",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\ncase : str = 'upper'\n\nShould Roman numerals should be rendered as uppercase (\"upper\") or lowercase (\"lower\") letters? By default, this is set to \"upper\".\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals."
  },
  {
    "objectID": "reference/GT.fmt_roman.html#returns",
    "href": "reference/GT.fmt_roman.html#returns",
    "title": "GT.fmt_roman",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_roman.html#examples",
    "href": "reference/GT.fmt_roman.html#examples",
    "title": "GT.fmt_roman",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs first create a DataFrame containing small numeric values and then introduce that to GT(). We‚Äôll then format the roman column to appear as Roman numerals with the fmt_roman() method.\n\nimport pandas as pd\nfrom great_tables import GT\n\nnumbers_tbl = pd.DataFrame({\"arabic\": [1, 8, 24, 85], \"roman\": [1, 8, 24, 85]})\n\n(\n    GT(numbers_tbl, rowname_col=\"arabic\")\n    .fmt_roman(columns=\"roman\")\n)\n\n\n\n\n\n\n\n  \n  roman\n\n\n\n  \n    1\n    I\n  \n  \n    8\n    VIII\n  \n  \n    24\n    XXIV\n  \n  \n    85\n    LXXXV"
  },
  {
    "objectID": "reference/GT.fmt_roman.html#see-also",
    "href": "reference/GT.fmt_roman.html#see-also",
    "title": "GT.fmt_roman",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_roman(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/from_column.html",
    "href": "reference/from_column.html",
    "title": "from_column",
    "section": "",
    "text": "from_column(column, na_value=None, fn=None)\nSpecify that a style value should be fetched from a column in the data."
  },
  {
    "objectID": "reference/from_column.html#examples",
    "href": "reference/from_column.html#examples",
    "title": "from_column",
    "section": "Examples",
    "text": "Examples\n\nimport pandas as pd\nfrom great_tables import GT, exibble, from_column, loc, style\n\ndf = pd.DataFrame({\"x\": [1, 2], \"color\": [\"red\", \"blue\"]})\n\n(\n    GT(df)\n    .tab_style(\n        style=style.text(color=from_column(\"color\")),\n        locations=loc.body(columns=[\"x\"])\n    )\n)\n\n\n\n\n\n\n\n  x\n  color\n\n\n\n  \n    1\n    red\n  \n  \n    2\n    blue\n  \n\n\n\n\n\n\n        \n\n\nIf you are using polars, you can just pass polars expressions in directly:\n\nimport polars as pl\nfrom great_tables import GT, exibble, from_column, loc, style\n\ndf_polars = pl.from_pandas(df)\n\n(\n    GT(df_polars)\n    .tab_style(\n        style=style.text(color=pl.col(\"color\")),\n        locations=loc.body(columns=[\"x\"])\n    )\n)\n\n\n\n\n\n\n\n  x\n  color\n\n\n\n  \n    1\n    red\n  \n  \n    2\n    blue"
  },
  {
    "objectID": "reference/GT.data_color.html",
    "href": "reference/GT.data_color.html",
    "title": "GT.data_color",
    "section": "",
    "text": "GT.data_color(\n    self,\n    columns=None,\n    rows=None,\n    palette=None,\n    domain=None,\n    na_color=None,\n    alpha=None,\n    reverse=False,\n    autocolor_text=True,\n)\nPerform data cell colorization.\nIt‚Äôs possible to add color to data cells according to their values with the data_color() method. There is a multitude of ways to perform data cell colorizing here:"
  },
  {
    "objectID": "reference/GT.data_color.html#parameters",
    "href": "reference/GT.data_color.html#parameters",
    "title": "GT.data_color",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : RowSelectExpr = None\n\nIn conjunction with columns=, we can specify which rows should be colored. By default, all rows in the targeted columns will be colored. Alternatively, we can provide a list of row indices.\n\npalette : str | list[str] | None = None\n\nThe color palette to use. This should be a list of colors (e.g., [\"#FF0000\", \"#00FF00\", \"#0000FF\"]). A ColorBrewer palette could also be used, just supply the name (reference available in the Color palette access from ColorBrewer section). If None, then a default palette will be used.\n\ndomain : list[str] | list[int] | list[float] | None = None\n\nThe domain of values to use for the color scheme. This can be a list of floats, integers, or strings. If None, then the domain will be inferred from the data values.\n\nna_color : str | None = None\n\nThe color to use for missing values. If None, then the default color (\"#808080\") will be used.\n\nalpha : int | float | None = None\n\nAn optional, fixed alpha transparency value that will be applied to all color palette values.\n\nreverse : bool = False\n\nShould the colors computed operate in the reverse order? If True then colors that normally change from red to blue will change in the opposite direction.\n\nautocolor_text : bool = True\n\nWhether or not to automatically color the text of the data values. If True, then the text will be colored according to the background color of the cell."
  },
  {
    "objectID": "reference/GT.data_color.html#returns",
    "href": "reference/GT.data_color.html#returns",
    "title": "GT.data_color",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.data_color.html#color-palette-access-from-colorbrewer-and-viridis",
    "href": "reference/GT.data_color.html#color-palette-access-from-colorbrewer-and-viridis",
    "title": "GT.data_color",
    "section": "Color palette access from ColorBrewer and viridis",
    "text": "Color palette access from ColorBrewer and viridis\nAll palettes from the ColorBrewer package can be accessed by providing the palette name in palette=. There are 35 available palettes:\n\n\n\n\nPalette Name\nColors\nCategory\nColorblind Friendly\n\n\n\n\n1\n\"BrBG\"\n11\nDiverging\nYes\n\n\n2\n\"PiYG\"\n11\nDiverging\nYes\n\n\n3\n\"PRGn\"\n11\nDiverging\nYes\n\n\n4\n\"PuOr\"\n11\nDiverging\nYes\n\n\n5\n\"RdBu\"\n11\nDiverging\nYes\n\n\n6\n\"RdYlBu\"\n11\nDiverging\nYes\n\n\n7\n\"RdGy\"\n11\nDiverging\nNo\n\n\n8\n\"RdYlGn\"\n11\nDiverging\nNo\n\n\n9\n\"Spectral\"\n11\nDiverging\nNo\n\n\n10\n\"Dark2\"\n8\nQualitative\nYes\n\n\n11\n\"Paired\"\n12\nQualitative\nYes\n\n\n12\n\"Set1\"\n9\nQualitative\nNo\n\n\n13\n\"Set2\"\n8\nQualitative\nYes\n\n\n14\n\"Set3\"\n12\nQualitative\nNo\n\n\n15\n\"Accent\"\n8\nQualitative\nNo\n\n\n16\n\"Pastel1\"\n9\nQualitative\nNo\n\n\n17\n\"Pastel2\"\n8\nQualitative\nNo\n\n\n18\n\"Blues\"\n9\nSequential\nYes\n\n\n19\n\"BuGn\"\n9\nSequential\nYes\n\n\n20\n\"BuPu\"\n9\nSequential\nYes\n\n\n21\n\"GnBu\"\n9\nSequential\nYes\n\n\n22\n\"Greens\"\n9\nSequential\nYes\n\n\n23\n\"Greys\"\n9\nSequential\nYes\n\n\n24\n\"Oranges\"\n9\nSequential\nYes\n\n\n25\n\"OrRd\"\n9\nSequential\nYes\n\n\n26\n\"PuBu\"\n9\nSequential\nYes\n\n\n27\n\"PuBuGn\"\n9\nSequential\nYes\n\n\n28\n\"PuRd\"\n9\nSequential\nYes\n\n\n29\n\"Purples\"\n9\nSequential\nYes\n\n\n30\n\"RdPu\"\n9\nSequential\nYes\n\n\n31\n\"Reds\"\n9\nSequential\nYes\n\n\n32\n\"YlGn\"\n9\nSequential\nYes\n\n\n33\n\"YlGnBu\"\n9\nSequential\nYes\n\n\n34\n\"YlOrBr\"\n9\nSequential\nYes\n\n\n35\n\"YlOrRd\"\n9\nSequential\nYes\n\n\n\nWe can also use the viridis and associated color palettes by providing to palette= any of the following string values: \"viridis\", \"plasma\", \"inferno\", \"magma\", or \"cividis\"."
  },
  {
    "objectID": "reference/GT.data_color.html#examples",
    "href": "reference/GT.data_color.html#examples",
    "title": "GT.data_color",
    "section": "Examples",
    "text": "Examples\nThe data_color() method can be used without any supplied arguments to colorize a table. Let‚Äôs do this with the exibble dataset:\n\nfrom great_tables import GT\nfrom great_tables.data import exibble\n\nGT(exibble).data_color()\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nWhat‚Äôs happened is that data_color() applies background colors to all cells of every column with the palette of eight colors. Numeric columns will use ‚Äònumeric‚Äô methodology for color scaling whereas string-based columns will use the ‚Äòfactor‚Äô methodology. The text color undergoes an automatic modification that maximizes contrast (since autocolor_text=True by default).\nWe can target specific colors and apply color to just those columns. Let‚Äôs do that and also supply palette= values of \"red\" and \"green\".\n\nGT(exibble).data_color(\n    columns=[\"num\", \"currency\"],\n    palette=[\"red\", \"green\"]\n)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nWith those options in place we see that only the numeric columns num and currency received color treatments. Moreover, the palette colors were mapped to the lower and upper limits of the data in each column; interpolated colors were used for the values in between the numeric limits of the two columns.\nWe can manually set the limits of the data with the domain= argument (which is preferable in most cases). Let‚Äôs colorize just the currency column and set domain=[0, 50]. Any values that are either missing or lie outside of the domain will be colorized with the na_color= color (so we‚Äôll set that to \"lightgray\").\n\nGT(exibble).data_color(\n    columns=\"currency\",\n    palette=[\"red\", \"green\"],\n    domain=[0, 50],\n    na_color=\"lightgray\"\n)\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b"
  },
  {
    "objectID": "reference/data.reactions.html",
    "href": "reference/data.reactions.html",
    "title": "data.reactions",
    "section": "",
    "text": "data.reactions\nReaction rates for gas-phase atmospheric reactions of organic compounds.\nThe reactions dataset contains kinetic data for second-order (two body) gas-phase chemical reactions for 1,683 organic compounds. The reaction-rate values and parameters within this dataset are useful for studies of the atmospheric environment. Organic pollutants, which are present in trace amounts in the atmosphere, have been extensively studied by research groups since their persistence in the atmosphere requires specific attention. Many researchers have reported kinetic data on specific gas-phase reactions and these mainly involve oxidation reactions with OH, nitrate radicals, ozone, and chlorine atoms.\nThis compilation of rate constant (k) data as contains the values for rate constants at 298 K (in units of cm^3 molecules^-1 s^-1) as well as parameters that allow for the calculation of rate constants at different temperatures (the temperature dependence parameters: A, B, and n). Uncertainty values/factors and temperature limits are also provided here where information is available.\n\n\nThis is a dataset with 1,683 rows and 39 columns.\n\ncompd_name: The name of the primary compound undergoing reaction with OH, nitrate radicals, ozone, or chlorine atoms.\ncmpd_mwt: The molecular weight of the compound in units of g/mol.\ncmpd_formula: The chemical formula of the compound.\ncmpd_type: The category of compounds that the compd_name falls under.\ncmpd_smiles: The SMILES (simplified molecular-input line-entry system) representation for the compound.\ncmpd_inchi: The InChI (International Chemical Identifier) representation for the compound.\ncmpd_inchikey: The InChIKey, which is a hashed InChI value, has a fixed length of 27 characters. These values can be used to more easily perform database searches of chemical compounds.\nOH_k298: Rate constant at 298 K for OH reactions.\nOH_uncert: Uncertainty as a percentage for certain OH reactions.\nOH_u_fac: Uncertainty as a plus/minus difference for certain OH reactions.\nOH_a, OH_b, OH_n: Extended temperature dependence parameters for bimolecular OH reactions, to be used in the Arrhenius expression: k(T)=A exp(-B/T) (T/300)^n. In that, A is expressed as cm^3 molecules^-1 s^-1, B is in units of K, and n is dimensionless. Any missing values indicate that data is not available.\nOH_t_low, OH_t_high: The low and high temperature boundaries (in units of K) for which the OH_a, OH_b, and OH_n parameters are valid.\nO3_k298: Rate constant at 298 K for ozone reactions.\nO3_uncert: Uncertainty as a percentage for certain ozone reactions.\nO3_u_fac: Uncertainty as a plus/minus difference for certain ozone reactions.\nO3_a, O3_b, O3_n: Extended temperature dependence parameters for bimolecular ozone reactions, to be used in the Arrhenius expression: k(T)=A exp(-B/T) (T/300)^n. In that, A is expressed as cm^3 molecules^-1 s^-1, B is in units of K, and n is dimensionless. Any missing values indicate that data is not available.\nO3_t_low, O3_t_high: The low and high temperature boundaries (in units of K) for which the O3_a, O3_b, and O3_n parameters are valid.\nNO3_k298: Rate constant at 298 K for NO3 reactions.\nNO3_uncert: Uncertainty as a percentage for certain NO3 reactions.\nNO3_u_fac: Uncertainty as a plus/minus difference for certain NO3 reactions.\nNO3_a, NO3_b, NO3_n: Extended temperature dependence parameters for bimolecular NO3 reactions, to be used in the Arrhenius expression: k(T)=A exp(-B/T) (T/300)^n. In that, A is expressed as cm^3 molecules^-1 s^-1, B is in units of K, and n is dimensionless. Any missing values indicate that data is not available.\nNO3_t_low, NO3_t_high: The low and high temperature boundaries (in units of K) for which the NO3_a, NO3_b, and NO3_n parameters are valid.\nCl_k298: Rate constant at 298 K for Cl reactions.\nCl_uncert: Uncertainty as a percentage for certain Cl reactions.\nCl_u_fac: Uncertainty as a plus/minus difference for certain Cl reactions.\nCl_a, Cl_b, Cl_n: Extended temperature dependence parameters for bimolecular Cl reactions, to be used in the Arrhenius expression: k(T)=A exp(-B/T) (T/300)^n. In that, A is expressed as cm^3 molecules^-1 s^-1, B is in units of K, and n is dimensionless. Any missing values indicate that data is not available.\nCl_t_low, Cl_t_high: The low and high temperature boundaries (in units of K) for which the Cl_a, Cl_b, and Cl_n parameters are valid.\n\n\n\n\nRows: 1683\nColumns: 39\n$ cmpd_name     &lt;str&gt; 'methane', 'formaldehyde', 'methanol'\n$ cmpd_mwt      &lt;f64&gt; 16.04, 30.03, 32.04\n$ cmpd_formula  &lt;str&gt; 'CH4', 'CH2O', 'CH4O'\n$ cmpd_type     &lt;str&gt; 'normal alkane', 'aldehyde', 'alcohol or glycol'\n$ cmpd_smiles   &lt;str&gt; 'C', 'C=O', 'CO'\n$ cmpd_inchi    &lt;str&gt; 'InChI=1S/CH4/h1H4', 'InChI=1S/CH2O/c1-2/h1H2', 'InChI=1S/CH4O/c1-2/h2H,1H3'\n$ cmpd_inchikey &lt;str&gt; 'VNWKTOKETHGBQD-UHFFFAOYSA-N',\n                      'WSFSSNUMVMOOMR-UHFFFAOYSA-N',\n                      'OKKJLVBELUTLKV-UHFFFAOYSA-N'\n$ OH_k298       &lt;f64&gt; 6.36e-15, 8.5e-12, 8.78e-13\n$ OH_uncert     &lt;f64&gt; 0.1, 0.2, 0.1\n$ OH_u_fac      &lt;f64&gt; None, None, None\n$ OH_A          &lt;f64&gt; 3.62e-13, 5.4e-12, 2.32e-13\n$ OH_B          &lt;f64&gt; 1200.34866000493, -135.0, -402.0\n$ OH_n          &lt;f64&gt; 2.17993581535803, None, 2.72\n$ OH_t_low      &lt;f64&gt; 200.0, 200.0, 210.0\n$ OH_t_high     &lt;f64&gt; 2025.0, 300.0, 1344.0\n$ O3_k298       &lt;f64&gt; None, None, None\n$ O3_uncert     &lt;f64&gt; None, None, None\n$ O3_u_fac      &lt;f64&gt; None, None, None\n$ O3_A          &lt;f64&gt; None, None, None\n$ O3_B          &lt;f64&gt; None, None, None\n$ O3_n          &lt;f64&gt; None, None, None\n$ O3_t_low      &lt;f64&gt; None, None, None\n$ O3_t_high     &lt;f64&gt; None, None, None\n$ NO3_k298      &lt;f64&gt; None, 5.5e-16, 1.3e-16\n$ NO3_uncert    &lt;f64&gt; None, None, None\n$ NO3_u_fac     &lt;f64&gt; None, 1.6, 3.0\n$ NO3_A         &lt;f64&gt; None, None, 9.4e-13\n$ NO3_B         &lt;f64&gt; None, None, 2650.0\n$ NO3_n         &lt;f64&gt; None, None, None\n$ NO3_t_low     &lt;f64&gt; None, None, 250.0\n$ NO3_t_high    &lt;f64&gt; None, None, 370.0\n$ Cl_k298       &lt;f64&gt; 1e-13, 7.2e-11, 5.1e-11\n$ Cl_uncert     &lt;f64&gt; 0.15, 0.15, 0.2\n$ Cl_u_fac      &lt;f64&gt; None, None, None\n$ Cl_A          &lt;f64&gt; 6.6e-12, 8.1e-11, 5.1e-11\n$ Cl_B          &lt;f64&gt; 1240.0, 34.0, 0.0\n$ Cl_n          &lt;f64&gt; None, None, None\n$ Cl_t_low      &lt;f64&gt; 200.0, 200.0, 225.0\n$ Cl_t_high     &lt;f64&gt; 300.0, 500.0, 950.0"
  },
  {
    "objectID": "reference/data.reactions.html#details",
    "href": "reference/data.reactions.html#details",
    "title": "data.reactions",
    "section": "",
    "text": "This is a dataset with 1,683 rows and 39 columns.\n\ncompd_name: The name of the primary compound undergoing reaction with OH, nitrate radicals, ozone, or chlorine atoms.\ncmpd_mwt: The molecular weight of the compound in units of g/mol.\ncmpd_formula: The chemical formula of the compound.\ncmpd_type: The category of compounds that the compd_name falls under.\ncmpd_smiles: The SMILES (simplified molecular-input line-entry system) representation for the compound.\ncmpd_inchi: The InChI (International Chemical Identifier) representation for the compound.\ncmpd_inchikey: The InChIKey, which is a hashed InChI value, has a fixed length of 27 characters. These values can be used to more easily perform database searches of chemical compounds.\nOH_k298: Rate constant at 298 K for OH reactions.\nOH_uncert: Uncertainty as a percentage for certain OH reactions.\nOH_u_fac: Uncertainty as a plus/minus difference for certain OH reactions.\nOH_a, OH_b, OH_n: Extended temperature dependence parameters for bimolecular OH reactions, to be used in the Arrhenius expression: k(T)=A exp(-B/T) (T/300)^n. In that, A is expressed as cm^3 molecules^-1 s^-1, B is in units of K, and n is dimensionless. Any missing values indicate that data is not available.\nOH_t_low, OH_t_high: The low and high temperature boundaries (in units of K) for which the OH_a, OH_b, and OH_n parameters are valid.\nO3_k298: Rate constant at 298 K for ozone reactions.\nO3_uncert: Uncertainty as a percentage for certain ozone reactions.\nO3_u_fac: Uncertainty as a plus/minus difference for certain ozone reactions.\nO3_a, O3_b, O3_n: Extended temperature dependence parameters for bimolecular ozone reactions, to be used in the Arrhenius expression: k(T)=A exp(-B/T) (T/300)^n. In that, A is expressed as cm^3 molecules^-1 s^-1, B is in units of K, and n is dimensionless. Any missing values indicate that data is not available.\nO3_t_low, O3_t_high: The low and high temperature boundaries (in units of K) for which the O3_a, O3_b, and O3_n parameters are valid.\nNO3_k298: Rate constant at 298 K for NO3 reactions.\nNO3_uncert: Uncertainty as a percentage for certain NO3 reactions.\nNO3_u_fac: Uncertainty as a plus/minus difference for certain NO3 reactions.\nNO3_a, NO3_b, NO3_n: Extended temperature dependence parameters for bimolecular NO3 reactions, to be used in the Arrhenius expression: k(T)=A exp(-B/T) (T/300)^n. In that, A is expressed as cm^3 molecules^-1 s^-1, B is in units of K, and n is dimensionless. Any missing values indicate that data is not available.\nNO3_t_low, NO3_t_high: The low and high temperature boundaries (in units of K) for which the NO3_a, NO3_b, and NO3_n parameters are valid.\nCl_k298: Rate constant at 298 K for Cl reactions.\nCl_uncert: Uncertainty as a percentage for certain Cl reactions.\nCl_u_fac: Uncertainty as a plus/minus difference for certain Cl reactions.\nCl_a, Cl_b, Cl_n: Extended temperature dependence parameters for bimolecular Cl reactions, to be used in the Arrhenius expression: k(T)=A exp(-B/T) (T/300)^n. In that, A is expressed as cm^3 molecules^-1 s^-1, B is in units of K, and n is dimensionless. Any missing values indicate that data is not available.\nCl_t_low, Cl_t_high: The low and high temperature boundaries (in units of K) for which the Cl_a, Cl_b, and Cl_n parameters are valid."
  },
  {
    "objectID": "reference/data.reactions.html#preview",
    "href": "reference/data.reactions.html#preview",
    "title": "data.reactions",
    "section": "",
    "text": "Rows: 1683\nColumns: 39\n$ cmpd_name     &lt;str&gt; 'methane', 'formaldehyde', 'methanol'\n$ cmpd_mwt      &lt;f64&gt; 16.04, 30.03, 32.04\n$ cmpd_formula  &lt;str&gt; 'CH4', 'CH2O', 'CH4O'\n$ cmpd_type     &lt;str&gt; 'normal alkane', 'aldehyde', 'alcohol or glycol'\n$ cmpd_smiles   &lt;str&gt; 'C', 'C=O', 'CO'\n$ cmpd_inchi    &lt;str&gt; 'InChI=1S/CH4/h1H4', 'InChI=1S/CH2O/c1-2/h1H2', 'InChI=1S/CH4O/c1-2/h2H,1H3'\n$ cmpd_inchikey &lt;str&gt; 'VNWKTOKETHGBQD-UHFFFAOYSA-N',\n                      'WSFSSNUMVMOOMR-UHFFFAOYSA-N',\n                      'OKKJLVBELUTLKV-UHFFFAOYSA-N'\n$ OH_k298       &lt;f64&gt; 6.36e-15, 8.5e-12, 8.78e-13\n$ OH_uncert     &lt;f64&gt; 0.1, 0.2, 0.1\n$ OH_u_fac      &lt;f64&gt; None, None, None\n$ OH_A          &lt;f64&gt; 3.62e-13, 5.4e-12, 2.32e-13\n$ OH_B          &lt;f64&gt; 1200.34866000493, -135.0, -402.0\n$ OH_n          &lt;f64&gt; 2.17993581535803, None, 2.72\n$ OH_t_low      &lt;f64&gt; 200.0, 200.0, 210.0\n$ OH_t_high     &lt;f64&gt; 2025.0, 300.0, 1344.0\n$ O3_k298       &lt;f64&gt; None, None, None\n$ O3_uncert     &lt;f64&gt; None, None, None\n$ O3_u_fac      &lt;f64&gt; None, None, None\n$ O3_A          &lt;f64&gt; None, None, None\n$ O3_B          &lt;f64&gt; None, None, None\n$ O3_n          &lt;f64&gt; None, None, None\n$ O3_t_low      &lt;f64&gt; None, None, None\n$ O3_t_high     &lt;f64&gt; None, None, None\n$ NO3_k298      &lt;f64&gt; None, 5.5e-16, 1.3e-16\n$ NO3_uncert    &lt;f64&gt; None, None, None\n$ NO3_u_fac     &lt;f64&gt; None, 1.6, 3.0\n$ NO3_A         &lt;f64&gt; None, None, 9.4e-13\n$ NO3_B         &lt;f64&gt; None, None, 2650.0\n$ NO3_n         &lt;f64&gt; None, None, None\n$ NO3_t_low     &lt;f64&gt; None, None, 250.0\n$ NO3_t_high    &lt;f64&gt; None, None, 370.0\n$ Cl_k298       &lt;f64&gt; 1e-13, 7.2e-11, 5.1e-11\n$ Cl_uncert     &lt;f64&gt; 0.15, 0.15, 0.2\n$ Cl_u_fac      &lt;f64&gt; None, None, None\n$ Cl_A          &lt;f64&gt; 6.6e-12, 8.1e-11, 5.1e-11\n$ Cl_B          &lt;f64&gt; 1240.0, 34.0, 0.0\n$ Cl_n          &lt;f64&gt; None, None, None\n$ Cl_t_low      &lt;f64&gt; 200.0, 200.0, 225.0\n$ Cl_t_high     &lt;f64&gt; 300.0, 500.0, 950.0"
  },
  {
    "objectID": "reference/GT.fmt_time.html",
    "href": "reference/GT.fmt_time.html",
    "title": "GT.fmt_time",
    "section": "",
    "text": "GT.fmt_time(\n    self,\n    columns=None,\n    rows=None,\n    time_style='iso',\n    pattern='{x}',\n    locale=None,\n)\nFormat values as times.\nFormat input values to time values using one of 5 preset time styles. Input can be in the form of time values, or strings in the ISO 8601 forms of HH:MM:SS or YYYY-MM-DD HH:MM:SS."
  },
  {
    "objectID": "reference/GT.fmt_time.html#parameters",
    "href": "reference/GT.fmt_time.html#parameters",
    "title": "GT.fmt_time",
    "section": "Parameters",
    "text": "Parameters\n\ncolumns : SelectExpr = None\n\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\n\nrows : int | list[int] | None = None\n\nIn conjunction with columns=, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in targeted columns being formatted. Alternatively, we can supply a list of row indices.\n\ntime_style : TimeStyle = 'iso'\n\nThe time style to use. By default this is the short name \"iso\" which corresponds to how times are formatted within ISO 8601 datetime values. There are 5 time styles in total.\n\npattern : str = '{x}'\n\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n\nlocale : str | None = None\n\nAn optional locale identifier that can be used for formatting values according the locale‚Äôs rules. Examples include \"en\" for English (United States) and \"fr\" for French (France)."
  },
  {
    "objectID": "reference/GT.fmt_time.html#formatting-with-the-time_style-argument",
    "href": "reference/GT.fmt_time.html#formatting-with-the-time_style-argument",
    "title": "GT.fmt_time",
    "section": "Formatting with the time_style= argument",
    "text": "Formatting with the time_style= argument\nWe need to supply a preset time style to the time_style= argument. The time styles are numerous and can handle localization to any supported locale. The following table provides a listing of all time styles and their output values (corresponding to an input time of 14:35:00).\n\n\n\n\nTime Style\nOutput\nNotes\n\n\n\n\n1\n\"iso\"\n\"14:35:00\"\nISO 8601, 24h\n\n\n2\n\"iso-short\"\n\"14:35\"\nISO 8601, 24h\n\n\n3\n\"h_m_s_p\"\n\"2:35:00 PM\"\n12h\n\n\n4\n\"h_m_p\"\n\"2:35 PM\"\n12h\n\n\n5\n\"h_p\"\n\"2 PM\"\n12h"
  },
  {
    "objectID": "reference/GT.fmt_time.html#returns",
    "href": "reference/GT.fmt_time.html#returns",
    "title": "GT.fmt_time",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.fmt_time.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_time.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_time",
    "section": "Adapting output to a specific locale",
    "text": "Adapting output to a specific locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). Note that a locale value provided here will override any global locale setting performed in GT()‚Äôs own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_time.html#examples",
    "href": "reference/GT.fmt_time.html#examples",
    "title": "GT.fmt_time",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the exibble dataset to create a simple, two-column table (keeping only the date and time columns). With the fmt_time() method, we‚Äôll format the time column to display times formatted with the \"h_m_s_p\" time style.\n\nfrom great_tables import GT, exibble\n\nexibble_mini = exibble[[\"date\", \"time\"]]\n\n(\n    GT(exibble_mini)\n    .fmt_time(columns=\"time\", time_style=\"h_m_s_p\")\n)\n\n\n\n\n\n\n\n  date\n  time\n\n\n\n  \n    2015-01-15\n    1:35:00 PM\n  \n  \n    2015-02-15\n    2:40:00 PM\n  \n  \n    2015-03-15\n    3:45:00 PM\n  \n  \n    2015-04-15\n    4:50:00 PM\n  \n  \n    2015-05-15\n    5:55:00 PM\n  \n  \n    2015-06-15\n    \n  \n  \n    \n    7:10:00 PM\n  \n  \n    2015-08-15\n    8:20:00 PM"
  },
  {
    "objectID": "reference/GT.fmt_time.html#see-also",
    "href": "reference/GT.fmt_time.html#see-also",
    "title": "GT.fmt_time",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_time(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/GT.tab_style.html",
    "href": "reference/GT.tab_style.html",
    "title": "GT.tab_style",
    "section": "",
    "text": "GT.tab_style(self, style, locations)\nAdd custom style to one or more cells\nWith the tab_style() method we can target specific cells and apply styles to them. We do this with the combination of the style and location arguments. The style argument requires use of styling classes (e.g., style.fill(color=\"red\")) and the location argument needs to be an expression of the cells we want to target using location targeting classes (e.g., loc.body(columns=&lt;column_name&gt;)). With the available suite of styling classes, here are some of the styles we can apply:"
  },
  {
    "objectID": "reference/GT.tab_style.html#parameters",
    "href": "reference/GT.tab_style.html#parameters",
    "title": "GT.tab_style",
    "section": "Parameters",
    "text": "Parameters\n\nstyle : CellStyle | list[CellStyle]\n\nThe styles to use for the cells at the targeted locations. The style.text(), style.fill(), and style.borders() classes can be used here to more easily generate valid styles.\n\nlocations : Loc | list[Loc]\n\nThe cell or set of cells to be associated with the style. The loc.body() class can be used here to easily target body cell locations."
  },
  {
    "objectID": "reference/GT.tab_style.html#returns",
    "href": "reference/GT.tab_style.html#returns",
    "title": "GT.tab_style",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.tab_style.html#examples",
    "href": "reference/GT.tab_style.html#examples",
    "title": "GT.tab_style",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a small subset of the exibble dataset to demonstrate how to use tab_style() to target specific cells and apply styles to them. We‚Äôll start by creating the exibble_sm table (a subset of the exibble table) and then use tab_style() to apply a light cyan background color to the cells in the num column for the first two rows of the table. We‚Äôll then apply a larger font size to the cells in the fctr column for the last four rows of the table.\n\nfrom great_tables import GT, style, loc, exibble\n\nexibble_sm = exibble[[\"num\", \"fctr\", \"row\", \"group\"]]\n\n(\n    GT(exibble_sm, rowname_col=\"row\", groupname_col=\"group\")\n    .tab_style(\n        style=style.fill(color=\"lightcyan\"),\n        locations=loc.body(columns=\"num\", rows=[\"row_1\", \"row_2\"]),\n    )\n    .tab_style(\n        style=style.text(size=\"22px\"),\n        locations=loc.body(columns=[\"fctr\"], rows=[4, 5, 6, 7]),\n    )\n)\n\n\n\n\n\n\n\n  \n  num\n  fctr\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.1111\n    one\n  \n  \n    row_2\n    2.222\n    two\n  \n  \n    row_3\n    33.33\n    three\n  \n  \n    row_4\n    444.4\n    four\n  \n  \n    grp_b\n  \n  \n    row_5\n    5550.0\n    five\n  \n  \n    row_6\n    \n    six\n  \n  \n    row_7\n    777000.0\n    seven\n  \n  \n    row_8\n    8880000.0\n    eight\n  \n\n\n\n\n\n\n        \n\n\nLet‚Äôs use exibble once again to create a simple, two-column output table (keeping only the num and currency columns). With the tab_style() method (called thrice), we‚Äôll add style to the values already formatted by fmt_number() and fmt_currency(). In the style argument of the first two tab_style() call, we can define multiple types of styling with the style.fill() and style.text() classes (enclosing these in a list). The cells to be targeted for styling require the use of loc.body(), which is used here with different columns being targeted. For the final tab_style() call, we demonstrate the use of style.borders() class as the style argument, which is employed in conjunction with loc.body() to locate the row to be styled.\n\nfrom great_tables import GT, style, loc, exibble\n\n(\n    GT(exibble[[\"num\", \"currency\"]])\n    .fmt_number(columns=\"num\", decimals=1)\n    .fmt_currency(columns=\"currency\")\n    .tab_style(\n        style=[\n            style.fill(color=\"lightcyan\"),\n            style.text(weight=\"bold\")\n        ],\n        locations=loc.body(columns=\"num\")\n    )\n    .tab_style(\n        style=[\n            style.fill(color=\"#F9E3D6\"),\n            style.text(style=\"italic\")\n        ],\n        locations=loc.body(columns=\"currency\")\n    )\n    .tab_style(\n        style=style.borders(sides=[\"top\", \"bottom\"], weight='2px', color=\"red\"),\n        locations=loc.body(rows=[4])\n    )\n)\n\n\n\n\n\n\n\n  num\n  currency\n\n\n\n  \n    0.1\n    $49.95\n  \n  \n    2.2\n    $17.95\n  \n  \n    33.3\n    $1.39\n  \n  \n    444.4\n    $65,100.00\n  \n  \n    5,550.0\n    $1,325.81\n  \n  \n    \n    $13.26\n  \n  \n    777,000.0\n    \n  \n  \n    8,880,000.0\n    $0.44"
  },
  {
    "objectID": "reference/style.css.html",
    "href": "reference/style.css.html",
    "title": "style.css",
    "section": "",
    "text": "style.css(rule)\nA style specification for custom CSS rules.\nThe style.css() class is to be used with the tab_style() method, which itself allows for the setting of custom styles to one or more cells. With style.css(), you can specify any CSS rule that you would like to apply to the targeted cells.\n\n\n\nrule : str\n\nThe CSS rule to apply to the targeted cells. This can be any valid CSS rule, such as background-color: red; or font-size: 14px;.\n\n\n\n\n\n\n : CellStyleCss\n\nA CellStyleCss object, which is used for a styles argument if specifying a custom CSS rule.\n\n\n\n\n\nSee GT.tab_style()."
  },
  {
    "objectID": "reference/style.css.html#parameters",
    "href": "reference/style.css.html#parameters",
    "title": "style.css",
    "section": "",
    "text": "rule : str\n\nThe CSS rule to apply to the targeted cells. This can be any valid CSS rule, such as background-color: red; or font-size: 14px;."
  },
  {
    "objectID": "reference/style.css.html#returns",
    "href": "reference/style.css.html#returns",
    "title": "style.css",
    "section": "",
    "text": ": CellStyleCss\n\nA CellStyleCss object, which is used for a styles argument if specifying a custom CSS rule."
  },
  {
    "objectID": "reference/style.css.html#examples",
    "href": "reference/style.css.html#examples",
    "title": "style.css",
    "section": "",
    "text": "See GT.tab_style()."
  },
  {
    "objectID": "reference/data.exibble.html",
    "href": "reference/data.exibble.html",
    "title": "data.exibble",
    "section": "",
    "text": "data.exibble\nA toy example table for testing with great_tables: exibble.\nThis table contains data of a few different classes, which makes it well-suited for quick experimentation with the functions in this package. It contains only eight rows with numeric and string columns. The last 4 rows contain missing values in the majority of this table‚Äôs columns (1 missing value per column). The date, time, and datetime columns are string-based dates/times in the familiar ISO 8601 format. The row and group columns provide for unique rownames and two groups (grp_a and grp_b) for experimenting with the rowname_col and groupname_col arguments.\n\n\nThis is a dataset with 8 rows and 9 columns.\n\nnum: A numeric column ordered with increasingly larger values.\nchar: A string-based column composed of names of fruits from a to h.\nfctr: A factor column with numbers from 1 to 8, written out.\ndate, time, datetime: String-based columns with dates, times, and datetimes.\ncurrency: A numeric column that is useful for testing currency-based formatting.\nrow: A string-based column in the format row_X which can be useful for testing with row labels in a table stub.\ngroup: A string-based column with four \"grp_a\" values and four \"grp_b\" values which can be useful for testing tables that contain row groups.\n\n\n\n\nRows: 8\nColumns: 9\n$ num      &lt;f64&gt; 0.1111, 2.222, 33.33\n$ char     &lt;str&gt; 'apricot', 'banana', 'coconut'\n$ fctr     &lt;str&gt; 'one', 'two', 'three'\n$ date     &lt;str&gt; '2015-01-15', '2015-02-15', '2015-03-15'\n$ time     &lt;str&gt; '13:35', '14:40', '15:45'\n$ datetime &lt;str&gt; '2018-01-01 02:22', '2018-02-02 14:33', '2018-03-03 03:44'\n$ currency &lt;f64&gt; 49.95, 17.95, 1.39\n$ row      &lt;str&gt; 'row_1', 'row_2', 'row_3'\n$ group    &lt;str&gt; 'grp_a', 'grp_a', 'grp_a'"
  },
  {
    "objectID": "reference/data.exibble.html#details",
    "href": "reference/data.exibble.html#details",
    "title": "data.exibble",
    "section": "",
    "text": "This is a dataset with 8 rows and 9 columns.\n\nnum: A numeric column ordered with increasingly larger values.\nchar: A string-based column composed of names of fruits from a to h.\nfctr: A factor column with numbers from 1 to 8, written out.\ndate, time, datetime: String-based columns with dates, times, and datetimes.\ncurrency: A numeric column that is useful for testing currency-based formatting.\nrow: A string-based column in the format row_X which can be useful for testing with row labels in a table stub.\ngroup: A string-based column with four \"grp_a\" values and four \"grp_b\" values which can be useful for testing tables that contain row groups."
  },
  {
    "objectID": "reference/data.exibble.html#preview",
    "href": "reference/data.exibble.html#preview",
    "title": "data.exibble",
    "section": "",
    "text": "Rows: 8\nColumns: 9\n$ num      &lt;f64&gt; 0.1111, 2.222, 33.33\n$ char     &lt;str&gt; 'apricot', 'banana', 'coconut'\n$ fctr     &lt;str&gt; 'one', 'two', 'three'\n$ date     &lt;str&gt; '2015-01-15', '2015-02-15', '2015-03-15'\n$ time     &lt;str&gt; '13:35', '14:40', '15:45'\n$ datetime &lt;str&gt; '2018-01-01 02:22', '2018-02-02 14:33', '2018-03-03 03:44'\n$ currency &lt;f64&gt; 49.95, 17.95, 1.39\n$ row      &lt;str&gt; 'row_1', 'row_2', 'row_3'\n$ group    &lt;str&gt; 'grp_a', 'grp_a', 'grp_a'"
  },
  {
    "objectID": "reference/loc.stubhead.html",
    "href": "reference/loc.stubhead.html",
    "title": "loc.stubhead",
    "section": "",
    "text": "loc.stubhead()\nTarget the stubhead.\nWith loc.stubhead(), we can target the part of table that resides both at the top of the stub and also beside the column header. This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.stubhead.html#returns",
    "href": "reference/loc.stubhead.html#returns",
    "title": "loc.stubhead",
    "section": "Returns",
    "text": "Returns\n\n : LocStubhead\n\nA LocStubhead object, which is used for a locations= argument if specifying the stubhead of the table."
  },
  {
    "objectID": "reference/loc.stubhead.html#examples",
    "href": "reference/loc.stubhead.html#examples",
    "title": "loc.stubhead",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. This table contains a stub (produced by setting rowname_col=\"model\" in the initial GT() call). The stubhead is given a label by way of the tab_stubhead() method and this label can be styled by using locations=loc.stubhead() within tab_style().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(\n        gtcars[[\"mfr\", \"model\", \"hp\", \"trq\", \"msrp\"]].head(5),\n        rowname_col=\"model\",\n        groupname_col=\"mfr\"\n    )\n    .tab_stubhead(label=\"car\")\n    .tab_style(\n        style=style.text(color=\"red\", weight=\"bold\"),\n        locations=loc.stubhead()\n    )\n    .fmt_integer(columns=[\"hp\", \"trq\"])\n    .fmt_currency(columns=\"msrp\", decimals=0)\n)\n\n\n\n\n\n\n\n  car\n  hp\n  trq\n  msrp\n\n\n\n  \n    Ford\n  \n  \n    GT\n    647\n    550\n    $447,000\n  \n  \n    Ferrari\n  \n  \n    458 Speciale\n    597\n    398\n    $291,744\n  \n  \n    458 Spider\n    562\n    398\n    $263,553\n  \n  \n    458 Italia\n    562\n    398\n    $233,509\n  \n  \n    488 GTB\n    661\n    561\n    $245,400"
  },
  {
    "objectID": "reference/GT.tab_source_note.html",
    "href": "reference/GT.tab_source_note.html",
    "title": "GT.tab_source_note",
    "section": "",
    "text": "GT.tab_source_note(self, source_note)\nAdd a source note citation.\nAdd a source note to the footer part of the table. A source note is useful for citing the data included in the table. Several can be added to the footer, simply use the tab_source_note() method multiple times and they will be inserted in the order provided. We can use Markdown formatting for the note, or, if the table is intended for HTML output, we can include HTML formatting."
  },
  {
    "objectID": "reference/GT.tab_source_note.html#parameters",
    "href": "reference/GT.tab_source_note.html#parameters",
    "title": "GT.tab_source_note",
    "section": "Parameters",
    "text": "Parameters\n\nsource_note : str | Text\n\nText to be used in the source note. We can optionally use the md() or html() helper functions to style the text as Markdown or to retain HTML elements in the text."
  },
  {
    "objectID": "reference/GT.tab_source_note.html#returns",
    "href": "reference/GT.tab_source_note.html#returns",
    "title": "GT.tab_source_note",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.tab_source_note.html#examples",
    "href": "reference/GT.tab_source_note.html#examples",
    "title": "GT.tab_source_note",
    "section": "Examples",
    "text": "Examples\nWith three columns from the gtcars dataset, let‚Äôs create a new table. We can use the tab_source_note() method to add a source note to the table footer. Here we are citing the data source but this method can be used for any text you‚Äôd prefer to display in the footer component of the table.\n\nfrom great_tables import GT\nfrom great_tables.data import gtcars\n\ngtcars_mini = gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5)\n\n(\n    GT(gtcars_mini, rowname_col=\"model\")\n    .tab_source_note(source_note=\"From edmunds.com\")\n)\n\n\n\n\n\n\n\n  \n  mfr\n  msrp\n\n\n\n  \n    GT\n    Ford\n    447000.0\n  \n  \n    458 Speciale\n    Ferrari\n    291744.0\n  \n  \n    458 Spider\n    Ferrari\n    263553.0\n  \n  \n    458 Italia\n    Ferrari\n    233509.0\n  \n  \n    488 GTB\n    Ferrari\n    245400.0\n  \n\n  \n  \n  \n    From edmunds.com"
  },
  {
    "objectID": "reference/loc.header.html",
    "href": "reference/loc.header.html",
    "title": "loc.header",
    "section": "",
    "text": "loc.header()\nTarget the table header (title and subtitle).\nWith loc.header(), we can target the table header which contains the title and the subtitle. This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.header.html#returns",
    "href": "reference/loc.header.html#returns",
    "title": "loc.header",
    "section": "Returns",
    "text": "Returns\n\n : LocHeader\n\nA LocHeader object, which is used for a locations= argument if specifying the title of the table."
  },
  {
    "objectID": "reference/loc.header.html#examples",
    "href": "reference/loc.header.html#examples",
    "title": "loc.header",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. We will style the entire table header (the ‚Äòtitle‚Äô and ‚Äòsubtitle‚Äô parts. This can be done by using locations=loc.header() within tab_style().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5))\n    .tab_header(\n        title=\"Select Cars from the gtcars Dataset\",\n        subtitle=\"Only the first five cars are displayed\"\n    )\n    .tab_style(\n        style=style.fill(color=\"lightblue\"),\n        locations=loc.header()\n    )\n    .fmt_currency(columns=\"msrp\", decimals=0)\n)\n\n\n\n\n\n\n  \n    Select Cars from the gtcars Dataset\n  \n  \n    Only the first five cars are displayed\n  \n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    $447,000\n  \n  \n    Ferrari\n    458 Speciale\n    $291,744\n  \n  \n    Ferrari\n    458 Spider\n    $263,553\n  \n  \n    Ferrari\n    458 Italia\n    $233,509\n  \n  \n    Ferrari\n    488 GTB\n    $245,400"
  },
  {
    "objectID": "reference/google_font.html",
    "href": "reference/google_font.html",
    "title": "google_font",
    "section": "",
    "text": "google_font(name)\nSpecify a font from the Google Fonts service.\nThe google_font() helper function can be used wherever a font name might be specified. There are two instances where this helper can be used:"
  },
  {
    "objectID": "reference/google_font.html#parameters",
    "href": "reference/google_font.html#parameters",
    "title": "google_font",
    "section": "Parameters",
    "text": "Parameters\n\nname : str\n\nThe name of the Google Font to use."
  },
  {
    "objectID": "reference/google_font.html#returns",
    "href": "reference/google_font.html#returns",
    "title": "google_font",
    "section": "Returns",
    "text": "Returns\n\n : GoogleFont\n\nA GoogleFont object, which contains the name of the font and methods for incorporating the font in HTML output tables."
  },
  {
    "objectID": "reference/google_font.html#examples",
    "href": "reference/google_font.html#examples",
    "title": "google_font",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use the exibble dataset to create a table of two columns and eight rows. We‚Äôll replace missing values with em dashes using sub_missing(). For text in the time column, we will use the font called \"IBM Plex Mono\" which is available from Google Fonts. This is defined inside the google_font() call, itself within the style.text() method that‚Äôs applied to the style= parameter of tab_style().\n\nfrom great_tables import GT, exibble, style, loc, google_font\n\n(\n    GT(exibble[[\"char\", \"time\"]])\n    .sub_missing()\n    .tab_style(\n        style=style.text(font=google_font(name=\"IBM Plex Mono\")),\n        locations=loc.body(columns=\"time\")\n    )\n)\n\n\n\n\n\n\n\n  char\n  time\n\n\n\n  \n    apricot\n    13:35\n  \n  \n    banana\n    14:40\n  \n  \n    coconut\n    15:45\n  \n  \n    durian\n    16:50\n  \n  \n    ‚Äî\n    17:55\n  \n  \n    fig\n    ‚Äî\n  \n  \n    grapefruit\n    19:10\n  \n  \n    honeydew\n    20:20\n  \n\n\n\n\n\n\n        \n\n\nWe can use a subset of the sp500 dataset to create a small table. With fmt_currency(), we can display values as monetary values. Then, we‚Äôll set a larger font size for the table and opt to use the \"Merriweather\" font by calling google_font() within opt_table_font(). In cases where that font may not materialize, we include two font fallbacks: \"Cochin\" and the catchall \"Serif\" group.\n\nfrom great_tables import GT, google_font\nfrom great_tables.data import sp500\n\n(\n    GT(sp500.drop(columns=[\"volume\", \"adj_close\"]).head(10))\n    .fmt_currency(columns=[\"open\", \"high\", \"low\", \"close\"])\n    .tab_options(table_font_size=\"20px\")\n    .opt_table_font(font=[google_font(name=\"Merriweather\"), \"Cochin\", \"Serif\"])\n)\n\n\n\n\n\n\n\n  date\n  open\n  high\n  low\n  close\n\n\n\n  \n    2015-12-31\n    $2,060.59\n    $2,062.54\n    $2,043.62\n    $2,043.94\n  \n  \n    2015-12-30\n    $2,077.34\n    $2,077.34\n    $2,061.97\n    $2,063.36\n  \n  \n    2015-12-29\n    $2,060.54\n    $2,081.56\n    $2,060.54\n    $2,078.36\n  \n  \n    2015-12-28\n    $2,057.77\n    $2,057.77\n    $2,044.20\n    $2,056.50\n  \n  \n    2015-12-24\n    $2,063.52\n    $2,067.36\n    $2,058.73\n    $2,060.99\n  \n  \n    2015-12-23\n    $2,042.20\n    $2,064.73\n    $2,042.20\n    $2,064.29\n  \n  \n    2015-12-22\n    $2,023.15\n    $2,042.74\n    $2,020.49\n    $2,038.97\n  \n  \n    2015-12-21\n    $2,010.27\n    $2,022.90\n    $2,005.93\n    $2,021.15\n  \n  \n    2015-12-18\n    $2,040.81\n    $2,040.81\n    $2,005.33\n    $2,005.55\n  \n  \n    2015-12-17\n    $2,073.76\n    $2,076.37\n    $2,041.66\n    $2,041.89"
  },
  {
    "objectID": "reference/data.gtcars.html",
    "href": "reference/data.gtcars.html",
    "title": "data.gtcars",
    "section": "",
    "text": "data.gtcars\nDeluxe automobiles from the 2014-2017 period.\nExpensive and fast cars. Each row describes a car of a certain make, model, year, and trim. Basic specifications such as horsepower, torque, EPA MPG ratings, type of drivetrain, and transmission characteristics are provided. The country of origin for the car manufacturer is also given.\nAll of the gtcars have something else in common (aside from the high asking prices): they are all grand tourer vehicles. These are proper GT cars that blend pure driving thrills with a level of comfort that is more expected from a fine limousine (e.g., a Rolls-Royce Phantom EWB). You‚Äôll find that, with these cars, comfort is emphasized over all-out performance. Nevertheless, the driving experience should also mean motoring at speed, doing so in style and safety.\n\n\nThis is a dataset with 47 rows and 15 columns.\n\nmfr: The name of the car manufacturer.\nmodel: The car‚Äôs model name.\nyear: The car‚Äôs model year.\ntrim: A short description of the car model‚Äôs trim.\nbdy_style: An identifier of the car‚Äôs body style, which is either \"coupe\", \"convertible\", \"sedan\", or \"hatchback\".\nhp, hp_rpm: The car‚Äôs horsepower and the associated RPM level.\ntrq, trq_rpm: The car‚Äôs torque and the associated RPM level.\nmpg_c, mpg_h: The miles per gallon fuel efficiency rating for city and highway driving.\ndrivetrain: The car‚Äôs drivetrain which, for this dataset, is either \"rwd\" (Rear Wheel Drive) or \"awd\" (All Wheel Drive).\ntrsmn: An encoding of the transmission type, where the number part is the number of gears. The car could have automatic transmission (\"a\"), manual transmission (\"m\"), an option to switch between both types (\"am\"), or, direct drive (\"dd\")\nctry_origin: The country name for where the vehicle manufacturer is headquartered.\nmsrp: Manufacturer‚Äôs suggested retail price in U.S. dollars (USD).\n\n\n\n\nRows: 47\nColumns: 15\n$ mfr         &lt;str&gt; 'Ford', 'Ferrari', 'Ferrari'\n$ model       &lt;str&gt; 'GT', '458 Speciale', '458 Spider'\n$ year        &lt;i64&gt; 2017, 2015, 2015\n$ trim        &lt;str&gt; 'Base Coupe', 'Base Coupe', 'Base'\n$ bdy_style   &lt;str&gt; 'coupe', 'coupe', 'convertible'\n$ hp          &lt;f64&gt; 647.0, 597.0, 562.0\n$ hp_rpm      &lt;f64&gt; 6250.0, 9000.0, 9000.0\n$ trq         &lt;f64&gt; 550.0, 398.0, 398.0\n$ trq_rpm     &lt;f64&gt; 5900.0, 6000.0, 6000.0\n$ mpg_c       &lt;f64&gt; 11.0, 13.0, 13.0\n$ mpg_h       &lt;f64&gt; 18.0, 17.0, 17.0\n$ drivetrain  &lt;str&gt; 'rwd', 'rwd', 'rwd'\n$ trsmn       &lt;str&gt; '7a', '7a', '7a'\n$ ctry_origin &lt;str&gt; 'United States', 'Italy', 'Italy'\n$ msrp        &lt;f64&gt; 447000.0, 291744.0, 263553.0"
  },
  {
    "objectID": "reference/data.gtcars.html#details",
    "href": "reference/data.gtcars.html#details",
    "title": "data.gtcars",
    "section": "",
    "text": "This is a dataset with 47 rows and 15 columns.\n\nmfr: The name of the car manufacturer.\nmodel: The car‚Äôs model name.\nyear: The car‚Äôs model year.\ntrim: A short description of the car model‚Äôs trim.\nbdy_style: An identifier of the car‚Äôs body style, which is either \"coupe\", \"convertible\", \"sedan\", or \"hatchback\".\nhp, hp_rpm: The car‚Äôs horsepower and the associated RPM level.\ntrq, trq_rpm: The car‚Äôs torque and the associated RPM level.\nmpg_c, mpg_h: The miles per gallon fuel efficiency rating for city and highway driving.\ndrivetrain: The car‚Äôs drivetrain which, for this dataset, is either \"rwd\" (Rear Wheel Drive) or \"awd\" (All Wheel Drive).\ntrsmn: An encoding of the transmission type, where the number part is the number of gears. The car could have automatic transmission (\"a\"), manual transmission (\"m\"), an option to switch between both types (\"am\"), or, direct drive (\"dd\")\nctry_origin: The country name for where the vehicle manufacturer is headquartered.\nmsrp: Manufacturer‚Äôs suggested retail price in U.S. dollars (USD)."
  },
  {
    "objectID": "reference/data.gtcars.html#preview",
    "href": "reference/data.gtcars.html#preview",
    "title": "data.gtcars",
    "section": "",
    "text": "Rows: 47\nColumns: 15\n$ mfr         &lt;str&gt; 'Ford', 'Ferrari', 'Ferrari'\n$ model       &lt;str&gt; 'GT', '458 Speciale', '458 Spider'\n$ year        &lt;i64&gt; 2017, 2015, 2015\n$ trim        &lt;str&gt; 'Base Coupe', 'Base Coupe', 'Base'\n$ bdy_style   &lt;str&gt; 'coupe', 'coupe', 'convertible'\n$ hp          &lt;f64&gt; 647.0, 597.0, 562.0\n$ hp_rpm      &lt;f64&gt; 6250.0, 9000.0, 9000.0\n$ trq         &lt;f64&gt; 550.0, 398.0, 398.0\n$ trq_rpm     &lt;f64&gt; 5900.0, 6000.0, 6000.0\n$ mpg_c       &lt;f64&gt; 11.0, 13.0, 13.0\n$ mpg_h       &lt;f64&gt; 18.0, 17.0, 17.0\n$ drivetrain  &lt;str&gt; 'rwd', 'rwd', 'rwd'\n$ trsmn       &lt;str&gt; '7a', '7a', '7a'\n$ ctry_origin &lt;str&gt; 'United States', 'Italy', 'Italy'\n$ msrp        &lt;f64&gt; 447000.0, 291744.0, 263553.0"
  },
  {
    "objectID": "reference/GT.opt_table_outline.html",
    "href": "reference/GT.opt_table_outline.html",
    "title": "GT.opt_table_outline",
    "section": "",
    "text": "GT.opt_table_outline(self, style='solid', width='3px', color='#D3D3D3')\nOption to wrap an outline around the entire table.\nThe opt_table_outline() method puts an outline of consistent style=, width=, and color= around the entire table. It‚Äôll write over any existing outside lines so long as the width= value is larger that of the existing lines. The default value of style= (\"solid\") will draw a solid outline, whereas using \"none\" will remove any present outline."
  },
  {
    "objectID": "reference/GT.opt_table_outline.html#parameters",
    "href": "reference/GT.opt_table_outline.html#parameters",
    "title": "GT.opt_table_outline",
    "section": "Parameters",
    "text": "Parameters\n\nstyle : str = 'solid'\n\nThe style of the table outline. The default value is \"solid\". The valid values are \"solid\", \"dashed\", \"dotted\", and \"none\".\n\nwidth : str = '3px'\n\nThe width of the table outline. The default value is \"3px\". The value must be in pixels and it must be an integer value.\n\ncolor : str = '#D3D3D3'\n\nThe color of the table outline, where the default is \"#D3D3D3\". The value must either a hexadecimal color code or a color name."
  },
  {
    "objectID": "reference/GT.opt_table_outline.html#returns",
    "href": "reference/GT.opt_table_outline.html#returns",
    "title": "GT.opt_table_outline",
    "section": "Returns",
    "text": "Returns\n\n : GT\n\nThe GT object is returned. This is the same object that the method is called on so that we can facilitate method chaining."
  },
  {
    "objectID": "reference/GT.opt_table_outline.html#examples",
    "href": "reference/GT.opt_table_outline.html#examples",
    "title": "GT.opt_table_outline",
    "section": "Examples",
    "text": "Examples\nUsing select columns from the exibble dataset, let‚Äôs create a table with a number of components added. Following that, we‚Äôll put an outline around the entire table using the opt_table_outline() method.\n\nfrom great_tables import GT, exibble, md\n\n(\n  GT(\n    exibble[[\"num\", \"char\", \"currency\", \"row\", \"group\"]],\n    rowname_col=\"row\",\n    groupname_col=\"group\"\n  )\n  .tab_header(\n    title=md(\"Data listing from **exibble**\"),\n    subtitle=md(\"`exibble` is a **Great Tables** dataset.\")\n  )\n  .fmt_number(columns=\"num\")\n  .fmt_currency(columns=\"currency\")\n  .tab_source_note(source_note=\"This is only a subset of the dataset.\")\n  .opt_table_outline()\n)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    exibble is a Great Tables dataset.\n  \n\n  \n  num\n  char\n  currency\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n    $49.95\n  \n  \n    row_2\n    2.22\n    banana\n    $17.95\n  \n  \n    row_3\n    33.33\n    coconut\n    $1.39\n  \n  \n    row_4\n    444.40\n    durian\n    $65,100.00\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n    $1,325.81\n  \n  \n    row_6\n    \n    fig\n    $13.26\n  \n  \n    row_7\n    777,000.00\n    grapefruit\n    \n  \n  \n    row_8\n    8,880,000.00\n    honeydew\n    $0.44\n  \n\n  \n  \n  \n    This is only a subset of the dataset."
  },
  {
    "objectID": "reference/loc.title.html",
    "href": "reference/loc.title.html",
    "title": "loc.title",
    "section": "",
    "text": "loc.title()\nTarget the table title.\nWith loc.title(), we can target the part of table containing the title (within the table header). This is useful for applying custom styling with the tab_style() method. That method has a locations= argument and this class should be used there to perform the targeting."
  },
  {
    "objectID": "reference/loc.title.html#returns",
    "href": "reference/loc.title.html#returns",
    "title": "loc.title",
    "section": "Returns",
    "text": "Returns\n\n : LocTitle\n\nA LocTitle object, which is used for a locations= argument if specifying the title of the table."
  },
  {
    "objectID": "reference/loc.title.html#examples",
    "href": "reference/loc.title.html#examples",
    "title": "loc.title",
    "section": "Examples",
    "text": "Examples\nLet‚Äôs use a subset of the gtcars dataset in a new table. We will style only the ‚Äòtitle‚Äô part of the table header (leaving the ‚Äòsubtitle‚Äô part unaffected). This can be done by using locations=loc.title() within tab_style().\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import gtcars\n\n(\n    GT(gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5))\n    .tab_header(\n        title=\"Select Cars from the gtcars Dataset\",\n        subtitle=\"Only the first five cars are displayed\"\n    )\n    .tab_style(\n        style=style.text(color=\"blue\", size=\"large\", weight=\"bold\"),\n        locations=loc.title()\n    )\n    .fmt_currency(columns=\"msrp\", decimals=0)\n)\n\n\n\n\n\n\n  \n    Select Cars from the gtcars Dataset\n  \n  \n    Only the first five cars are displayed\n  \n\n  mfr\n  model\n  msrp\n\n\n\n  \n    Ford\n    GT\n    $447,000\n  \n  \n    Ferrari\n    458 Speciale\n    $291,744\n  \n  \n    Ferrari\n    458 Spider\n    $263,553\n  \n  \n    Ferrari\n    458 Italia\n    $233,509\n  \n  \n    Ferrari\n    488 GTB\n    $245,400"
  },
  {
    "objectID": "get-started/basic-formatting.html",
    "href": "get-started/basic-formatting.html",
    "title": "Formatting Values",
    "section": "",
    "text": "The values within the table body, specifically those within the body cells, can be formatted with a large selection of fmt_*() methods like fmt_number(), fmt_integer(), fmt_scientific(), and more. Let‚Äôs use a portion of the exibble dataset and introduce some formatting to the cell values. First, we‚Äôll generate the basic GT object and take a look at the table without any cell formatting applied.\nfrom great_tables import GT\nfrom great_tables.data import exibble\nfrom great_tables import vals\n\ngt_ex = GT(exibble[[\"num\", \"date\", \"time\", \"currency\"]].head(5))\n\ngt_ex\n\n\n\n\n\n\n\n  num\n  date\n  time\n  currency\n\n\n\n  \n    0.1111\n    2015-01-15\n    13:35\n    49.95\n  \n  \n    2.222\n    2015-02-15\n    14:40\n    17.95\n  \n  \n    33.33\n    2015-03-15\n    15:45\n    1.39\n  \n  \n    444.4\n    2015-04-15\n    16:50\n    65100.0\n  \n  \n    5550.0\n    2015-05-15\n    17:55\n    1325.81\nThe num column contains both small and much larger numbers. We can use the fmt_number() method to obtain formatted values have a fixed level of decimal precision and grouping separators. At the same time, we‚Äôll format the numeric values in currency column to get monetary values.\ngt_ex = gt_ex.fmt_number(columns=\"num\", decimals=2).fmt_currency(columns=\"currency\")\n\ngt_ex\n\n\n\n\n\n\n\n  num\n  date\n  time\n  currency\n\n\n\n  \n    0.11\n    2015-01-15\n    13:35\n    $49.95\n  \n  \n    2.22\n    2015-02-15\n    14:40\n    $17.95\n  \n  \n    33.33\n    2015-03-15\n    15:45\n    $1.39\n  \n  \n    444.40\n    2015-04-15\n    16:50\n    $65,100.00\n  \n  \n    5,550.00\n    2015-05-15\n    17:55\n    $1,325.81\nDates and times can be formatted as well. As long as they are in ISO 8601 form, the fmt_date() and fmt_time() methods can be used to format such values. These methods have corresponding date_style= and time_style= arguments that accept a number of keywords that act as preset formatting styles.\ngt_ex = (\n    gt_ex.fmt_date(columns=\"date\", date_style=\"m_day_year\")\n    .fmt_time(columns=\"time\", time_style=\"h_m_p\")\n)\n\ngt_ex\n\n\n\n\n\n\n\n  num\n  date\n  time\n  currency\n\n\n\n  \n    0.11\n    Jan 15, 2015\n    1:35 PM\n    $49.95\n  \n  \n    2.22\n    Feb 15, 2015\n    2:40 PM\n    $17.95\n  \n  \n    33.33\n    Mar 15, 2015\n    3:45 PM\n    $1.39\n  \n  \n    444.40\n    Apr 15, 2015\n    4:50 PM\n    $65,100.00\n  \n  \n    5,550.00\n    May 15, 2015\n    5:55 PM\n    $1,325.81\nIt‚Äôs possible to format cells that have already been formatted. Using a formatting method again on previously formatted cells will always work within the ‚Äòlast-formatted-wins‚Äô rule.\ngt_ex = gt_ex.fmt_date(columns=\"date\", date_style=\"wday_day_month_year\")\n\ngt_ex\n\n\n\n\n\n\n\n  num\n  date\n  time\n  currency\n\n\n\n  \n    0.11\n    Thursday 15 January 2015\n    1:35 PM\n    $49.95\n  \n  \n    2.22\n    Sunday 15 February 2015\n    2:40 PM\n    $17.95\n  \n  \n    33.33\n    Sunday 15 March 2015\n    3:45 PM\n    $1.39\n  \n  \n    444.40\n    Wednesday 15 April 2015\n    4:50 PM\n    $65,100.00\n  \n  \n    5,550.00\n    Friday 15 May 2015\n    5:55 PM\n    $1,325.81\nWithin the selected columns= we can choose to target specific cells with the rows= argument. The latter argument allows us to pass in a list of row indices.\ngt_ex = gt_ex.fmt_currency(columns=\"currency\", rows=[2, 3, 4], currency=\"GBP\")\n\ngt_ex\n\n\n\n\n\n\n\n  num\n  date\n  time\n  currency\n\n\n\n  \n    0.11\n    Thursday 15 January 2015\n    1:35 PM\n    $49.95\n  \n  \n    2.22\n    Sunday 15 February 2015\n    2:40 PM\n    $17.95\n  \n  \n    33.33\n    Sunday 15 March 2015\n    3:45 PM\n    ¬£1.39\n  \n  \n    444.40\n    Wednesday 15 April 2015\n    4:50 PM\n    ¬£65,100.00\n  \n  \n    5,550.00\n    Friday 15 May 2015\n    5:55 PM\n    ¬£1,325.81",
    "crumbs": [
      "Get Started",
      "Format",
      "Formatting Values"
    ]
  },
  {
    "objectID": "get-started/basic-formatting.html#arguments-common-to-several-formatting-methodsfunctions",
    "href": "get-started/basic-formatting.html#arguments-common-to-several-formatting-methodsfunctions",
    "title": "Formatting Values",
    "section": "Arguments Common to Several Formatting Methods/Functions",
    "text": "Arguments Common to Several Formatting Methods/Functions\nWhile we can use the fmt_*() methods on a table, we can also use the functional versions of these methods on scalar values or lists of values. These variants exist within the vals module. While arguments across these functions and their corresponding method aren‚Äôt exactly the same, there are nonetheless many arguments that are shared amongst them. Here are a few examples:\n\ndecimals=: set a fixed precision of decimal places\nsep_mark=, dec_mark=: set digit separators and the decimal symbol (defaults are \",\" and \".\")\nscale_by=: we can choose to scale targeted values by a multiplier value\ncompact=: larger figures (thousands, millions, etc.) can be autoscaled and decorated with the appropriate suffixes (e.g., \"10000\" becomes \"10K\")\npattern=: option to use a text pattern for decoration of the formatted values\nlocale=: providing a locale ID (e.g., \"en\", \"fr\", \"de-AT\", etc.) will result in numeric formatting specific to the chosen locale\n\nHere are a number of examples that use vals.fmt_number().\n\nfmt_number_1 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37])\nfmt_number_2 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37], compact=True)\nfmt_number_3 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37], decimals=3)\nfmt_number_4 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37], pattern=\"[{x}]\")\nfmt_number_5 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37], locale=\"es\")\n\nprint(fmt_number_1, fmt_number_2, fmt_number_3, fmt_number_4, fmt_number_5, sep=\"\\n\")\n\n['1.64', '3.26', '3,000.63', '236,742.37']\n['1.64', '3.26', '3.00K', '236.74K']\n['1.640', '3.260', '3,000.630', '236,742.370']\n['[1.64]', '[3.26]', '[3,000.63]', '[236,742.37]']\n['1,64', '3,26', '3.000,63', '236.742,37']\n\n\nScientific notation can be done with vals.fmt_scientific().\n\nfmt_sci_1 = vals.fmt_scientific([0.00064, 7.353, 863454.63])\nfmt_sci_2 = vals.fmt_scientific([1.64, 3.26, 3000.63], decimals=3)\nfmt_sci_3 = vals.fmt_scientific([1.64, 3.26, 3000.63], exp_style=\"E\")\nfmt_sci_4 = vals.fmt_scientific([1.64, 3.26, 3000.63], locale=\"de\")\n\nprint(fmt_sci_1, fmt_sci_2, fmt_sci_3, fmt_sci_4, sep=\"\\n\")\n\n[\"6.40 √ó 10&lt;sup style='font-size: 65%;'&gt;‚àí4&lt;/sup&gt;\", '7.35', \"8.63 √ó 10&lt;sup style='font-size: 65%;'&gt;5&lt;/sup&gt;\"]\n['1.640', '3.260', \"3.001 √ó 10&lt;sup style='font-size: 65%;'&gt;3&lt;/sup&gt;\"]\n['1.64E00', '3.26E00', '3.00E03']\n['1,64', '3,26', \"3,00 √ó 10&lt;sup style='font-size: 65%;'&gt;3&lt;/sup&gt;\"]\n\n\nDates and times are handled with vals.fmt_date() and vals.fmt_time().\n\nfmt_date_1 = vals.fmt_date(\n    [\"2015-03-15\", \"2017-08-18\", \"2020-04-12\"], date_style=\"wday_month_day_year\"\n)\nfmt_date_2 = vals.fmt_date([\"2015-03-15\", \"2017-08-18\", \"2020-04-12\"], date_style=\"month_day_year\")\nfmt_time_1 = vals.fmt_time([\"23:03\", \"00:55\", \"08:23\"], time_style=\"h_m_p\")\nfmt_time_2 = vals.fmt_time([\"23:03\", \"00:55\", \"08:23\"], time_style=\"h_p\")\n\nprint(fmt_date_1, fmt_date_2, fmt_time_1, fmt_time_2, sep=\"\\n\")\n\n['Sunday, March 15, 2015', 'Friday, August 18, 2017', 'Sunday, April 12, 2020']\n['March 15, 2015', 'August 18, 2017', 'April 12, 2020']\n['11:03 PM', '12:55 AM', '8:23 AM']\n['11 PM', '12 AM', '8 AM']\n\n\nSometimes it‚Äôs easier and more convenient to experiment with formatting using the formatting functions in the vals module. There are many options to explore with each type of formatting and so visiting the API Reference is certainly worthwhile.",
    "crumbs": [
      "Get Started",
      "Format",
      "Formatting Values"
    ]
  },
  {
    "objectID": "get-started/basic-styling.html",
    "href": "get-started/basic-styling.html",
    "title": "Styling the Table Body",
    "section": "",
    "text": "Great Tables can add styles‚Äîlike color, text properties, and borders‚Äîon many different parts of the displayed table. The following set of examples shows how to set styles on the body of table, where the data cells are located.\nFor the examples on this page, we‚Äôll use the included airquality dataset to set up GT objects for both Pandas and Polars DataFrames.\nimport polars as pl\n\nfrom great_tables import GT, from_column, style, loc\nfrom great_tables.data import airquality\n\nair_head = airquality.head()\n\ngt_air = GT(air_head)\ngt_pl_air = GT(pl.from_pandas(air_head))",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the Table Body"
    ]
  },
  {
    "objectID": "get-started/basic-styling.html#style-basics",
    "href": "get-started/basic-styling.html#style-basics",
    "title": "Styling the Table Body",
    "section": "Style basics",
    "text": "Style basics\nWe use the tab_style() method in combination with loc.body() to set styles on cells of data in the table body. For example, the table-making code below applies a yellow background color to specific cells.\n\ngt_air.tab_style(\n    style=style.fill(color=\"yellow\"),\n    locations=loc.body(columns=\"Temp\", rows=[1, 2])\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\nThere are two important arguments to tab_style(): style= and locations=. We are calling a specific function for each of these:\n\nstyle.fill(): the type of style to apply. In this case the fill (or background color).\nloc.body(): the area we want to style. In this case, it‚Äôs the table body with specific columns and rows specified.\n\nIn addition to style.fill(), several other styling functions exist. We‚Äôll look at styling borders and text in the following sections.\n\nCustomizing Borders\nLet‚Äôs use style.borders() to place borders around targeted cells. In this next example, the table has a red dashed border above two rows.\n\ngt_air.tab_style(\n    style=style.borders(sides=\"top\", color=\"red\", style=\"dashed\", weight=\"3px\"),\n    locations=loc.body(rows=[1, 2])\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\n\n\nCustomizing Text\nWe can style text with by using the style.text() function. This gives us many customization possibilities for any text we target. For example, the Solar_R column below has green, bolded text in a custom font.\n\ngt_air.tab_style(\n    style=style.text(color=\"green\", font=\"Times New Roman\", weight=\"bold\"),\n    locations=loc.body(columns=\"Solar_R\")\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the Table Body"
    ]
  },
  {
    "objectID": "get-started/basic-styling.html#column-based-styles",
    "href": "get-started/basic-styling.html#column-based-styles",
    "title": "Styling the Table Body",
    "section": "Column-based Styles",
    "text": "Column-based Styles\nIn addition to setting styles to specific values (e.g., a \"yellow\" background fill), you can also use parameter values from table columns to specify styles. The way to do this is to use the from_column() helper function to access those values.\n\ndf = pl.DataFrame({\"x\": [1, 2], \"background\": [\"lightyellow\", \"lightblue\"]})\n\n(\n    GT(df)\n    .tab_style(\n        style=style.fill(color=from_column(column=\"background\")),\n        locations=loc.body(columns=\"x\")\n    )\n)\n\n\n\n\n\n\n\n  x\n  background\n\n\n\n  \n    1\n    lightyellow\n  \n  \n    2\n    lightblue\n  \n\n\n\n\n\n\n        \n\n\nNotice that in the code above, we used values from the background column to specify the fill color for each styled row.\nIn the next few sections, we‚Äôll first show how this combines nicely with the cols_hide() method, then, we‚Äôll demonstrate how to use Polars expressions to do everything much more simply.\n\nCombining Styling with cols_hide()\nOne common approach is to specify a style from a column, and then hide that column in the final output. For example, we can add a background column to our airquality data:\n\ncolor_map = {\n    True: \"lightyellow\",\n    False: \"lightblue\"\n}\n\nwith_color = air_head.assign(\n    background=(air_head[\"Temp\"] &gt; 70).replace(color_map)\n)\n\nwith_color\n\n\n\n\n  \n    \n      \n      Ozone\n      Solar_R\n      Wind\n      Temp\n      Month\n      Day\n      background\n    \n  \n  \n    \n      0\n      41.0\n      190.0\n      7.4\n      67\n      5\n      1\n      lightblue\n    \n    \n      1\n      36.0\n      118.0\n      8.0\n      72\n      5\n      2\n      lightyellow\n    \n    \n      2\n      12.0\n      149.0\n      12.6\n      74\n      5\n      3\n      lightyellow\n    \n    \n      3\n      18.0\n      313.0\n      11.5\n      62\n      5\n      4\n      lightblue\n    \n    \n      4\n      NaN\n      NaN\n      14.3\n      56\n      5\n      5\n      lightblue\n    \n  \n\n\n\n\nNotice that the dataset now has a background column set to either \"lightyellow\" or \"lightblue\", depending on whether Temp is above 70.\nWe can then use this background column to set the fill color of certain body cells, and then hide the background column since we don‚Äôt need that in our finalized display table:\n\n(\n    GT(with_color)\n    .tab_style(\n        style=style.fill(color=from_column(column=\"background\")),\n        locations=loc.body(columns=\"Temp\")\n    )\n    .cols_hide(columns=\"background\")\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\nNote the two methods used above:\n\ntab_style(): uses from_column() to set the color using the values of the background column.\ncols_hide(): prevents the background column from being displayed in the output.\n\n\n\nUsing Polars expressions\nStyles can also be specified using Polars expressions. For example, the code below uses the Temp column to set color to \"lightyellow\" or \"lightblue\".\n\n# A Polars expression defines color based on `Temp`\ntemp_color = (\n    pl.when(pl.col(\"Temp\") &gt; 70)\n    .then(pl.lit(\"lightyellow\"))\n    .otherwise(pl.lit(\"lightblue\"))\n)\n\ngt_pl_air.tab_style(\n    style=style.fill(color=temp_color),\n    locations=loc.body(\"Temp\")\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    None\n    None\n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\n\n\nUsing functions\nYou can also use a function, that takes the DataFrame and returns a Series with a style value for each row.\nThis is shown below on a pandas DataFrame.\n\ndef map_color(df):\n    return (df[\"Temp\"] &gt; 70).map(\n        {True: \"lightyellow\", False: \"lightblue\"}\n    )\n\ngt_air.tab_style(\n    style=style.fill(\n        color=map_color),\n    locations=loc.body(\"Temp\")\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the Table Body"
    ]
  },
  {
    "objectID": "get-started/basic-styling.html#specifying-columns-and-rows",
    "href": "get-started/basic-styling.html#specifying-columns-and-rows",
    "title": "Styling the Table Body",
    "section": "Specifying columns and rows",
    "text": "Specifying columns and rows\n\nUsing polars selectors\nIf you are using Polars, you can use column selectors and expressions for selecting specific columns and rows:\n\nimport polars.selectors as cs\n\ngt_pl_air.tab_style(\n    style=style.fill(color=\"yellow\"),\n    locations=loc.body(\n        columns=cs.starts_with(\"Te\"),\n        rows=pl.col(\"Temp\") &gt; 70\n    )\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    None\n    None\n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\nSee Column Selection for details on selecting columns.\n\n\nUsing a function\nFor tools like pandas, you can use a function (or lambda) to select rows. The function should take a DataFrame, and output a boolean Series.\n\ngt_air.tab_style(\n    style=style.fill(color=\"yellow\"),\n    locations=loc.body(\n        columns=lambda col_name: col_name.startswith(\"Te\"),\n        rows=lambda D: D[\"Temp\"] &gt; 70,\n    )\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the Table Body"
    ]
  },
  {
    "objectID": "get-started/basic-styling.html#multiple-styles-and-locations",
    "href": "get-started/basic-styling.html#multiple-styles-and-locations",
    "title": "Styling the Table Body",
    "section": "Multiple styles and locations",
    "text": "Multiple styles and locations\nWe can use a list within style= to apply multiple styles at once. For example, the code below sets fill and border styles on the same set of body cells.\n\ngt_air.tab_style(\n    style=[style.fill(color=\"yellow\"), style.borders(sides=\"all\")],\n    locations=loc.body(columns=\"Temp\", rows=[1, 2]),\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\nNote that you can also pass a list to locations=!\n\ngt_air.tab_style(\n    style=style.fill(color=\"yellow\"),\n    locations=[\n        loc.body(columns=\"Temp\", rows=[1, 2]),\n        loc.body(columns=\"Ozone\", rows=[0])\n    ]\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\nYou can also combine Polars selectors with a row filtering expression, in order to select a combination of columns and rows.\n\nimport polars.selectors as cs\n\ngt_pl_air.tab_style(\n    style=style.fill(color=\"yellow\"),\n    locations=loc.body(\n        columns=cs.exclude([\"Month\", \"Day\"]),\n        rows=pl.col(\"Temp\") == pl.col(\"Temp\").max()\n    )\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    None\n    None\n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\nLastly, you can use Polars selectors or expressions to conditionally select rows on a per-column basis.\n\nimport polars.selectors as cs\n\ngt_pl_air.tab_style(\n    style=style.fill(color=\"yellow\"),\n    locations=loc.body(mask=cs.all().eq(cs.all().max())),\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    None\n    None\n    14.3\n    56\n    5\n    5",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the Table Body"
    ]
  },
  {
    "objectID": "get-started/basic-styling.html#learning-more",
    "href": "get-started/basic-styling.html#learning-more",
    "title": "Styling the Table Body",
    "section": "Learning more",
    "text": "Learning more\n\nAPI Docs:\n\nGT.tab_style().\nstyle.* and loc.* functions.\nfrom_column().",
    "crumbs": [
      "Get Started",
      "Style",
      "Styling the Table Body"
    ]
  },
  {
    "objectID": "get-started/basic-column-labels.html",
    "href": "get-started/basic-column-labels.html",
    "title": "Column Labels",
    "section": "",
    "text": "The table‚Äôs Column Labels part contains, at a minimum, columns and their column labels. The last example had a single column: size. Just as in the Stub, we can create groupings called spanner labels that encompass one or more columns.\nTo better demonstrate how Column Labels work and are displayed, let‚Äôs use an input data table with more columns. In this case, that input table will be airquality. It has the following columns:\nWe know that all measurements took place in 1973, so a year column will be added to the dataset before it is passed to the GT() class.\nfrom great_tables import GT, html\nfrom great_tables.data import airquality\n\nairquality_mini = airquality.head(10).assign(Year = 1973)\n\nairquality_mini\n\n\n\n\n  \n    \n      \n      Ozone\n      Solar_R\n      Wind\n      Temp\n      Month\n      Day\n      Year\n    \n  \n  \n    \n      0\n      41.0\n      190.0\n      7.4\n      67\n      5\n      1\n      1973\n    \n    \n      1\n      36.0\n      118.0\n      8.0\n      72\n      5\n      2\n      1973\n    \n    \n      2\n      12.0\n      149.0\n      12.6\n      74\n      5\n      3\n      1973\n    \n    \n      3\n      18.0\n      313.0\n      11.5\n      62\n      5\n      4\n      1973\n    \n    \n      4\n      NaN\n      NaN\n      14.3\n      56\n      5\n      5\n      1973\n    \n    \n      5\n      28.0\n      NaN\n      14.9\n      66\n      5\n      6\n      1973\n    \n    \n      6\n      23.0\n      299.0\n      8.6\n      65\n      5\n      7\n      1973\n    \n    \n      7\n      19.0\n      99.0\n      13.8\n      59\n      5\n      8\n      1973\n    \n    \n      8\n      8.0\n      19.0\n      20.1\n      61\n      5\n      9\n      1973\n    \n    \n      9\n      NaN\n      194.0\n      8.6\n      69\n      5\n      10\n      1973",
    "crumbs": [
      "Get Started",
      "Table Structure",
      "Column Labels"
    ]
  },
  {
    "objectID": "get-started/basic-column-labels.html#adding-column-spanners",
    "href": "get-started/basic-column-labels.html#adding-column-spanners",
    "title": "Column Labels",
    "section": "Adding Column Spanners",
    "text": "Adding Column Spanners\nLet‚Äôs organize the time information under a Time spanner label, and put the other columns under a Measurement spanner label. We can do this with the tab_spanner() method.\n\ngt_airquality = (\n    GT(airquality_mini)\n    .tab_header(\n        title=\"New York Air Quality Measurements\",\n        subtitle=\"Daily measurements in New York City (May 1-10, 1973)\"\n    )\n    .tab_spanner(\n        label=\"Time\",\n        columns=[\"Year\", \"Month\", \"Day\"]\n    )\n    .tab_spanner(\n        label=\"Measurement\",\n        columns=[\"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"]\n    )\n)\n\ngt_airquality\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Measurement\n  \n  \n    Time\n  \n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Year\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    1973\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    1973\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    1973\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    1973\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    1973\n    5\n    5\n  \n  \n    28.0\n    \n    14.9\n    66\n    1973\n    5\n    6\n  \n  \n    23.0\n    299.0\n    8.6\n    65\n    1973\n    5\n    7\n  \n  \n    19.0\n    99.0\n    13.8\n    59\n    1973\n    5\n    8\n  \n  \n    8.0\n    19.0\n    20.1\n    61\n    1973\n    5\n    9\n  \n  \n    \n    194.0\n    8.6\n    69\n    1973\n    5\n    10",
    "crumbs": [
      "Get Started",
      "Table Structure",
      "Column Labels"
    ]
  },
  {
    "objectID": "get-started/basic-column-labels.html#moving-and-relabeling-columns",
    "href": "get-started/basic-column-labels.html#moving-and-relabeling-columns",
    "title": "Column Labels",
    "section": "Moving and Relabeling Columns",
    "text": "Moving and Relabeling Columns\nWe can do two more things to make this presentable:\n\nmove the Time columns to the beginning of the series (using cols_move_to_start())\ncustomize the column labels so that they are more descriptive (using cols_label())\n\nLet‚Äôs do both of these things in the next example:\n\n(\n    gt_airquality\n    .cols_move_to_start(columns=[\"Year\", \"Month\", \"Day\"])\n    .cols_label(\n        Ozone=html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R=html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind=html(\"Wind,&lt;br&gt;mph\"),\n        Temp=html(\"Temp,&lt;br&gt;&deg;F\")\n    )\n)\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Time\n  \n  \n    Measurement\n  \n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Solar R.,cal/m2\n  Wind,mph\n  Temp,¬∞F\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    \n    \n    14.3\n    56\n  \n  \n    1973\n    5\n    6\n    28.0\n    \n    14.9\n    66\n  \n  \n    1973\n    5\n    7\n    23.0\n    299.0\n    8.6\n    65\n  \n  \n    1973\n    5\n    8\n    19.0\n    99.0\n    13.8\n    59\n  \n  \n    1973\n    5\n    9\n    8.0\n    19.0\n    20.1\n    61\n  \n  \n    1973\n    5\n    10\n    \n    194.0\n    8.6\n    69\n  \n\n\n\n\n\n\n        \n\n\nNote that even though columns were moved using cols_move_to_start(), the spanner column labels still spanned above the correct column labels. There are a number of methods on GT to move columns, including cols_move(), cols_move_to_end(); there‚Äôs even a method to hide columns: cols_hide().\nMultiple columns can be renamed in a single use of cols_label(). Further to this, the helper functions md() and html() can be used to create column labels with additional styling. In the above example, we provided column labels as HTML so that we can insert linebreaks with &lt;br&gt;, insert a superscripted 2 (with &lt;sup&gt;2&lt;/sup&gt;), and insert a degree symbol as an HTML entity (&deg;).",
    "crumbs": [
      "Get Started",
      "Table Structure",
      "Column Labels"
    ]
  },
  {
    "objectID": "get-started/basic-column-labels.html#targeting-columns-for-columns",
    "href": "get-started/basic-column-labels.html#targeting-columns-for-columns",
    "title": "Column Labels",
    "section": "Targeting Columns for columns=",
    "text": "Targeting Columns for columns=\nIn the above examples, we selected columns to span or move using a list of column names (as strings). However, Great Tables supports a wide range of ways to select columns.\nFor example, you can use a lambda function:\n\n(\n    GT(airquality_mini)\n    .cols_move_to_start(columns=lambda colname: colname.endswith(\"R\"))\n)\n\n\n\n\n\n\n\n  Solar_R\n  Ozone\n  Wind\n  Temp\n  Month\n  Day\n  Year\n\n\n\n  \n    190.0\n    41.0\n    7.4\n    67\n    5\n    1\n    1973\n  \n  \n    118.0\n    36.0\n    8.0\n    72\n    5\n    2\n    1973\n  \n  \n    149.0\n    12.0\n    12.6\n    74\n    5\n    3\n    1973\n  \n  \n    313.0\n    18.0\n    11.5\n    62\n    5\n    4\n    1973\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5\n    1973\n  \n  \n    \n    28.0\n    14.9\n    66\n    5\n    6\n    1973\n  \n  \n    299.0\n    23.0\n    8.6\n    65\n    5\n    7\n    1973\n  \n  \n    99.0\n    19.0\n    13.8\n    59\n    5\n    8\n    1973\n  \n  \n    19.0\n    8.0\n    20.1\n    61\n    5\n    9\n    1973\n  \n  \n    194.0\n    \n    8.6\n    69\n    5\n    10\n    1973\n  \n\n\n\n\n\n\n        \n\n\nInputs like strings, integers, and polars selectors are also supported. For more information, see Column Selection.",
    "crumbs": [
      "Get Started",
      "Table Structure",
      "Column Labels"
    ]
  },
  {
    "objectID": "get-started/basic-stub.html",
    "href": "get-started/basic-stub.html",
    "title": "Stub (Row Labels)",
    "section": "",
    "text": "The Stub component of a table is the area to the left that typically contains row labels and may also contain row group labels. Those subparts can be grouped in a sequence of row groups. The Stub Head provides a location for a label that describes the Stub (and could also be used to describe the column labels). The Stub is optional since there are cases where a Stub wouldn‚Äôt be useful (the display tables presented in the previous section looked just fine without a Stub).",
    "crumbs": [
      "Get Started",
      "Table Structure",
      "Stub (Row Labels)"
    ]
  },
  {
    "objectID": "get-started/basic-stub.html#row-names",
    "href": "get-started/basic-stub.html#row-names",
    "title": "Stub (Row Labels)",
    "section": "Row names",
    "text": "Row names\nAn easy way to generate a Stub part is by specifying a stub column in the GT() class with the rowname_col= argument. This will signal to Great Tables that the named column should be used as the stub, using the contents of that column to make row labels. Let‚Äôs add a stub with our islands dataset by using rowname_col= in the call to GT():\n\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = islands.head(10)\n\nGT(islands_mini).tab_stub(rowname_col=\"name\")\n\n\n\n\n\n\n\n  \n  size\n\n\n\n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n  \n    Asia\n    16988\n  \n  \n    Australia\n    2968\n  \n  \n    Axel Heiberg\n    16\n  \n  \n    Baffin\n    184\n  \n  \n    Banks\n    23\n  \n  \n    Borneo\n    280\n  \n  \n    Britain\n    84\n  \n  \n    Celebes\n    73\n  \n\n\n\n\n\n\n        \n\n\nNotice that the landmass names are now placed to the left? That‚Äôs the Stub. Notably, there is a prominent border to the right of it but there‚Äôs no label above the Stub. We can change this and apply what‚Äôs known as a stubhead label through use of the tab_stubhead() method:\n\n(\n    GT(islands_mini)\n    .tab_stub(rowname_col=\"name\")\n    .tab_stubhead(label=\"landmass\")\n)\n\n\n\n\n\n\n\n  landmass\n  size\n\n\n\n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n  \n    Asia\n    16988\n  \n  \n    Australia\n    2968\n  \n  \n    Axel Heiberg\n    16\n  \n  \n    Baffin\n    184\n  \n  \n    Banks\n    23\n  \n  \n    Borneo\n    280\n  \n  \n    Britain\n    84\n  \n  \n    Celebes\n    73\n  \n\n\n\n\n\n\n        \n\n\nA very important thing to note here is that the table now has one column. Before, when there was no Stub, two columns were present (with the Column Labels of \"name\" and \"size\") but now column number 1 (the only column remaining) is size.",
    "crumbs": [
      "Get Started",
      "Table Structure",
      "Stub (Row Labels)"
    ]
  },
  {
    "objectID": "get-started/basic-stub.html#row-groups",
    "href": "get-started/basic-stub.html#row-groups",
    "title": "Stub (Row Labels)",
    "section": "Row groups",
    "text": "Row groups\nLet‚Äôs incorporate row groups into the display table. This divides rows into groups, creating row groups, and results in a display of a row group labels right above the each group. This can be easily done with a table containing row labels and the key is to use the groupname_col= argument of the GT() class. Here we will create three row groups (with row group labels \"continent\", \"country\", and \"subregion\") to have a grouping of rows.\n\nisland_groups = islands.head(10).assign(group = [\"subregion\"] * 2 + [\"country\"] * 2 + [\"continent\"] * 6)\n\n(\n    GT(island_groups)\n    .tab_stub(rowname_col=\"name\", groupname_col=\"group\")\n    .tab_stubhead(label=\"landmass\")\n)\n\n\n\n\n\n\n\n  landmass\n  size\n\n\n\n  \n    subregion\n  \n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n  \n    country\n  \n  \n    Asia\n    16988\n  \n  \n    Australia\n    2968\n  \n  \n    continent\n  \n  \n    Axel Heiberg\n    16\n  \n  \n    Baffin\n    184\n  \n  \n    Banks\n    23\n  \n  \n    Borneo\n    280\n  \n  \n    Britain\n    84\n  \n  \n    Celebes\n    73",
    "crumbs": [
      "Get Started",
      "Table Structure",
      "Stub (Row Labels)"
    ]
  },
  {
    "objectID": "get-started/basic-stub.html#gt-convenience-arguments",
    "href": "get-started/basic-stub.html#gt-convenience-arguments",
    "title": "Stub (Row Labels)",
    "section": "GT convenience arguments",
    "text": "GT convenience arguments\nRather than using the GT.tab_stub() method, the GT(rowname_col=..., groupname_col=...) arguments provide a quick way to specify row names and groups.\n\nGT(island_groups, rowname_col=\"name\", groupname_col=\"group\")\n\n\n\n\n\n\n\n  \n  size\n\n\n\n  \n    subregion\n  \n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n  \n    country\n  \n  \n    Asia\n    16988\n  \n  \n    Australia\n    2968\n  \n  \n    continent\n  \n  \n    Axel Heiberg\n    16\n  \n  \n    Baffin\n    184\n  \n  \n    Banks\n    23\n  \n  \n    Borneo\n    280\n  \n  \n    Britain\n    84\n  \n  \n    Celebes\n    73",
    "crumbs": [
      "Get Started",
      "Table Structure",
      "Stub (Row Labels)"
    ]
  },
  {
    "objectID": "get-started/table-theme-premade.html",
    "href": "get-started/table-theme-premade.html",
    "title": "Premade Themes",
    "section": "",
    "text": "Great Tables provides convenience methods starting with opt_ (e.g.¬†GT.opt_row_striping()), as a shortcut for various styles that can be set via GT.tab_options().\nThere are two important kinds of GT.opt_*() methods:\nWe‚Äôll use the basic GT object below for most examples, since it marks some of the table parts.\nfrom great_tables import GT, exibble, md\n\nlil_exibble = exibble.head(5)[[\"num\", \"char\", \"row\", \"group\"]]\n\ngt_ex = (\n    GT(lil_exibble, rowname_col=\"row\", groupname_col=\"group\")\n    .tab_header(\n        title=md(\"Data listing from exibble\"),\n        subtitle=md(\"This is a **Great Tables** dataset.\"),\n    )\n    .tab_stubhead(label=\"row\")\n    .fmt_number(columns=\"num\")\n    .fmt_currency(columns=\"currency\")\n    .tab_source_note(source_note=\"This is only a portion of the dataset.\")\n    .opt_vertical_padding(scale=0.5)\n)\n\ngt_ex\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    This is a Great Tables dataset.\n  \n\n  row\n  num\n  char\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n  \n  \n    row_2\n    2.22\n    banana\n  \n  \n    row_3\n    33.33\n    coconut\n  \n  \n    row_4\n    444.40\n    durian\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n  \n\n  \n  \n  \n    This is only a portion of the dataset.",
    "crumbs": [
      "Get Started",
      "Theming",
      "Premade Themes"
    ]
  },
  {
    "objectID": "get-started/table-theme-premade.html#opt_stylize-premade-themes",
    "href": "get-started/table-theme-premade.html#opt_stylize-premade-themes",
    "title": "Premade Themes",
    "section": "opt_stylize(): premade themes",
    "text": "opt_stylize(): premade themes\nBelow are the first two premade styles. The first uses color=\"blue\", and the second uses color=\"red\".\n\n\n\ngt_ex.opt_stylize(style=1, color=\"blue\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    This is a Great Tables dataset.\n  \n\n  row\n  num\n  char\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n  \n  \n    row_2\n    2.22\n    banana\n  \n  \n    row_3\n    33.33\n    coconut\n  \n  \n    row_4\n    444.40\n    durian\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n  \n\n  \n  \n  \n    This is only a portion of the dataset.\n  \n\n\n\n\n\n\n        \n\n\n\n\n\ngt_ex.opt_stylize(style=2, color=\"red\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    This is a Great Tables dataset.\n  \n\n  row\n  num\n  char\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n  \n  \n    row_2\n    2.22\n    banana\n  \n  \n    row_3\n    33.33\n    coconut\n  \n  \n    row_4\n    444.40\n    durian\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n  \n\n  \n  \n  \n    This is only a portion of the dataset.\n  \n\n\n\n\n\n\n        \n\n\n\n\nNotice that first table (blue) emphasizes the row labels with a solid background color. The second table (red) emphasizes the column labels, and uses solid lines to separate the body cell values. See opt_stylize() for all available color options.\nThere are six styles available, each emphasizing different table parts. The style= values are numbered from 1 to 6:\n\n\n\n\n1\n\n\n\n\n\n\n\nData listing from exibble\n\n\n\n\nThis is a Great Tables dataset.\n\n\n\n\nrow\n\n\nnum\n\n\nchar\n\n\n\n\n\n\ngrp_a\n\n\n\n\nrow_1\n\n\n0.11\n\n\napricot\n\n\n\n\nrow_2\n\n\n2.22\n\n\nbanana\n\n\n\n\nrow_3\n\n\n33.33\n\n\ncoconut\n\n\n\n\nrow_4\n\n\n444.40\n\n\ndurian\n\n\n\n\ngrp_b\n\n\n\n\nrow_5\n\n\n5,550.00\n\n\n\n\n\n\n\n\n\nThis is only a portion of the dataset.\n\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\nData listing from exibble\n\n\n\n\nThis is a Great Tables dataset.\n\n\n\n\nrow\n\n\nnum\n\n\nchar\n\n\n\n\n\n\ngrp_a\n\n\n\n\nrow_1\n\n\n0.11\n\n\napricot\n\n\n\n\nrow_2\n\n\n2.22\n\n\nbanana\n\n\n\n\nrow_3\n\n\n33.33\n\n\ncoconut\n\n\n\n\nrow_4\n\n\n444.40\n\n\ndurian\n\n\n\n\ngrp_b\n\n\n\n\nrow_5\n\n\n5,550.00\n\n\n\n\n\n\n\n\n\nThis is only a portion of the dataset.\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\nData listing from exibble\n\n\n\n\nThis is a Great Tables dataset.\n\n\n\n\nrow\n\n\nnum\n\n\nchar\n\n\n\n\n\n\ngrp_a\n\n\n\n\nrow_1\n\n\n0.11\n\n\napricot\n\n\n\n\nrow_2\n\n\n2.22\n\n\nbanana\n\n\n\n\nrow_3\n\n\n33.33\n\n\ncoconut\n\n\n\n\nrow_4\n\n\n444.40\n\n\ndurian\n\n\n\n\ngrp_b\n\n\n\n\nrow_5\n\n\n5,550.00\n\n\n\n\n\n\n\n\n\nThis is only a portion of the dataset.\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\nData listing from exibble\n\n\n\n\nThis is a Great Tables dataset.\n\n\n\n\nrow\n\n\nnum\n\n\nchar\n\n\n\n\n\n\ngrp_a\n\n\n\n\nrow_1\n\n\n0.11\n\n\napricot\n\n\n\n\nrow_2\n\n\n2.22\n\n\nbanana\n\n\n\n\nrow_3\n\n\n33.33\n\n\ncoconut\n\n\n\n\nrow_4\n\n\n444.40\n\n\ndurian\n\n\n\n\ngrp_b\n\n\n\n\nrow_5\n\n\n5,550.00\n\n\n\n\n\n\n\n\n\nThis is only a portion of the dataset.\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\nData listing from exibble\n\n\n\n\nThis is a Great Tables dataset.\n\n\n\n\nrow\n\n\nnum\n\n\nchar\n\n\n\n\n\n\ngrp_a\n\n\n\n\nrow_1\n\n\n0.11\n\n\napricot\n\n\n\n\nrow_2\n\n\n2.22\n\n\nbanana\n\n\n\n\nrow_3\n\n\n33.33\n\n\ncoconut\n\n\n\n\nrow_4\n\n\n444.40\n\n\ndurian\n\n\n\n\ngrp_b\n\n\n\n\nrow_5\n\n\n5,550.00\n\n\n\n\n\n\n\n\n\nThis is only a portion of the dataset.\n\n\n\n\n\n\n\n\n6\n\n\n\n\n\n\n\nData listing from exibble\n\n\n\n\nThis is a Great Tables dataset.\n\n\n\n\nrow\n\n\nnum\n\n\nchar\n\n\n\n\n\n\ngrp_a\n\n\n\n\nrow_1\n\n\n0.11\n\n\napricot\n\n\n\n\nrow_2\n\n\n2.22\n\n\nbanana\n\n\n\n\nrow_3\n\n\n33.33\n\n\ncoconut\n\n\n\n\nrow_4\n\n\n444.40\n\n\ndurian\n\n\n\n\ngrp_b\n\n\n\n\nrow_5\n\n\n5,550.00\n\n\n\n\n\n\n\n\n\nThis is only a portion of the dataset.",
    "crumbs": [
      "Get Started",
      "Theming",
      "Premade Themes"
    ]
  },
  {
    "objectID": "get-started/table-theme-premade.html#opt_-convenience-methods",
    "href": "get-started/table-theme-premade.html#opt_-convenience-methods",
    "title": "Premade Themes",
    "section": "opt_*() convenience methods",
    "text": "opt_*() convenience methods\nThis section shows the different GT.opt_*() methods available. They serve as convenience methods for common GT.tab_options() tasks.\n\nAlign table header\n\ngt_ex.opt_align_table_header(align=\"left\")\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    This is a Great Tables dataset.\n  \n\n  row\n  num\n  char\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n  \n  \n    row_2\n    2.22\n    banana\n  \n  \n    row_3\n    33.33\n    coconut\n  \n  \n    row_4\n    444.40\n    durian\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n  \n\n  \n  \n  \n    This is only a portion of the dataset.\n  \n\n\n\n\n\n\n        \n\n\n\n\nMake text ALL CAPS\n\ngt_ex.opt_all_caps()\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    This is a Great Tables dataset.\n  \n\n  row\n  num\n  char\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n  \n  \n    row_2\n    2.22\n    banana\n  \n  \n    row_3\n    33.33\n    coconut\n  \n  \n    row_4\n    444.40\n    durian\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n  \n\n  \n  \n  \n    This is only a portion of the dataset.\n  \n\n\n\n\n\n\n        \n\n\n\n\nReduce or expand padding\n\ngt_ex.opt_vertical_padding(scale=0.3)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    This is a Great Tables dataset.\n  \n\n  row\n  num\n  char\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n  \n  \n    row_2\n    2.22\n    banana\n  \n  \n    row_3\n    33.33\n    coconut\n  \n  \n    row_4\n    444.40\n    durian\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n  \n\n  \n  \n  \n    This is only a portion of the dataset.\n  \n\n\n\n\n\n\n        \n\n\n\ngt_ex.opt_horizontal_padding(scale=3)\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    This is a Great Tables dataset.\n  \n\n  row\n  num\n  char\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n  \n  \n    row_2\n    2.22\n    banana\n  \n  \n    row_3\n    33.33\n    coconut\n  \n  \n    row_4\n    444.40\n    durian\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n  \n\n  \n  \n  \n    This is only a portion of the dataset.\n  \n\n\n\n\n\n\n        \n\n\n\n\nSet table outline\n\ngt_ex.opt_table_outline()\n\n\n\n\n\n\n  \n    Data listing from exibble\n  \n  \n    This is a Great Tables dataset.\n  \n\n  row\n  num\n  char\n\n\n\n  \n    grp_a\n  \n  \n    row_1\n    0.11\n    apricot\n  \n  \n    row_2\n    2.22\n    banana\n  \n  \n    row_3\n    33.33\n    coconut\n  \n  \n    row_4\n    444.40\n    durian\n  \n  \n    grp_b\n  \n  \n    row_5\n    5,550.00\n    \n  \n\n  \n  \n  \n    This is only a portion of the dataset.",
    "crumbs": [
      "Get Started",
      "Theming",
      "Premade Themes"
    ]
  },
  {
    "objectID": "get-started/row-selection.html",
    "href": "get-started/row-selection.html",
    "title": "Row Selection",
    "section": "",
    "text": "Location and formatter functions (e.g.¬†loc.body() and GT.fmt_number()) can be applied to specific rows, using the rows= argument.\nRows may be specified using any of the following:\nThe following sections will use a subset of the exibble data, to demonstrate these options.\nfrom great_tables import GT, exibble, loc, style\n\nlil_exibble = exibble[[\"num\", \"char\", \"currency\"]].head(3)\ngt_ex = GT(lil_exibble)",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Row Selection"
    ]
  },
  {
    "objectID": "get-started/row-selection.html#using-integers",
    "href": "get-started/row-selection.html#using-integers",
    "title": "Row Selection",
    "section": "Using integers",
    "text": "Using integers\nUse a single integer, or a list of integers, to select rows by position.\n\ngt_ex.fmt_currency(\"currency\", rows=0, decimals=1)\n\n\n\n\n\n\n\n  num\n  char\n  currency\n\n\n\n  \n    0.1111\n    apricot\n    $50.0\n  \n  \n    2.222\n    banana\n    17.95\n  \n  \n    33.33\n    coconut\n    1.39\n  \n\n\n\n\n\n\n        \n\n\nNotice that a dollar sign ($) was only added to the first row (index 0 in python).\nIndexing works the same as selecting items from a python list. This negative integers select relative to the final row.\n\ngt_ex.fmt_currency(\"currency\", rows=[0, -1], decimals=1)\n\n\n\n\n\n\n\n  num\n  char\n  currency\n\n\n\n  \n    0.1111\n    apricot\n    $50.0\n  \n  \n    2.222\n    banana\n    17.95\n  \n  \n    33.33\n    coconut\n    $1.4",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Row Selection"
    ]
  },
  {
    "objectID": "get-started/row-selection.html#using-polars-expressions",
    "href": "get-started/row-selection.html#using-polars-expressions",
    "title": "Row Selection",
    "section": "Using polars expressions",
    "text": "Using polars expressions\nThe rows= argument accepts polars expressions, which return a boolean Series, indicating which rows to operate on.\nFor example, the code below only formats the num column, but only when currency is less than 40.\n\nimport polars as pl\n\ngt_polars = GT(pl.from_pandas(lil_exibble))\n\ngt_polars.fmt_integer(\"num\", rows=pl.col(\"currency\") &lt; 40)\n\n\n\n\n\n\n\n  num\n  char\n  currency\n\n\n\n  \n    0.1111\n    apricot\n    49.95\n  \n  \n    2\n    banana\n    17.95\n  \n  \n    33\n    coconut\n    1.39\n  \n\n\n\n\n\n\n        \n\n\nHere‚Äôs a more realistic example, which highlights the row with the highest value for currency.\n\nimport polars.selectors as cs\n\ngt_polars.tab_style(\n    style.fill(\"yellow\"),\n    loc.body(\n        columns=cs.all(),\n        rows=pl.col(\"currency\") == pl.col(\"currency\").max()\n    )\n)\n\n\n\n\n\n\n\n  num\n  char\n  currency\n\n\n\n  \n    0.1111\n    apricot\n    49.95\n  \n  \n    2.222\n    banana\n    17.95\n  \n  \n    33.33\n    coconut\n    1.39",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Row Selection"
    ]
  },
  {
    "objectID": "get-started/row-selection.html#using-a-function",
    "href": "get-started/row-selection.html#using-a-function",
    "title": "Row Selection",
    "section": "Using a function",
    "text": "Using a function\nSince libraries like pandas don‚Äôt have lazy expressions, the rows= argument also accepts a function for selecting rows. The function should take a DataFrame and return a boolean series.\nHere‚Äôs the same example as the previous polars section, but with pandas data, and a lamba for selecting rows.\n\ngt_ex.fmt_integer(\"num\", rows=lambda D: D[\"currency\"] &lt; 40)\n\n\n\n\n\n\n\n  num\n  char\n  currency\n\n\n\n  \n    0.1111\n    apricot\n    49.95\n  \n  \n    2\n    banana\n    17.95\n  \n  \n    33\n    coconut\n    1.39\n  \n\n\n\n\n\n\n        \n\n\nHere‚Äôs the styling example from the previous polars section.\n\nimport polars.selectors as cs\n\ngt_ex.tab_style(\n    style.fill(\"yellow\"),\n    loc.body(\n        columns=lambda colname: True,\n        rows=lambda D: D[\"currency\"] == D[\"currency\"].max()\n    )\n)\n\n\n\n\n\n\n\n  num\n  char\n  currency\n\n\n\n  \n    0.1111\n    apricot\n    49.95\n  \n  \n    2.222\n    banana\n    17.95\n  \n  \n    33.33\n    coconut\n    1.39",
    "crumbs": [
      "Get Started",
      "Selecting table parts",
      "Row Selection"
    ]
  },
  {
    "objectID": "get-started/index.html",
    "href": "get-started/index.html",
    "title": "Intro",
    "section": "",
    "text": "The Great Tables package is all about making it simple to produce nice-looking display tables. Display tables? Well yes, we are trying to distinguish between data tables (i.e., DataFrames) and those tables you‚Äôd find in a web page, a journal article, or in a magazine. Such tables can likewise be called presentation tables, summary tables, or just tables really. Here are some examples, ripped straight from the web:\nWe can think of display tables as output only, where we‚Äôd not want to use them as input ever again. Other features include annotations, table element styling, and text transformations that serve to communicate the subject matter more clearly.",
    "crumbs": [
      "Get Started",
      "Intro"
    ]
  },
  {
    "objectID": "get-started/index.html#lets-install",
    "href": "get-started/index.html#lets-install",
    "title": "Intro",
    "section": "Let‚Äôs Install",
    "text": "Let‚Äôs Install\nThe installation really couldn‚Äôt be much easier. Use this:\npip install great_tables",
    "crumbs": [
      "Get Started",
      "Intro"
    ]
  },
  {
    "objectID": "get-started/index.html#a-basic-table-using-great-tables",
    "href": "get-started/index.html#a-basic-table-using-great-tables",
    "title": "Intro",
    "section": "A Basic Table using Great Tables",
    "text": "A Basic Table using Great Tables\n\n\n\n\n\n\nNote\n\n\n\nThe example below requires the Pandas library to be installed. But Pandas is not required to use Great Tables. You can also use a Polars DataFrame.\n\n\nLet‚Äôs use a subset of the islands dataset available within great_tables.data:\n\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = islands.head(10)\n\nThe islands data is a simple Pandas DataFrame with 2 columns and that‚Äôll serve as a great start. Speaking of which, the main entry point into the Great Tables API is the GT class. Let‚Äôs use that to make a presentable table:\n\n# Create a display table showing ten of the largest islands in the world\ngt_tbl = GT(islands_mini)\n\n# Show the output table\n# If working in the console, use gt_tbl.show()\ngt_tbl\n\n\n\n\n\n\n\n  name\n  size\n\n\n\n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n  \n    Asia\n    16988\n  \n  \n    Australia\n    2968\n  \n  \n    Axel Heiberg\n    16\n  \n  \n    Baffin\n    184\n  \n  \n    Banks\n    23\n  \n  \n    Borneo\n    280\n  \n  \n    Britain\n    84\n  \n  \n    Celebes\n    73\n  \n\n\n\n\n\n\n        \n\n\nThat doesn‚Äôt look too bad! Sure, it‚Äôs basic but we really didn‚Äôt really ask for much. We did receive a proper table with column labels and the data. Oftentimes however, you‚Äôll want a bit more: a Table header, a Stub, and sometimes source notes in the Table Footer component.",
    "crumbs": [
      "Get Started",
      "Intro"
    ]
  },
  {
    "objectID": "get-started/index.html#polars-dataframe-support",
    "href": "get-started/index.html#polars-dataframe-support",
    "title": "Intro",
    "section": "Polars DataFrame support",
    "text": "Polars DataFrame support\nGT accepts both Pandas and Polars DataFrames. You can pass a Polars DataFrame to GT, or use its DataFrame.style property.\n\nimport polars as pl\n\ndf_polars = pl.from_pandas(islands_mini)\n\n# Approach 1: call GT ----\nGT(df_polars)\n\n# Approach 2: Polars style property ----\ndf_polars.style\n\n\n\n\n\n\n\n  name\n  size\n\n\n\n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n  \n    Asia\n    16988\n  \n  \n    Australia\n    2968\n  \n  \n    Axel Heiberg\n    16\n  \n  \n    Baffin\n    184\n  \n  \n    Banks\n    23\n  \n  \n    Borneo\n    280\n  \n  \n    Britain\n    84\n  \n  \n    Celebes\n    73\n  \n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe polars.DataFrame.style property is currently considered unstable, and may change in the future. Using GT on a Polars DataFrame will always work.",
    "crumbs": [
      "Get Started",
      "Intro"
    ]
  },
  {
    "objectID": "get-started/index.html#some-beautiful-examples",
    "href": "get-started/index.html#some-beautiful-examples",
    "title": "Intro",
    "section": "Some Beautiful Examples",
    "text": "Some Beautiful Examples\nIn the following pages we‚Äôll use Great Tables to turn DataFrames into beautiful tables, like the ones below.\n\n\nShow the Code\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = islands.head(10)\n\n(\n    GT(islands_mini, rowname_col = \"name\")\n    .tab_header(\n        title=\"Large Landmasses of the World\",\n        subtitle=\"The top ten largest are presented\"\n    )\n    .tab_source_note(\n        source_note=\"Source: The World Almanac and Book of Facts, 1975, page 406.\"\n    )\n    .tab_source_note(\n        source_note=md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")\n    )\n    .tab_stubhead(label=\"landmass\")\n)\n\n\n\n\n\n\n\n  \n    Large Landmasses of the World\n  \n  \n    The top ten largest are presented\n  \n\n  landmass\n  size\n\n\n\n  \n    Africa\n    11506\n  \n  \n    Antarctica\n    5500\n  \n  \n    Asia\n    16988\n  \n  \n    Australia\n    2968\n  \n  \n    Axel Heiberg\n    16\n  \n  \n    Baffin\n    184\n  \n  \n    Banks\n    23\n  \n  \n    Borneo\n    280\n  \n  \n    Britain\n    84\n  \n  \n    Celebes\n    73\n  \n\n  \n  \n  \n    Source: The World Almanac and Book of Facts, 1975, page 406.\n  \n\n\n  \n    Reference: McNeil, D. R. (1977) Interactive Data Analysis. Wiley.\n  \n\n\n\n\n\n\n        \n\n\n\n\nShow the Code\nfrom great_tables import GT, html\nfrom great_tables.data import airquality\n\nairquality_m = airquality.head(10).assign(Year=1973)\n\ngt_airquality = (\n    GT(airquality_m)\n    .tab_header(\n        title=\"New York Air Quality Measurements\",\n        subtitle=\"Daily measurements in New York City (May 1-10, 1973)\",\n    )\n    .tab_spanner(label=\"Time\", columns=[\"Year\", \"Month\", \"Day\"])\n    .tab_spanner(label=\"Measurement\", columns=[\"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"])\n    .cols_move_to_start(columns=[\"Year\", \"Month\", \"Day\"])\n    .cols_label(\n        Ozone=html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R=html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind=html(\"Wind,&lt;br&gt;mph\"),\n        Temp=html(\"Temp,&lt;br&gt;&deg;F\"),\n    )\n)\n\ngt_airquality\n\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Time\n  \n  \n    Measurement\n  \n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Solar R.,cal/m2\n  Wind,mph\n  Temp,¬∞F\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    \n    \n    14.3\n    56\n  \n  \n    1973\n    5\n    6\n    28.0\n    \n    14.9\n    66\n  \n  \n    1973\n    5\n    7\n    23.0\n    299.0\n    8.6\n    65\n  \n  \n    1973\n    5\n    8\n    19.0\n    99.0\n    13.8\n    59\n  \n  \n    1973\n    5\n    9\n    8.0\n    19.0\n    20.1\n    61\n  \n  \n    1973\n    5\n    10\n    \n    194.0\n    8.6\n    69",
    "crumbs": [
      "Get Started",
      "Intro"
    ]
  },
  {
    "objectID": "get-started/overview.html",
    "href": "get-started/overview.html",
    "title": "Overview",
    "section": "",
    "text": "The Great Tables package makes it relatively easy to add components so that the resulting output table better conveys the information you want to present. These table components work well together and the possible variations in arrangement can handle even the most demanding table presentation needs. The previous output table we showed had only two components: the Column Labels and the Table Body. The next few examples will show all of the other table parts that are available.\nThis is the way the main parts of a table (and their subparts) fit together:\n\nThe components (roughly from top to bottom) are:\n\nthe Table Header (optional; with a title and possibly a subtitle)\nthe Stub and the Stub Head (optional; contains row labels, optionally within row groups having row group labels)\nthe Column Labels (contains column labels, optionally under spanner labels)\nthe Table Body (contains columns and rows of cells)\nthe Table Footer (optional; possibly with one or more source notes)",
    "crumbs": [
      "Get Started",
      "Overview"
    ]
  },
  {
    "objectID": "get-started/overview.html#adding-parts-to-this-simple-table",
    "href": "get-started/overview.html#adding-parts-to-this-simple-table",
    "title": "Overview",
    "section": "",
    "text": "The Great Tables package makes it relatively easy to add components so that the resulting output table better conveys the information you want to present. These table components work well together and the possible variations in arrangement can handle even the most demanding table presentation needs. The previous output table we showed had only two components: the Column Labels and the Table Body. The next few examples will show all of the other table parts that are available.\nThis is the way the main parts of a table (and their subparts) fit together:\n\nThe components (roughly from top to bottom) are:\n\nthe Table Header (optional; with a title and possibly a subtitle)\nthe Stub and the Stub Head (optional; contains row labels, optionally within row groups having row group labels)\nthe Column Labels (contains column labels, optionally under spanner labels)\nthe Table Body (contains columns and rows of cells)\nthe Table Footer (optional; possibly with one or more source notes)",
    "crumbs": [
      "Get Started",
      "Overview"
    ]
  },
  {
    "objectID": "blog/introduction_great_tables.html",
    "href": "blog/introduction_great_tables.html",
    "title": "Introducing Great Tables",
    "section": "",
    "text": "We are really excited about developing the Great Tables package because we believe it‚Äôll make great-looking display tables possible in Python. Though it‚Äôs still early days for the project/package, you can do good things with it today! The most recent version of Great Tables is in PyPI. You can install it by using:\nIn this short post, we‚Äôll take a look at a few examples that focus on the more common table-making use cases. We‚Äôll show you how to:\nAlright! Let‚Äôs get right into it."
  },
  {
    "objectID": "blog/introduction_great_tables.html#a-basic-table",
    "href": "blog/introduction_great_tables.html#a-basic-table",
    "title": "Introducing Great Tables",
    "section": "A Basic Table",
    "text": "A Basic Table\nLet‚Äôs get right to making a display table with Great Tables. The package has quite a few datasets and so we‚Äôll start by making use of the very small, but useful, exibble dataset. After importing the GT class and that dataset, we‚Äôll introduce that Pandas table to GT().\n\nfrom great_tables import GT, exibble\n\n# Create a display table with the `exibble` dataset\ngt_tbl = GT(exibble)\n\n# Now, show the gt table\ngt_tbl\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550.0\n    \n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    \n    fig\n    six\n    2015-06-15\n    \n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    \n    19:10\n    2018-07-07 05:22\n    \n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    \n    0.44\n    row_8\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nThat looks pretty good! Indeed, it is a basic table but we really didn‚Äôt really ask for much either. What we did get was an HTML table containing column labels and all of the body cells. You‚Äôll probably be wanting a bit more, so, let‚Äôs look at how we can incorporate more table components and perform cell data formatting in the upcoming examples."
  },
  {
    "objectID": "blog/introduction_great_tables.html#more-complex-tables",
    "href": "blog/introduction_great_tables.html#more-complex-tables",
    "title": "Introducing Great Tables",
    "section": "More Complex Tables",
    "text": "More Complex Tables\nLet‚Äôs take things a bit further and create a table with the included gtcars dataset. Great Tables provides a large selection of methods and they let you refine the table display. They were designed so that you can easily create a really presentable and beautiful table visualization.\nFor this next table, we‚Äôll incorporate a Stub component and this provides a place for the row labels. Groupings of rows will be generated through categorical values in a particular column (we just have to cite the column name for that to work). We‚Äôll add a table title and subtitle with tab_header(). The numerical values will be formatted with the fmt_integer() and fmt_currency() methods. Column labels will be enhanced via cols_label() and a source note will be included through use of the tab_source_note() method. Here is the table code, followed by the table itself.\n\nfrom great_tables import GT, md, html\nfrom great_tables.data import gtcars\n\ngtcars_mini = gtcars[[\"mfr\", \"model\", \"year\", \"hp\", \"trq\", \"msrp\"]].tail(10)\n\n(\n    GT(gtcars_mini, rowname_col=\"model\", groupname_col=\"mfr\")\n    .tab_spanner(label=md(\"*Performance*\"), columns=[\"hp\", \"trq\"])\n    .tab_header(\n        title=html(\"Data listing from &lt;strong&gt;gtcars&lt;/strong&gt;\"),\n        subtitle=html(\"A &lt;span style='font-size:12px;'&gt;small selection&lt;/span&gt; of great cars.\"),\n    )\n    .cols_label(year=\"Year Produced\", hp=\"HP\", trq=\"Torque\", msrp=\"Price (USD)\")\n    .fmt_integer(columns=[\"year\", \"hp\", \"trq\"], use_seps=False)\n    .fmt_currency(columns=\"msrp\")\n    .tab_source_note(source_note=\"Source: the gtcars dataset within the Great Tables package.\")\n)\n\n\n\n\n\n\n  \n    Data listing from gtcars\n  \n  \n    A small selection of great cars.\n  \n\n  \n  Year Produced\n  \n    Performance\n  \n  Price (USD)\n\n\n  HP\n  Torque\n\n\n\n  \n    Mercedes-Benz\n  \n  \n    AMG GT\n    2016\n    503\n    479\n    $129,900.00\n  \n  \n    SL-Class\n    2016\n    329\n    354\n    $85,050.00\n  \n  \n    Tesla\n  \n  \n    Model S\n    2017\n    259\n    243\n    $74,500.00\n  \n  \n    Porsche\n  \n  \n    718 Boxster\n    2017\n    300\n    280\n    $56,000.00\n  \n  \n    718 Cayman\n    2017\n    300\n    280\n    $53,900.00\n  \n  \n    911\n    2016\n    350\n    287\n    $84,300.00\n  \n  \n    Panamera\n    2016\n    310\n    295\n    $78,100.00\n  \n  \n    McLaren\n  \n  \n    570\n    2016\n    570\n    443\n    $184,900.00\n  \n  \n    Rolls-Royce\n  \n  \n    Dawn\n    2016\n    563\n    575\n    $335,000.00\n  \n  \n    Wraith\n    2016\n    624\n    590\n    $304,350.00\n  \n\n  \n  \n  \n    Source: the gtcars dataset within the Great Tables package.\n  \n\n\n\n\n\n\n        \n\n\nWith the six different methods applied, the table looks highly presentable! The rendering you‚Äôre seeing here has been done through Quarto (this entire site has been generated with quartodoc). If you haven‚Äôt yet tried out Quarto, we highly recommend it!\nFor this next example we‚Äôll use the airquality dataset (also included in the package; it‚Äôs inside the data submodule). With this table, two spanners will be added with the tab_spanner() method. This method is meant to be easy to use, you only need to provide the text for the spanner label and the columns associated with the spanner. We also make it easy to move columns around. You can use cols_move_to_start() (example of that below) and there are also the cols_move_to_end() and cols_move() methods.\n\nfrom great_tables.data import airquality\n\nairquality_mini = airquality.head(10).assign(Year=1973)\n\n(\n    GT(airquality_mini)\n    .tab_header(\n        title=\"New York Air Quality Measurements\",\n        subtitle=\"Daily measurements in New York City (May 1-10, 1973)\",\n    )\n    .cols_label(\n        Ozone=html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R=html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind=html(\"Wind,&lt;br&gt;mph\"),\n        Temp=html(\"Temp,&lt;br&gt;&deg;F\"),\n    )\n    .tab_spanner(label=\"Date\", columns=[\"Year\", \"Month\", \"Day\"])\n    .tab_spanner(label=\"Measurement\", columns=[\"Ozone\", \"Solar.R\", \"Wind\", \"Temp\"])\n    .cols_move_to_start(columns=[\"Year\", \"Month\", \"Day\"])\n)\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Date\n  \n  \n    Measurement\n  \n  Solar R.,cal/m2\n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Wind,mph\n  Temp,¬∞F\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    7.4\n    67\n    190.0\n  \n  \n    1973\n    5\n    2\n    36.0\n    8.0\n    72\n    118.0\n  \n  \n    1973\n    5\n    3\n    12.0\n    12.6\n    74\n    149.0\n  \n  \n    1973\n    5\n    4\n    18.0\n    11.5\n    62\n    313.0\n  \n  \n    1973\n    5\n    5\n    \n    14.3\n    56\n    \n  \n  \n    1973\n    5\n    6\n    28.0\n    14.9\n    66\n    \n  \n  \n    1973\n    5\n    7\n    23.0\n    8.6\n    65\n    299.0\n  \n  \n    1973\n    5\n    8\n    19.0\n    13.8\n    59\n    99.0\n  \n  \n    1973\n    5\n    9\n    8.0\n    20.1\n    61\n    19.0\n  \n  \n    1973\n    5\n    10\n    \n    8.6\n    69\n    194.0\n  \n\n\n\n\n\n\n        \n\n\nThat table looks really good, and the nice thing about all these methods is that they can be used in virtually any order."
  },
  {
    "objectID": "blog/introduction_great_tables.html#formatting-table-cells",
    "href": "blog/introduction_great_tables.html#formatting-table-cells",
    "title": "Introducing Great Tables",
    "section": "Formatting Table Cells",
    "text": "Formatting Table Cells\nWe didn‚Äôt want to skimp on formatting methods for table cells with this early release. There are 12 fmt_*() methods available right now:\n\nfmt_number(): format numeric values\nfmt_integer(): format values as integers\nfmt_percent(): format values as percentages\nfmt_scientific(): format values to scientific notation\nfmt_currency(): format values as currencies\nfmt_bytes(): format values as bytes\nfmt_roman(): format values as Roman numerals\nfmt_date(): format values as dates\nfmt_time(): format values as times\nfmt_datetime(): format values as datetimes\nfmt_markdown(): format Markdown text\nfmt(): set a column format with a formatting function\n\nWe strive to make formatting a simple task but we also want to provide the user a lot of power through advanced options and we ensure that varied combinations of options works well. For example, most of the formatting methods have a locale= argument. We want as many users as possible to be able to format numbers, dates, and times in ways that are familiar to them and are adapted to their own regional specifications. Now let‚Äôs take a look at an example of this with a smaller version of the exibble dataset:\n\nexibble_smaller = exibble[[\"date\", \"time\"]].head(4)\n\n(\n    GT(exibble_smaller)\n    .fmt_date(columns=\"date\", date_style=\"wday_month_day_year\")\n    .fmt_date(columns=\"date\", rows=[2, 3], date_style=\"day_month_year\", locale=\"de-CH\")\n    .fmt_time(columns=\"time\", time_style=\"h_m_s_p\")\n)\n\n\n\n\n\n\n\n  date\n  time\n\n\n\n  \n    Thursday, January 15, 2015\n    1:35:00 PM\n  \n  \n    Sunday, February 15, 2015\n    2:40:00 PM\n  \n  \n    15 M√§rz 2015\n    3:45:00 PM\n  \n  \n    15 April 2015\n    4:50:00 PM\n  \n\n\n\n\n\n\n        \n\n\nWe support hundreds of locales, from af to zu! While there are more formatting methods yet to be added, the ones that are available all work exceedingly well."
  },
  {
    "objectID": "blog/introduction_great_tables.html#using-styles-within-a-table",
    "href": "blog/introduction_great_tables.html#using-styles-within-a-table",
    "title": "Introducing Great Tables",
    "section": "Using Styles within a Table",
    "text": "Using Styles within a Table\nWe can use the tab_style() method in combination with loc.body() and various style.*() functions to set styles on cells of data within the table body. For example, the table-making code below applies a yellow background color to the targeted cells.\n\nfrom great_tables import GT, style, loc\nfrom great_tables.data import airquality\n\nairquality_mini = airquality.head()\n\n(\n    GT(airquality_mini)\n    .tab_style(\n        style=style.fill(color=\"yellow\"),\n        locations=loc.body(columns=\"Temp\", rows=[1, 2])\n    )\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    \n    \n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\nAside from style.fill() we can also use style.text() and style.borders() to focus the styling on cell text and borders. Here‚Äôs an example where we perform several types of styling on targeted cells (the key is to put the style.*() calls in a list).\n\nfrom great_tables import GT, style, exibble\n\n(\n    GT(exibble[[\"num\", \"currency\"]])\n    .fmt_number(columns = \"num\", decimals=1)\n    .fmt_currency(columns = \"currency\")\n    .tab_style(\n        style=[\n            style.fill(color=\"lightcyan\"),\n            style.text(weight=\"bold\")\n        ],\n        locations=loc.body(columns=\"num\")\n    )\n    .tab_style(\n        style=[\n            style.fill(color = \"#F9E3D6\"),\n            style.text(style = \"italic\")\n        ],\n        locations=loc.body(columns=\"currency\")\n    )\n)\n\n\n\n\n\n\n\n  num\n  currency\n\n\n\n  \n    0.1\n    $49.95\n  \n  \n    2.2\n    $17.95\n  \n  \n    33.3\n    $1.39\n  \n  \n    444.4\n    $65,100.00\n  \n  \n    5,550.0\n    $1,325.81\n  \n  \n    \n    $13.26\n  \n  \n    777,000.0\n    \n  \n  \n    8,880,000.0\n    $0.44"
  },
  {
    "objectID": "blog/introduction_great_tables.html#column-selection-with-polars-and-how-it-helps-with-styling",
    "href": "blog/introduction_great_tables.html#column-selection-with-polars-and-how-it-helps-with-styling",
    "title": "Introducing Great Tables",
    "section": "Column Selection with Polars (and How It Helps with Styling)",
    "text": "Column Selection with Polars (and How It Helps with Styling)\nStyles can also be specified using Polars expressions. For example, the code below uses the Temp column to set color to \"lightyellow\" or \"lightblue\".\n\nimport polars as pl\n\nfrom great_tables import GT, from_column, style, loc\nfrom great_tables.data import airquality\n\nairquality_mini = pl.from_pandas(airquality.head())\n\n# A Polars expression defines color based on values in `Temp`\nfill_color_temp = (\n    pl.when(pl.col(\"Temp\") &gt; 70)\n    .then(pl.lit(\"lightyellow\"))\n    .otherwise(pl.lit(\"lightblue\"))\n)\n\n# Pass `fill_color_temp` to the `color=` arg of `style.fill()`\n(\n    GT(airquality_mini)\n    .tab_style(\n        style=style.fill(color=fill_color_temp),\n        locations=loc.body(\"Temp\")\n    )\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    None\n    None\n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\nWe can deftly mix and match Polars column selectors and expressions. This gives us great flexibility in selecting specific columns and rows. Here‚Äôs an example of doing that again with tab_style():\n\nimport polars.selectors as cs\n\n(\n    GT(airquality_mini)\n    .tab_style(\n        style=style.fill(color=\"yellow\"),\n        locations=loc.body(\n            columns=cs.starts_with(\"Te\"),\n            rows=pl.col(\"Temp\") &gt; 70\n        )\n    )\n)\n\n\n\n\n\n\n\n  Ozone\n  Solar_R\n  Wind\n  Temp\n  Month\n  Day\n\n\n\n  \n    41.0\n    190.0\n    7.4\n    67\n    5\n    1\n  \n  \n    36.0\n    118.0\n    8.0\n    72\n    5\n    2\n  \n  \n    12.0\n    149.0\n    12.6\n    74\n    5\n    3\n  \n  \n    18.0\n    313.0\n    11.5\n    62\n    5\n    4\n  \n  \n    None\n    None\n    14.3\n    56\n    5\n    5\n  \n\n\n\n\n\n\n        \n\n\nIt feels great to use the conveniences offered by Polars and we‚Äôre excited about how far we can take this!"
  },
  {
    "objectID": "blog/introduction_great_tables.html#where-were-going-with-great-tables",
    "href": "blog/introduction_great_tables.html#where-were-going-with-great-tables",
    "title": "Introducing Great Tables",
    "section": "Where We‚Äôre Going with Great Tables",
    "text": "Where We‚Äôre Going with Great Tables\nWe‚Äôre obviously pretty encouraged about how Great Tables is turning out and so we‚Äôll continue to get useful table-making niceties into the package. We welcome any and all feedback, so get in touch with us:\n\nyou can file a GitHub issue or get a discussion going in GitHub Discussions\nthere‚Äôs an X/Twitter account at @gt_package, so check it out for package news and announcements\nthere‚Äôs a fun Discord server that lets you more casually ask questions and generally just talk about table things\n\nStay tuned for more on Great Tables in this blog or elsewhere in the Internet!"
  },
  {
    "objectID": "blog/polars-styling/index.html",
    "href": "blog/polars-styling/index.html",
    "title": "Great Tables: The Polars DataFrame Styler of Your Dreams",
    "section": "",
    "text": "Analyzing data with polars is a no-brainer in python. It provides an intuitive, expressive interface to data. When it comes to reports, it‚Äôs trivial to plug polars into plotting libraries like seaborn, plotly, and plotnine.\nHowever, there are fewer options for styling tables for presentation. You could convert from polars to pandas, and use the built-in pandas DataFrame styler, but this has one major limitation: you can‚Äôt use polars expressions.\nAs it turns out, polars expressions make styling tables very straightforward. The same polars code that you would use to select or filter combines with Great Tables to highlight, circle, or bolden text.\nIn this post, I‚Äôll show how Great Tables uses polars expressions to make delightful tables, like the one below.\nCode\nimport polars as pl\nimport polars.selectors as cs\n\nfrom great_tables import GT, md, html, style, loc\nfrom great_tables.data import airquality\n\nairquality_mini = airquality.head(10).assign(Year = 1973)\npl_airquality = pl.DataFrame(airquality_mini).select(\n    \"Year\", \"Month\", \"Day\", \"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"\n)\ngt_air = GT(pl_airquality)\n\n(\n    gt_air\n\n    # Table header ----\n    .tab_header(\n        title = \"New York Air Quality Measurements\",\n        subtitle = \"Daily measurements in New York City (May 1-10, 1973)\"\n    )\n\n    # Table column spanners ----\n    .tab_spanner(\n        label = \"Time\",\n        columns = [\"Year\", \"Month\", \"Day\"]\n    )\n    .tab_spanner(\n        label = \"Measurement\",\n        columns = [\"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"]\n    )\n    .cols_label(\n        Ozone = html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R = html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind = html(\"Wind,&lt;br&gt;mph\"),\n        Temp = html(\"Temp,&lt;br&gt;&deg;F\")\n    )\n\n    # Table styles ----\n    .tab_style(\n        style.fill(\"lightyellow\"),\n        loc.body(\n            columns = cs.all(),\n            rows = pl.col(\"Wind\") == pl.col(\"Wind\").max()\n        )\n    )\n    .tab_style(\n        style.text(weight = \"bold\"),\n        loc.body(\"Wind\", pl.col(\"Wind\") == pl.col(\"Wind\").max())\n    )\n)\n\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Time\n  \n  \n    Measurement\n  \n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Solar R.,cal/m2\n  Wind,mph\n  Temp,¬∞F\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    None\n    None\n    14.3\n    56\n  \n  \n    1973\n    5\n    6\n    28.0\n    None\n    14.9\n    66\n  \n  \n    1973\n    5\n    7\n    23.0\n    299.0\n    8.6\n    65\n  \n  \n    1973\n    5\n    8\n    19.0\n    99.0\n    13.8\n    59\n  \n  \n    1973\n    5\n    9\n    8.0\n    19.0\n    20.1\n    61\n  \n  \n    1973\n    5\n    10\n    None\n    194.0\n    8.6\n    69"
  },
  {
    "objectID": "blog/polars-styling/index.html#the-parts-of-a-presentation-ready-table",
    "href": "blog/polars-styling/index.html#the-parts-of-a-presentation-ready-table",
    "title": "Great Tables: The Polars DataFrame Styler of Your Dreams",
    "section": "The parts of a presentation-ready table",
    "text": "The parts of a presentation-ready table\nOur example table customized three main parts:\n\nTitle and subtitle: User friendly titles and subtitles, describing the data.\nColumn spanners: Group related columns together with a custom label.\nStyles: Highlight rows, columns, or individual cells of data.\n\nThis is marked below.\n\n\n\n\n\nLet‚Äôs walk through each piece in order to produce the table below."
  },
  {
    "objectID": "blog/polars-styling/index.html#creating-gt-object",
    "href": "blog/polars-styling/index.html#creating-gt-object",
    "title": "Great Tables: The Polars DataFrame Styler of Your Dreams",
    "section": "Creating GT object",
    "text": "Creating GT object\nFirst, we‚Äôll import the necessary libraries, and do a tiny bit of data processing.\n\nimport polars as pl\nimport polars.selectors as cs\n\nfrom great_tables import GT\nfrom great_tables.data import airquality\n\n# Note that we'll use the first 5 rows as we build up our code\nairquality_mini = airquality.head(5).assign(Year = 1973)\npl_airquality = pl.DataFrame(airquality_mini).select(\n    \"Year\", \"Month\", \"Day\", \"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"\n)\n\npl_airquality\n\n\nshape: (5, 7)YearMonthDayOzoneSolar_RWindTempi64i64i64f64f64f64i6419735141.0190.07.46719735236.0118.08.07219735312.0149.012.67419735418.0313.011.562197355nullnull14.356\n\n\nThe default polars output above is really helpful for data analysis! By passing it to the GT constructor, we can start getting it ready for presentation.\n\ngt_air = GT(pl_airquality)\n\ngt_air\n\n\n\n\n\n\n\n  Year\n  Month\n  Day\n  Ozone\n  Solar_R\n  Wind\n  Temp\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    None\n    None\n    14.3\n    56\n  \n\n\n\n\n\n\n        \n\n\nIn the next section I‚Äôll show setting a title, and then go on to more exciting stuff like styling the body and creating column spanners."
  },
  {
    "objectID": "blog/polars-styling/index.html#set-title-and-subtitle",
    "href": "blog/polars-styling/index.html#set-title-and-subtitle",
    "title": "Great Tables: The Polars DataFrame Styler of Your Dreams",
    "section": "Set title and subtitle",
    "text": "Set title and subtitle\nThe simplest method in gt is GT.tab_header(), which lets you add a title and subtitle.\n\n(\n    gt_air\n\n    # Table header ----\n    .tab_header(\n        title = \"New York Air Quality Measurements\",\n        subtitle = \"Daily measurements in New York City (May 1-10, 1973)\"\n    )\n)\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  Year\n  Month\n  Day\n  Ozone\n  Solar_R\n  Wind\n  Temp\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    None\n    None\n    14.3\n    56\n  \n\n\n\n\n\n\n        \n\n\nJust like with plots, tables need titles so people know what they‚Äôre about!"
  },
  {
    "objectID": "blog/polars-styling/index.html#set-body-styles",
    "href": "blog/polars-styling/index.html#set-body-styles",
    "title": "Great Tables: The Polars DataFrame Styler of Your Dreams",
    "section": "Set body styles",
    "text": "Set body styles\nThe .tab_style() method sets styles‚Äîlike fill color, or text properties‚Äîon different parts of the table. Let‚Äôs use it twice with a polars expression. First to highlight the row corresponding to the max Wind value, and then to bold that value.\n\nfrom great_tables import style, loc\n\nis_max_wind = pl.col(\"Wind\") == pl.col(\"Wind\").max()\n\n(\n    gt_air\n\n    # Table styles ----\n    .tab_style(\n        style.fill(\"lightyellow\"),\n        loc.body(\n            columns = cs.all(),\n            rows = is_max_wind\n        )\n    )\n    .tab_style(\n        style.text(weight = \"bold\"),\n        loc.body(\"Wind\", is_max_wind)\n    )\n)\n\n\n\n\n\n\n\n  Year\n  Month\n  Day\n  Ozone\n  Solar_R\n  Wind\n  Temp\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    None\n    None\n    14.3\n    56\n  \n\n\n\n\n\n\n        \n\n\nNote two important pieces:\n\nFunctions like style.fill() indicate what style to set.\nFunctions like loc.body() indicate where to apply the style. Its columns= and rows= parameters let you target specific parts of the table body (using polars expressions).\n\nCurrently, Great Tables only supports styling the table body. In the (very near) future, other loc.* functions will allow styling other parts of the table (e.g.¬†the title, column labels, etc..).\nFor more details on styles, see Styling the Table Body in the Geting Started guide."
  },
  {
    "objectID": "blog/polars-styling/index.html#set-column-spanners",
    "href": "blog/polars-styling/index.html#set-column-spanners",
    "title": "Great Tables: The Polars DataFrame Styler of Your Dreams",
    "section": "Set column spanners",
    "text": "Set column spanners\nThe last piece to set in the table is the column spanners, which are made up of two things:\n\nLabels describing groups of columns (e.g.¬†Time, Measurement).\nMore readable labels for columns themselves.\n\nUse GT.tab_spanner() to set labels on groups of columns.\n\ntime_cols = [\"Year\", \"Month\", \"Day\"]\n\ngt_with_spanners = (\n    gt_air\n\n    # Table column spanners ----\n    .tab_spanner(\n        label=\"Time\",\n        columns=time_cols\n    )\n    .tab_spanner(\n        label=\"Measurement\",\n        columns=cs.exclude(time_cols)\n    )\n)\n\ngt_with_spanners\n\n\n\n\n\n\n\n  \n    Time\n  \n  \n    Measurement\n  \n\n\n  Year\n  Month\n  Day\n  Ozone\n  Solar_R\n  Wind\n  Temp\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    None\n    None\n    14.3\n    56\n  \n\n\n\n\n\n\n        \n\n\nNotice that there are now labels for ‚ÄúTime‚Äù and ‚ÄúMeasurement‚Äù sitting above the column names. This is useful for emphasizing columns that share something in common.\nUse GT.cols_labels() with html() to create human-friendly labels (e.g.¬†convert things like cal_m_2 to cal/m2).\n\nfrom great_tables import html\n\n(\n    gt_with_spanners\n    .cols_label(\n        Ozone = html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R = html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind = html(\"Wind,&lt;br&gt;mph\"),\n        Temp = html(\"Temp,&lt;br&gt;&deg;F\")\n    )\n)\n\n\n\n\n\n\n\n  \n    Time\n  \n  \n    Measurement\n  \n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Solar R.,cal/m2\n  Wind,mph\n  Temp,¬∞F\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    None\n    None\n    14.3\n    56\n  \n\n\n\n\n\n\n        \n\n\nThis is helpful because labels are often in a funky format (e.g.¬†cal_m_2) because they‚Äôre easier to work with programmatically, so need to be cleaned up for presentation.\nSee the Column Labels page of the guide for more details."
  },
  {
    "objectID": "blog/polars-styling/index.html#putting-it-all-together",
    "href": "blog/polars-styling/index.html#putting-it-all-together",
    "title": "Great Tables: The Polars DataFrame Styler of Your Dreams",
    "section": "Putting it all together",
    "text": "Putting it all together\nFinally, we‚Äôll combine everything from the sections above into a single block of code, and use a few more rows of data.\n\n\nCode\nimport polars as pl\nimport polars.selectors as cs\n\nfrom great_tables import GT, md, html, style, loc\nfrom great_tables.data import airquality\n\nairquality_mini = airquality.head(10).assign(Year = 1973)\npl_airquality = pl.DataFrame(airquality_mini).select(\n    \"Year\", \"Month\", \"Day\", \"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"\n)\ngt_air = GT(pl_airquality)\n\n(\n    gt_air\n\n    # Table header ----\n    .tab_header(\n        title = \"New York Air Quality Measurements\",\n        subtitle = \"Daily measurements in New York City (May 1-10, 1973)\"\n    )\n\n    # Table column spanners ----\n    .tab_spanner(\n        label = \"Time\",\n        columns = [\"Year\", \"Month\", \"Day\"]\n    )\n    .tab_spanner(\n        label = \"Measurement\",\n        columns = [\"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"]\n    )\n    .cols_label(\n        Ozone = html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R = html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind = html(\"Wind,&lt;br&gt;mph\"),\n        Temp = html(\"Temp,&lt;br&gt;&deg;F\")\n    )\n\n    # Table styles ----\n    .tab_style(\n        style.fill(\"lightyellow\"),\n        loc.body(\n            columns = cs.all(),\n            rows = pl.col(\"Wind\") == pl.col(\"Wind\").max()\n        )\n    )\n    .tab_style(\n        style.text(weight = \"bold\"),\n        loc.body(\"Wind\", pl.col(\"Wind\") == pl.col(\"Wind\").max())\n    )\n)\n\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Time\n  \n  \n    Measurement\n  \n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Solar R.,cal/m2\n  Wind,mph\n  Temp,¬∞F\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    None\n    None\n    14.3\n    56\n  \n  \n    1973\n    5\n    6\n    28.0\n    None\n    14.9\n    66\n  \n  \n    1973\n    5\n    7\n    23.0\n    299.0\n    8.6\n    65\n  \n  \n    1973\n    5\n    8\n    19.0\n    99.0\n    13.8\n    59\n  \n  \n    1973\n    5\n    9\n    8.0\n    19.0\n    20.1\n    61\n  \n  \n    1973\n    5\n    10\n    None\n    194.0\n    8.6\n    69\n  \n\n\n\n\n\n\n        \n\n\nNot too bad!\nTable styling is a surprisingly deep topic, and we‚Äôve only scratched the surface on what Great Tables can do. A big one not covered here is the many column formatting methods, like GT.fmt_currency().\nThoughtfully styled tables tell viewers that you care as much about communicating the table, as much as the data wrangling behind it. Working with polars has been an absolute dream, and we‚Äôre excited to explore different ways it and Great Tables make for easy table styling!"
  },
  {
    "objectID": "blog/latex-output-tables/index.html",
    "href": "blog/latex-output-tables/index.html",
    "title": "Great Tables: Generating LaTeX Output for PDF",
    "section": "",
    "text": "We‚Äôve been doing quite a bit of work on getting Great Tables to produce LaTeX table code and v0.14.0 introduces the as_latex() method to make this possible. For those publishing workflows involving LaTeX documents, it‚Äôs useful to have a reproducible solution for generating data tables as native LaTeX tables.\nIn this post, we will go over the following:"
  },
  {
    "objectID": "blog/latex-output-tables/index.html#generating-a-latex-table-with-great-tables",
    "href": "blog/latex-output-tables/index.html#generating-a-latex-table-with-great-tables",
    "title": "Great Tables: Generating LaTeX Output for PDF",
    "section": "Generating a LaTeX table with Great Tables",
    "text": "Generating a LaTeX table with Great Tables\nWe can use the GT.as_latex() method to generate LaTeX table code. This code includes important structural pieces like titles, spanners, and value formatting. For example, here‚Äôs a simple table output as LaTeX code:\n\n\nShow the Code\nfrom great_tables import GT\nfrom great_tables.data import gtcars\nimport polars as pl\n\ngtcars_pl = (\n    pl.from_pandas(gtcars)\n    .select([\"mfr\", \"model\", \"hp\", \"trq\", \"mpg_c\", \"msrp\"])\n)\n\ngt_tbl = (\n    GT(\n        gtcars[[\"mfr\", \"model\", \"hp\", \"trq\", \"msrp\"]].head(5),\n    )\n    .tab_header(\n        title=\"Some Cars from the gtcars Dataset\",\n        subtitle=\"Five Cars are shown here\"\n    )\n    .tab_spanner(\n        label=\"Make and Model\",\n        columns=[\"mfr\", \"model\"],\n        id=\"make_model\"\n    )\n    .tab_spanner(\n        label=\"Performance\",\n        columns=[\"hp\", \"trq\", \"msrp\"]\n    )\n    .tab_spanner(\n        label=\"Everything but the cost\",\n        columns=[\"mfr\", \"model\", \"hp\", \"trq\"]\n    )\n    .fmt_integer(columns=[\"hp\", \"trq\"])\n    .fmt_currency(columns=\"msrp\")\n    .tab_source_note(\"Cars are all 2015 models.\")\n    .tab_source_note(\"Horsepower and Torque values are estimates.\")\n)\n\nprint(gt_tbl.as_latex())\n\n\n\\begin{table}\n\\caption*{\n{\\large Some Cars from the gtcars Dataset} \\\\\n{\\small Five Cars are shown here}\n}\n\n\\fontsize{12.0pt}{14.4pt}\\selectfont\n\n\\begin{tabular*}{\\linewidth}{@{\\extracolsep{\\fill}}llrrr}\n\\toprule\n\\multicolumn{4}{c}{Everything but the cost} &  \\\\\n\\cmidrule(lr){1-4}\n\\multicolumn{2}{c}{Make and Model} & \\multicolumn{3}{c}{Performance} \\\\\n\\cmidrule(lr){1-2} \\cmidrule(lr){3-5}\nmfr & model & hp & trq & msrp \\\\\n\\midrule\\addlinespace[2.5pt]\nFord & GT & 647 & 550 & \\$447,000.00 \\\\\nFerrari & 458 Speciale & 597 & 398 & \\$291,744.00 \\\\\nFerrari & 458 Spider & 562 & 398 & \\$263,553.00 \\\\\nFerrari & 458 Italia & 562 & 398 & \\$233,509.00 \\\\\nFerrari & 488 GTB & 661 & 561 & \\$245,400.00 \\\\\n\\bottomrule\n\\end{tabular*}\n\\begin{minipage}{\\linewidth}\nCars are all 2015 models.\\\\\nHorsepower and Torque values are estimates.\\\\\n\\end{minipage}\n\\end{table}\nThe returned LaTeX table code shows how some of Great Tables‚Äô structural components are represented in LaTeX. Note these three important pieces of LaTeX code:\n\n\\caption*{ produces our title and subtitle (line 2)\nthe \\multicolumn{ statements produce spanners (i.e., labels on top of multiple column labels) (line 11)\nthe values in the data are escaped, using \\ (e.g., \\$ represents a literal dollar sign) (line 17)\n\nA frequent issue with any programmatic generation of LaTeX table code is LaTeX escaping. Not doing so can lead to LaTeX rendering errors, potentially breaking an entire publishing workflow. Great Tables will automatically escape characters in LaTeX, limiting such errors."
  },
  {
    "objectID": "blog/latex-output-tables/index.html#using-latex-output-from-great-tables-in-quarto",
    "href": "blog/latex-output-tables/index.html#using-latex-output-from-great-tables-in-quarto",
    "title": "Great Tables: Generating LaTeX Output for PDF",
    "section": "Using LaTeX output from Great Tables in Quarto",
    "text": "Using LaTeX output from Great Tables in Quarto\nProducing LaTeX table code is especially handy when using Quarto to generate PDF documents. Quarto is a tool for publishing documents, websites, books, etc., with an emphasis on running Python code. It uses the .qmd file format, which is a superset of Markdown (.md).\nHere‚Äôs an example .qmd file with these pieces in place:\n---\nformat: pdf\n---\n\nUsing Great Tables in a Quarto PDF document.\n\n```{python}\n#| output: asis\n\nfrom great_tables import GT, exibble\n\ngt_tbl = GT(exibble)\n\nprint(gt_tbl.as_latex())\n```\nNotice that in the .qmd above we needed to have the following pieces to generate a PDF:\n\nset \"format: pdf\" in YAML header\nset \"output: asis\" in the code cell that‚Äôs outputting LaTeX table code\nuse the as_latex() method on a GT object and print() the text\n\nThe example above used a very simple table, but here‚Äôs the table from the previous example rendered to PDF in Quarto:\n\n\n.qmd content\n\n---\nformat: pdf\n---\n\nExample using the `gtcars` dataset.\n\n```{python}\n#| output: asis\n\nfrom great_tables import GT\nfrom great_tables.data import gtcars\nimport polars as pl\n\ngtcars_pl = (\n    pl.from_pandas(gtcars)\n    .select([\"mfr\", \"model\", \"hp\", \"trq\", \"mpg_c\", \"msrp\"])\n)\n\ngt_tbl = (\n    GT(\n        gtcars[[\"mfr\", \"model\", \"hp\", \"trq\", \"msrp\"]].head(5),\n    )\n    .tab_header(\n        title=\"Some Cars from the gtcars Dataset\",\n        subtitle=\"Five Cars are shown here\"\n    )\n    .tab_spanner(\n        label=\"Make and Model\",\n        columns=[\"mfr\", \"model\"],\n        id=\"make_model\"\n    )\n    .tab_spanner(\n        label=\"Performance\",\n        columns=[\"hp\", \"trq\"]\n    )\n    .tab_spanner(\n        label=\"Everything but the cost\",\n        columns=[\"mfr\", \"model\", \"hp\", \"trq\"]\n    )\n    .fmt_integer(columns=[\"hp\", \"trq\"])\n    .fmt_currency(columns=\"msrp\")\n    .tab_source_note(\"Cars are all 2015 models.\")\n    .tab_source_note(\"Horsepower and Torque values are estimates.\")\n    .tab_options(table_width=\"600pt\")\n)\n\nprint(gt_tbl.as_latex())\n```\n\n\nIf you‚Äôd like to experiment with Great Tables‚Äô LaTeX rendering, you can get the text of a working .qmd file in the details below. Make sure your installation of Quarto is up to date and that you have Great Tables upgraded to v0.14.0."
  },
  {
    "objectID": "blog/latex-output-tables/index.html#current-limitations-of-latex-table-output",
    "href": "blog/latex-output-tables/index.html#current-limitations-of-latex-table-output",
    "title": "Great Tables: Generating LaTeX Output for PDF",
    "section": "Current limitations of LaTeX table output",
    "text": "Current limitations of LaTeX table output\nThe as_latex() method is still experimental and has some limitations. The following table lists the work epics that have been done and those planned:\n\n\n\n\n\n\n\n\n  LaTeX Support\n  status\n\n\n\n  \n    Escaping\n    ‚úÖ\n  \n  \n    Most fmt_*() methods\n    ‚úÖ\n  \n  \n    as_latex() table code generation\n    ‚úÖ\n  \n  \n    tab_stub() for row and group labels\n    üöß\n  \n  \n    md() to render Markdown to LaTeX\n    üöß\n  \n  \n    Implementation of Units Notation\n    üöß\n  \n  \n    Allow fmt_markdown(), fmt_units(), fmt_image(), and fmt_nanoplot()\n    üöß\n  \n  \n    sub_missing() and sub_zero() methods\n    üöß\n  \n  \n    tab_style() method\n    üöß\n  \n\n\n\n\n\n\n        \n\n\nSome of these TODOs are short-term, notably the ones dealing with the use of the table stub and row groups. We plan to address this soon but having those structural components in a table currently will raise an error when using as_latex().\nWe don‚Äôt yet see an obvious solution for Markdown-to-LaTeX conversion. We depend on the commonmark library to perform Markdown-to-HTML transformation but the library doesn‚Äôt support LaTeX output.\nStyling a LaTeX table is currently not possible. Having a tab_style() statement in your GT code and subsequently using as_latex() won‚Äôt raise an error, but it will warn and essentially no-op. Many of the options available in tab_options() are those that perform styling\nAs development continues, we will work to expand the capabilities of the as_latex() method to reduce these limitations and more clearly document what is and is not supported."
  },
  {
    "objectID": "blog/latex-output-tables/index.html#lets-latex",
    "href": "blog/latex-output-tables/index.html#lets-latex",
    "title": "Great Tables: Generating LaTeX Output for PDF",
    "section": "Let‚Äôs LaTeX!",
    "text": "Let‚Äôs LaTeX!\nWhile this is an early preview of a new rendering capability in Great Tables, we are optimistic that it can be greatly improved in due course. If you‚Äôre experimenting with this feature, please let us know about any problems you bump into by using the Great Tables issue tracker.\nThe goal is to make LaTeX output dependable, work within several common LaTeX-publishing workflows, and be fully featured enough to make this table-making route in LaTeX preferable to other solutions in this space."
  },
  {
    "objectID": "blog/introduction-0.15.0/index.html",
    "href": "blog/introduction-0.15.0/index.html",
    "title": "Great Tables v0.15.0: Flags, Icons, and Other Formatting Goodies",
    "section": "",
    "text": "The development of Great Tables is really moving along these days. We just released version 0.15.0 and it adds quite a few nice things to the package. The features we‚Äôll highlight in this post are:\n\nadding flag icons with the new fmt_flag() method\npeppering your table cells with Font Awesome icons via fmt_icon()\nsupport for displaying accounting notation with four number-based formatting methods\n\nLet‚Äôs look at each of these in turn!\n\nUsing fmt_flag() to incorporate country flag icons\nWhen tables contain country-level data, having a more visual representation for a country can help the reader more quickly parse the table contents. The new fmt_flag() method makes this easy to accomplish. You just need to have either two-letter country codes or three-letter country codes in a column.\nHere‚Äôs an example where country flags, shown as simplified circular icons, can be added to a table with fmt_flag():\n\nfrom great_tables import GT\nfrom great_tables.data import peeps\nimport polars as pl\n\npeeps_mini = (\n    pl.from_pandas(peeps)\n    .filter(pl.col(\"dob\").str.slice(offset=0, length=4) == \"1988\")\n    .with_columns(name=pl.col(\"name_given\") + \" \" + pl.col(\"name_family\"))\n    .fill_null(value=\"\")\n    .select([\"country\", \"name\", \"address\", \"city\", \"state_prov\", \"postcode\"])\n)\n\n(\n    GT(peeps_mini)\n    .tab_header(title=\"Our Contacts (Born in 1988)\")\n    .fmt_flag(columns=\"country\")\n    .opt_vertical_padding(scale=0.5)\n    .cols_label(\n        country=\"\",\n        name=\"Name\",\n        address=\"Address\",\n        city=\"City\",\n        state_prov=\"State/Prov.\",\n        postcode=\"Zip/Postcode\",\n    )\n)\n\n\n\n\n\n\n  \n    Our Contacts (Born in 1988)\n  \n\n  \n  Name\n  Address\n  City\n  State/Prov.\n  Zip/Postcode\n\n\n\n  \n    United States\n    Martin Bart≈Ønƒõk\n    1850 Valley Lane\n    Austin\n    TX\n    78744\n  \n  \n    Slovenia\n    Feride ≈†ijan\n    Tavcarjeva 58\n    Sodra≈æica\n    \n    1317\n  \n  \n    Slovenia\n    Vejsil Crevar\n    Gosposka ulica 60\n    Novo mesto\n    \n    8501\n  \n  \n    Canada\n    Matilda Bates\n    582 Islington Ave\n    Toronto\n    ON\n    M8V 3B6\n  \n\n\n\n\n\n\n        \n\n\nThis slice of the peeps dataset has country codes in their 3-letter form (i.e., \"USA\", \"SVN\", and \"CAN\") within the country column. So long as they are correct, fmt_flag() will perform the conversion to flag icons. Also, there‚Äôs a little bit of interactivity here: when hovering over a flag, the country name will appear as a tooltip!\nWe have the power to display multiple flag icons within a single cell. To make this happen, the country codes need to be combined in a single string where each code is separated by a comma (e.g., \"US,DE,GB\"). Here‚Äôs an example that uses a portion of the films dataset:\n\nfrom great_tables import GT, google_font\nfrom great_tables.data import films\nimport polars as pl\n\nfilms_mini = (\n    pl.from_pandas(films)\n    .filter(pl.col(\"director\") == \"Michael Haneke\")\n    .with_columns(title=pl.col(\"title\") + \" (\" + pl.col(\"year\").cast(pl.String) + \")\")\n    .select([\"title\", \"run_time\", \"countries_of_origin\"])\n)\n\n(\n    GT(films_mini)\n    .fmt_flag(columns=\"countries_of_origin\")\n    .tab_header(title=\"In Competition Films by Michael Haneke\")\n    .opt_stylize()\n    .tab_options(column_labels_hidden=True)\n    .opt_table_font(font=google_font(\"PT Sans\"))\n)\n\n\n\n\n\n\n  \n    In Competition Films by Michael Haneke\n  \n\n\n\n  \n    Funny Games (1997)\n    1h 48m\n    Austria\n  \n  \n    Code Unknown (2000)\n    1h 58m\n    France Austria Romania Germany\n  \n  \n    The Piano Teacher (2001)\n    2h 11m\n    France Austria Germany\n  \n  \n    Cach√© (2005)\n    1h 57m\n    France Austria Germany Italy\n  \n  \n    The White Ribbon (2009)\n    2h 24m\n    Germany Austria France Italy Canada\n  \n  \n    Amour (2012)\n    2h 7m\n    Austria France Germany\n  \n  \n    Happy End (2017)\n    1h 47m\n    France Austria Germany\n  \n\n\n\n\n\n\n        \n\n\nThe column countries_of_origin has these combined strings for each of the co-production films, where countries are arranged by decreasing level of contribution (e.g., \"FR,AT,RO,DE\" in the second row). The fmt_flag() method parses these strings into a sequence of flag icons that are displayed in the order provided. Each of the flags is separated by a space character but you can always change that default separator with the sep= argument.\n\n\nUsing fmt_icon() to include Font Awesome icons\nThe new fmt_icon() method gives you the ability to easily include Font Awesome icons in a table. It uses a similar input/output scheme as with fmt_flag(): provide the short icon name (e.g., \"table\", \"music\", \"globe\", etc.) or a comma-separated list of them, and fmt_icon() will provide the Font Awesome icon in place. Let‚Äôs see it in action with an example that uses the metro dataset:\n\nfrom great_tables import GT\nfrom great_tables.data import metro\nimport polars as pl\n\nmetro_mini = (\n    pl.from_pandas(metro).tail(10)\n    .with_columns(\n        services = (\n            pl.when(pl.col(\"connect_tramway\").is_not_null())\n            .then(pl.lit(\"train, train-tram\"))\n            .otherwise(pl.lit(\"train\"))\n        )\n    )\n    .select([\"name\", \"services\", \"location\"])\n)\n\n(\n    GT(metro_mini)\n    .tab_header(\"Services Available at Select Stations\")\n    .fmt_icon(columns=\"services\", sep=\" / \")\n    .tab_options(column_labels_hidden=True)\n    .opt_stylize(color=\"green\")\n    .opt_horizontal_padding(scale=3)\n    .opt_align_table_header(align=\"left\")\n)\n\n\n\n\n\n\n  \n    Services Available at Select Stations\n  \n\n\n\n  \n    Porte de Vanves\n       /   \n    Paris 14th\n  \n  \n    Saint-Denis‚ÄîPorte de Paris\n       /   \n    Saint-Denis\n  \n  \n    Saint-Denis‚ÄîUniversit√©\n       /   \n    Saint-Denis\n  \n  \n    Saint-Fran√ßois-Xavier\n      \n    Paris 7th\n  \n  \n    Varenne\n      \n    Paris 7th\n  \n  \n    Biblioth√®que Fran√ßois Mitterrand\n       /   \n    Paris 13th\n  \n  \n    Cour Saint-√âmilion\n      \n    Paris 12th\n  \n  \n    Olympiades\n      \n    Paris 13th\n  \n  \n    Pont Cardinet\n      \n    Paris 17th\n  \n  \n    Saint-Ouen\n      \n    Clichy, Saint-Ouen-sur-Seine\n  \n\n\n\n\n\n\n        \n\n\nIn the code, we added in the icon names \"train\" and \"train-tram\" to the services column, and there could either be just the train icon or the pair that includes the tramway service. We wanted a little separation between the icons in the latter case, so sep=\" / \" was used to place a slash with spacing between any pair of icons. The icons appear here with a black fill color, but that can be changed with the fill_color= argument (and there are several other arguments for controlling style attributes).\nFor a list of available icons, their names, and what they look like, check out this listing on the Font Awesome website. The icons draw from the Font Awesome ‚Äòfree‚Äô set (2000+ icons in total) but are not obtained via the web. Rather, we use the faicons library so that this can be done entirely offline (directly using the SVG icons stored within faicons).\n\n\nAccounting notation in select numeric formatting methods\nFor certain types of tables, it may be preferable to use accounting notation for numerical figures. This type of notation renders negative values in parentheses while omitting the minus sign. This is often seen for monetary and percentage figures but it‚Äôs also sensible for plain numbers in the right context. We‚Äôve added support for accounting notation in four formatting methods:\n\nfmt_number()\nfmt_integer()\nfmt_currency()\nfmt_percent()\n\nHere‚Äôs a comprehensive example table that demonstrates how this type of formatting looks.\n\n\nShow the code\nfrom great_tables import GT\nimport polars as pl\n\ndf = pl.DataFrame({\n    \"number_type\": [\"negative\", \"postive\"],\n    \"number\": [-1.2, 23.6],\n    \"integer\": [-2323, 23213],\n    \"currency\": [-24334.23, 7323.253],\n    \"percent\": [-0.0523, 0.363]\n    }\n).with_columns(\n    number_acc = pl.col(\"number\"),\n    integer_acc = pl.col(\"integer\"),\n    currency_acc = pl.col(\"currency\"),\n    percent_acc = pl.col(\"percent\")\n)\n\n(\n    GT(df, rowname_col=\"number_type\")\n    .fmt_number(columns=\"number\")\n    .fmt_percent(columns=\"percent\")\n    .fmt_integer(columns=\"integer\")\n    .fmt_currency(columns=\"currency\")\n    .fmt_number(columns=\"number_acc\", accounting=True)\n    .fmt_percent(columns=\"percent_acc\", accounting=True)\n    .fmt_integer(columns=\"integer_acc\", accounting=True)\n    .fmt_currency(columns=\"currency_acc\", accounting=True)\n    .tab_spanner(label=\"default formatting\", columns=[1, 2, 3, 4])\n    .tab_spanner(label=\"with accounting notation\", columns=[5, 6, 7, 8])\n    .cols_label(\n        number_acc=\"number\",\n        integer_acc=\"integer\",\n        currency_acc=\"currency\",\n        percent_acc=\"percent\"\n    )\n)\n\n\n\n\n\n\n\n\n  \n  \n    default formatting\n  \n  \n    with accounting notation\n  \n\n\n  number\n  integer\n  currency\n  percent\n  number\n  integer\n  currency\n  percent\n\n\n\n  \n    negative\n    ‚àí1.20\n    ‚àí2,323\n    ‚àí$24,334.23\n    ‚àí5.23%\n    (1.20)\n    (2,323)\n    ($24,334.23)\n    (5.23%)\n  \n  \n    postive\n    23.60\n    23,213\n    $7,323.25\n    36.30%\n    23.60\n    23,213\n    $7,323.25\n    36.30%\n  \n\n\n\n\n\n\n        \n\n\nFor the formatting in the final four columns, we use accounting=True to get the values into accounting notation. This is only apparent for the negative values (first row) as the positive values won‚Äôt change their appearance, looking the same as they do when accounting=False (the default).\n\n\nAcknowledgements and how to contact us\nWe are very grateful for the work that Jerry Wu has done during this release, some of which includes:\n\nenhancing the fmt_image() to support http/https schema in the columns= parameter, and writing an incredible blog post about incorporating images in your tables\nimproving the save() method, giving it the ability to perform intermediate saves (since the method returns itself)\nadding the pipe() method, which operates similarly to that of the Pandas and Polars APIs\nall sorts of little QoL fixes\n\nWe extend our gratitude also to Alessandro Molina for adding experimental support for pyarrow.Table inputs in this release.\nFinally, we thank Luke Manley and Guillaume Lemaitre for their first contributions to the project!\nWe‚Äôre always happy to get feedback. There are three good ways to talk to us:\n\nGitHub Issues\nGitHub Discussions\nDiscord\n\nDon‚Äôt be shy. We love talking tables (and how we can make them better)!"
  },
  {
    "objectID": "blog/design-philosophy/index.html",
    "href": "blog/design-philosophy/index.html",
    "title": "The Design Philosophy of Great Tables",
    "section": "",
    "text": "We‚Äôve spent a lot of time thinking about tables. Tables‚Äîlike plots‚Äîare crucial as a last step toward presenting information. There is surprising sophistication and nuance in designing effective tables. Over the past 5,000 years, they‚Äôve evolved from simple grids to highly structured displays of data. Although we argue that the mid-1900s served as a high point, the popularization and wider accessibility of computing seemingly brought us back to the simple, ancient times.\nOkay, it‚Äôs not all that bad but the workers of data are today confronted with an all-too-familiar dilemma: copy your data into a tool like Excel to make the table, or, display an otherwise unpolished table. Through the exploration of the qualities that make tables shine, the backstory of tables as a display of data, and the issues faced today, it‚Äôs clear how we can solve the great table dilemma with Great Tables.\nTables made with computers (left to right): (1) a DataFrame printed at the console, (2) an Excel table, and (3) a Great Tables table."
  },
  {
    "objectID": "blog/design-philosophy/index.html#footnotes",
    "href": "blog/design-philosophy/index.html#footnotes",
    "title": "The Design Philosophy of Great Tables",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTaylor, B. (2021). Lunar timekeeping in Upper Paleolithic Cave Art. PRAEHISTORIA New Series, 3(13), 215‚Äì232.‚Ü©Ô∏é\nDuke, D. W. (2002). Hipparchus‚Äô Coordinate System. Archive for History of Exact Sciences, 56(5), 427-433.‚Ü©Ô∏é\nhttps://en.wikipedia.org/wiki/Geography_(Ptolemy)‚Ü©Ô∏é\nPalet, J. M. and Orengo, H. A., The Roman Centuriated Landscape: Conception, Genesis, and Development as Inferred from the Ager Tarraconensis Case. American Journal of Archaeology, 115(3), 383-402.‚Ü©Ô∏é\nMarchese, F. T., Exploring the Origins of Tables for Information Visualization. Proceedings of the 2011 15th International Conference on Information Visualisation, 13-15 July 2011, doi:10.1109/IV.2011.36.‚Ü©Ô∏é\nM. W. Green, The construction and implementation of the cuneiform writing system, Visible Writing, 15, 1981, 345-72.‚Ü©Ô∏é\nRobson, E., ‚ÄúTables and tabular formatting in Sumer, Babylonia, and Assyria, 2500-50 BCE‚Äù in M. Campbell-Kelly, M. Croarken, R.G. Flood, and E. Robson (eds.), The History of Mathematical Tables from Sumer to Spreadsheets. Oxford: Oxford University Press, 2003, 18‚Äì47.‚Ü©Ô∏é\nhttps://site.xavier.edu/polt/typewriters/varityper.html‚Ü©Ô∏é\nManual of Tabular Presentation: An Outline of Theory and Practice in the Presentation of Statistical Data in Tables for Publication. United States. Bureau of the Census. U.S. Government Printing Office, 1949. Resource available at: https://www2.census.gov/library/publications/1949/general/tabular-presentation.pdf.‚Ü©Ô∏é"
  },
  {
    "objectID": "blog/pycon-2024-great-tables-are-possible/index.html",
    "href": "blog/pycon-2024-great-tables-are-possible/index.html",
    "title": "PyCon 2024: Making Beautiful, Publication Quality Tables is Possible in 2024",
    "section": "",
    "text": "The Great Tables crew is excited to share that we‚Äôll be presenting on tables at PyCon 2024! If you‚Äôre around and want to meet, be sure to stop by the Posit Booth, or reach out on linkedin to Rich or Michael!\nThe talk, Making Beautiful, Publication Quality Tables is Possible in 2024 happened on May 17, 2024. You can watch the recording on YouTube.\nIn addition to the talk, there are two other events worth mentioning:"
  },
  {
    "objectID": "blog/pycon-2024-great-tables-are-possible/index.html#whats-the-presentation-about",
    "href": "blog/pycon-2024-great-tables-are-possible/index.html#whats-the-presentation-about",
    "title": "PyCon 2024: Making Beautiful, Publication Quality Tables is Possible in 2024",
    "section": "What‚Äôs the presentation about?",
    "text": "What‚Äôs the presentation about?\nPublication quality tables are a critical form of data visualization, that is easy to miss in favor of charts and graphs. We‚Äôre excited to focus on how‚Ä¶\n\ntables are used in areas like sports and medicine.\nGreat Tables provides a systematic approach to structuring, styling, and formatting tables.\nnanoplots combine the trend-emphasizing of graphs with the compactness of a table.\n\nThroughout the presentation, we‚Äôll focus on making this example from a fictitious coffee device shop (notebook):\n\n\n\n\n\n\n\nSales of Coffee Equipment\n\n\n\n\n\n\n\nProduct\n\n\nRevenue\n\n\nProfit\n\n\nMonthly Sales\n\n\n\n\nAmount\n\n\nPercent\n\n\nAmount\n\n\nPercent\n\n\n\n\n\n\n\n\nGrinder\n\n\n$904K\n\n\n3%\n\n\n$568K\n\n\n4%\n\n\n\n\n\n\n7650521494596613667748765686607594568751\n\n\n\n\n\n\n\n\n\nMoka pot\n\n\n$2.05M\n\n\n7%\n\n\n$181K\n\n\n1%\n\n\n\n\n\n\n6.87K04.73K4.74K4.79K5.51K6.16K6.62K6.87K6.03K5.30K4.88K4.65K6.28K\n\n\n\n\n\n\n\n\n\nCold brew\n\n\n$289K\n\n\n1%\n\n\n$242K\n\n\n2%\n\n\n\n\n\n\n2.70K02442494389811.77K2.70K2.61K2.35K1.74K896499244\n\n\n\n\n\n\n\n\n\nFilter\n\n\n$404K\n\n\n1%\n\n\n$70.0K\n\n\n0%\n\n\n\n\n\n\n2.74K02.07K1.81K1.84K2.12K2.25K2.63K2.56K2.37K2.16K2.19K2.07K2.74K\n\n\n\n\n\n\n\n\n\nDrip machine\n\n\n$2.63M\n\n\n9%\n\n\n$1.37M\n\n\n9%\n\n\n\n\n\n\n2.58K02.14K1.62K1.97K2.10K2.58K2.46K2.34K2.32K2.05K1.97K1.84K2.33K\n\n\n\n\n\n\n\n\n\nAeroPress\n\n\n$2.60M\n\n\n9%\n\n\n$1.29M\n\n\n9%\n\n\n\n\n\n\n9.27K06.33K5.20K6.37K7.02K7.91K8.70K8.69K7.80K6.83K6.96K6.88K9.27K\n\n\n\n\n\n\n\n\n\nPour over\n\n\n$846K\n\n\n3%\n\n\n$365K\n\n\n2%\n\n\n\n\n\n\n2.18K01.56K1.29K1.51K1.69K1.94K2.18K2.14K1.86K1.72K1.81K1.60K2.16K\n\n\n\n\n\n\n\n\n\nFrench press\n\n\n$1.11M\n\n\n4%\n\n\n$748K\n\n\n5%\n\n\n\n\n\n\n4.82K03.51K2.88K3.35K3.79K3.90K4.10K4.18K4.43K3.28K3.42K3.30K4.82K\n\n\n\n\n\n\n\n\n\nCezve\n\n\n$2.51M\n\n\n9%\n\n\n$1.97M\n\n\n13%\n\n\n\n\n\n\n17.1K012.2K11.5K11.8K13.6K15.4K16.5K17.1K14.4K13.0K12.9K11.6K15.9K\n\n\n\n\n\n\n\n\n\nChemex\n\n\n$3.14M\n\n\n11%\n\n\n$818K\n\n\n6%\n\n\n\n\n\n\n7.22K04.94K4.17K5.24K6.00K6.36K6.77K7.11K6.25K5.60K6.08K4.98K7.22K\n\n\n\n\n\n\n\n\n\nScale\n\n\n$3.80M\n\n\n13%\n\n\n$2.91M\n\n\n20%\n\n\n\n\n\n\n3.18K01.54K1.57K1.68K2.03K2.42K2.55K2.57K2.23K2.04K2.09K1.69K3.18K\n\n\n\n\n\n\n\n\n\nKettle\n\n\n$756K\n\n\n3%\n\n\n$618K\n\n\n4%\n\n\n\n\n\n\n1.53K01.14K1.02K1.09K1.13K1.41K1.48K1.46K1.30K1.14K1.23K1.19K1.53K\n\n\n\n\n\n\n\n\n\nEspresso Machine\n\n\n$8.41M\n\n\n29%\n\n\n$3.64M\n\n\n25%\n\n\n\n\n\n\n2.58K06868406185982.15K5337979961.00K6688582.58K\n\n\n\n\n\n\n\n\nTotal\n\n\n$29.4M\n\n\n100%\n\n\n$14.8M\n\n\n100%\n\n\n\n\n\n\n\n\nEach row of this table is a product sold over the past year (with a total at the bottom).\nNote three important pieces:\n\nIcons help people quickly identify products of interest.\nBackground color distinguishes between revenue and profit measures.\nThe nanoplot on the right shows a tiny bargraph for monthly sales over the past year. This makes it easy to spot trends, and can be hovered over to get exact values.\n\nCritically, the code for this table used the DataFrame library Polars, which makes it really easy to select rows and columns for styling."
  },
  {
    "objectID": "blog/pycon-2024-great-tables-are-possible/index.html#whats-next",
    "href": "blog/pycon-2024-great-tables-are-possible/index.html#whats-next",
    "title": "PyCon 2024: Making Beautiful, Publication Quality Tables is Possible in 2024",
    "section": "What‚Äôs next?",
    "text": "What‚Äôs next?\n\nThe 2024 Table Contest\nThe world‚Äôs premier display table contest‚Äîthe 4th annual Table Contest draws competitors from near and far, to showcase the latest and greatest examples in table presentation.\nThe contest was a great success! On July 1, 2024 we announced the 2024 winners and honorable mentions. Check ‚Äôem out!\n\n\nposit::conf() workshop\nWe held a posit::conf() 2024 workshop, and you can find the materials at the Making Tables with gt and Great Tables repo.\nIf you‚Äôre curious about making beautiful, publication quality tables in Python or R, do have a look at the resources at that GitHub repository.\nWe covered the following table topics:\n\nCreate table components and put them together (e.g., header, footer, stub, etc.)\nFormat cell values (numeric/scientific, date/datetime, etc.)\nRearranging columns and handling column value alignments\nStyling the table, either through data values or on a more granular level\nAdding icons, plots, images, and incorporating your own HTML\nand more!"
  },
  {
    "objectID": "blog/pycon-2024-great-tables-are-possible/index.html#extra-resources",
    "href": "blog/pycon-2024-great-tables-are-possible/index.html#extra-resources",
    "title": "PyCon 2024: Making Beautiful, Publication Quality Tables is Possible in 2024",
    "section": "Extra resources",
    "text": "Extra resources\nCheck out these resources to learn more about the wild and beautiful life of display tables:\n\nGreat Tables example gallery\nThe Design Philosophy of Great Tables (blog post)\n20 Minute Table Tutorial by Albert Rapp\nPyCon talk: Making Beautiful, Publication Quality Tables is Possible in 2024"
  },
  {
    "objectID": "blog/pycon-2024-great-tables-are-possible/index.html#hope-all-your-tables-are-great",
    "href": "blog/pycon-2024-great-tables-are-possible/index.html#hope-all-your-tables-are-great",
    "title": "PyCon 2024: Making Beautiful, Publication Quality Tables is Possible in 2024",
    "section": "Hope all your tables are great!",
    "text": "Hope all your tables are great!\nA huge thanks to all the people who have contributed to Great Tables over the past year. It‚Äôs been a really incredible journey!"
  },
  {
    "objectID": "blog/polars-dot-style/index.html",
    "href": "blog/polars-dot-style/index.html",
    "title": "Great Tables: Becoming the Polars .style Property",
    "section": "",
    "text": "Roughly a year ago, the DataFrame library Polars made its v1.0.0 release. One neat feature included in the release was a DataFrame.style property‚Äîwhich returns a Great Tables object, so you can add things like titles, column labels, and highlighting for reporting.\nWhen talking about the Polars integration, people are often surprised to hear it happened when Great Tables was only 8 months old. Moreover, the whole process of how open source maintainers chat and discuss teaming up can feel shrouded in mystery.\nIn this post, I want to take some time to discuss how folks in the Polars and Great Tables communities got to DataFrame.style. There are three big pieces:"
  },
  {
    "objectID": "blog/polars-dot-style/index.html#how-we-got-there",
    "href": "blog/polars-dot-style/index.html#how-we-got-there",
    "title": "Great Tables: Becoming the Polars .style Property",
    "section": "How we got there",
    "text": "How we got there\n\nFirst contact: Polars discord\nRoughly a year ago, Rich Iannone and I (Michael Chow) started working together on Great Tables‚Äîa Python library for creating display tables. Initially, Great Tables only supported Pandas, but this made a few things difficult. For example, selecting columns and applying conditional styles took a surprising amount of code.\nAs an experiment, we added support for Polars, and wrote a post called Great Tables: The Polars DataFrame Styler of Your Dreams.\nCurious in what folks thought, we dropped it in the Polars discord, and got some Great Feedback:\n\nBut Ritchie Vink, the creator of Polars, knew we were harboring a shameful Pandas dependency secret:\n\nIt‚Äôs true, we had baked Pandas in as a dependency. We were just kids back then when starting Great Tables. We didn‚Äôt realize that the world was moving to DataFrame agnostic support üòì.\nBut the more we used Polars with Great Tables, the happier we were. So we made some architectural tweaks to make Great Tables BYODF (Bring Your Own DataFrame). With these changes, Polars users could install and use Great Tables without pulling in an unnecessary dependency on another DataFrame library (Pandas).\nThese interactions were critical early on for co-designing Great Tables with Polars in mind. But the real magic for us was when Polars users started opening PRs on Great Tables, to make sure we got things right. Chief among them, Jerry Wu!\n\n\nJerry Wu: power contributor\nLuckily, members of the Polars community, like Jerry Wu (jrycw), showed up to make sure we wired up to Polars correctly, and to weigh in on how Polars should be used.\nFor example, Jerry‚Äôs first PR was ensuring we handled a Polars deprecation correctly.\n\nI really can‚Äôt overstate how much we appreciate his help, and how critical it has been in ensuring we get the details right.\nIn addition to his PRs, Jerry has done really Great Work sharing about table display. The most interesting example of this to me is that he discovered that Polars, Great Tables, and FastHTML work well together.\n\nRich and I had no idea that was possible, and the FastHTML folks ended up adapting his example into an entry on their gallery. Jerry is constantly teaching us about what Great Tables can do.\n\n\nGrowing up: making the case for .style\nWith so much joy coming out of the Polars integration, and support from folks in the Polars community, we started to wonder: how could Great Tables make Polars a first-class citizen?\nThis ultimately boiled down to asking: what would it take for the polars.DataFrame.style property to return a Great Tables object?\nAfter some discussion on discord, the big pieces folks needed were some sense that Great Tables used a reasonable approach to table styling, carried few dependencies, and was engineered such that it could be returned from a DataFrame.style property. Ultimately, the next few months were spent getting Great Tables up to snuff, and the Polars PR merged."
  },
  {
    "objectID": "blog/polars-dot-style/index.html#making-.style-work",
    "href": "blog/polars-dot-style/index.html#making-.style-work",
    "title": "Great Tables: Becoming the Polars .style Property",
    "section": "Making .style work",
    "text": "Making .style work\nThe PR to implement .style in Polars went super quick, from advice on discord April to merged by June. A huge force behind the PR was Marco Gorelli, who encouraged us through the process!\nIn this section I‚Äôll look at how we addressed the 3 big requirements behind making a strong case for .DataFrame.style returning a Great Tables object:\n\nDesign Credibility: It‚Äôs clear Great Tables is reasonably thought out.\nWorking with Polars selectors: It integrates well with pieces like Polars selectors.\nTechnical: Great Tables can be returned from a DataFrame.style property.\n\n\nDesign credibility\nOur biggest hurdle was that the Great Tables library was less than a year old. However, this youthful appearance is a bit misleading, because Great Tables builds on decades of table design and tooling. For example, Rich‚Äôs version of Great Tables in R, called gt, has been around since 2019 (see his rstudio::conf() talk).\nMy favorite aspect of gt is that the community ran table contests every year. The contests don‚Äôt even require the use of gt or Great Tables, just a zest for the art of table styling. The 2024 Table Contest had around 60 submissions, and is something we often draw on for inspiration.\nFor more on the long history of table design, see The Design Philosophy of Great Tables, or this Fred Hutch better tables workshop.\n\n\nWorking with Polars selectors\nOne important task was sorting out how we use Polars selectors, to ensure they didn‚Äôt break down the road.\nFor example, Great Tables allows Polars selectors to set styles on specific columns data. However, one challenge we ran into was figuring out what Polars considers an expression versus a selector. Essentially, selectors choose columns, but expressions represent operations on the data itself.\nThe code below shows cases where the .exclude() results in expressions or selectors.\n\nimport polars as pl\nimport polars.selectors as cs\n\n# selector: all columns except \"a\"\ncs.exclude(\"a\")\n\n# expression: same columns as above ¬Ø\\_(„ÉÑ)_/¬Ø\ncs.all().exclude(\"a\")\n\nAfter discussing with Polars folks in this Polars issue, we landed on 4 rules for selectors:\n\n\n\n\n\n\n\n\nrule\ndescription\nexample\n\n\n\n\ncs functions\ntop-level cs selection functions -&gt; selector\ncs.starts_with(\"a\")\n\n\ninfix selectors\ninfix operators over all selectors -&gt; selector\ncs.starts_with(\"a\") - cs.by_name(\"abc\")\n\n\ninfix expressions\ninfix operators over any non-selectors -&gt; expression\ncs.starts_with(\"a\") - \"abc\"\n\n\nmethod expressions\nmethod calls off selectors -&gt; expression\ncs.all().exclude(\"a\")\n\n\n\nClarifying this was critical in Great Tables, because in some place we only accept selectors, so we needed to be able to articulate to users how to produce them.\n\n\nTechnical wiring work\nThe last hurdle was tweaking the great_tables.GT class to fit the flow of DataFrame.style. For example, here is what creating a GT() object looked like before and after .style:\n\nBefore: GT(my_data, id=\"my-table\")\nAfter: my_data.style.with_id(\"my-table\")\n\nNotice that before, the GT(id=...) argument could set the html id for a table. However, DataFrame.style is a property that can‚Äôt take arguments, so we needed methods like with_id() to set these kinds of options.\nHere‚Äôs a full code example, in case you want to see it in action.\n\nimport polars as pl\nfrom great_tables import GT\nfrom great_tables import exibble\n\n# create a GT object ----\nGT(exibble, id=\"my-table\")\n\n# create GT object via .style property ----\npl.DataFrame(exibble).style\n\n\n\n\n\n\n\n  num\n  char\n  fctr\n  date\n  time\n  datetime\n  currency\n  row\n  group\n\n\n\n  \n    0.1111\n    apricot\n    one\n    2015-01-15\n    13:35\n    2018-01-01 02:22\n    49.95\n    row_1\n    grp_a\n  \n  \n    2.222\n    banana\n    two\n    2015-02-15\n    14:40\n    2018-02-02 14:33\n    17.95\n    row_2\n    grp_a\n  \n  \n    33.33\n    coconut\n    three\n    2015-03-15\n    15:45\n    2018-03-03 03:44\n    1.39\n    row_3\n    grp_a\n  \n  \n    444.4\n    durian\n    four\n    2015-04-15\n    16:50\n    2018-04-04 15:55\n    65100.0\n    row_4\n    grp_a\n  \n  \n    5550.0\n    None\n    five\n    2015-05-15\n    17:55\n    2018-05-05 04:00\n    1325.81\n    row_5\n    grp_b\n  \n  \n    None\n    fig\n    six\n    2015-06-15\n    None\n    2018-06-06 16:11\n    13.255\n    row_6\n    grp_b\n  \n  \n    777000.0\n    grapefruit\n    seven\n    None\n    19:10\n    2018-07-07 05:22\n    None\n    row_7\n    grp_b\n  \n  \n    8880000.0\n    honeydew\n    eight\n    2015-08-15\n    20:20\n    None\n    0.44\n    row_8\n    grp_b\n  \n\n\n\n\n\n\n        \n\n\nThe DataFrame.style property is special, in that you don‚Äôt pass any parameters to it. The motivation for this in Polars is that it matches the Pandas pandas.DataFrame.style approach, so provides a familiar interface for users coming from that package. It also matches the DataFrame.plot flow of both packages.\nAs it turns out, allowing every options settable in the GT() constructor to be set somewhere else was not something anticipated in the design of Great Tables. But after some light architectural wrestling, we introduced .tab_stub(), .with_id(), and .with_locale() to capture arguments you might pass to GT()."
  },
  {
    "objectID": "blog/polars-dot-style/index.html#whats-next",
    "href": "blog/polars-dot-style/index.html#whats-next",
    "title": "Great Tables: Becoming the Polars .style Property",
    "section": "What‚Äôs next?",
    "text": "What‚Äôs next?\nCurrently, we‚Äôre really excited about using Great Tables in different ways!\n\nPointblank: validate your DataFrames and database tables. Pointblank is quick to fire up and produces delightfully styled reports (using Great Tables üòé).\nreactable: create interactive tables. We want to use reactable to render a Great Tables object interactively.\n\nWe‚Äôre also focused on keeping bug fixes and features cooking in Great Tables. If there‚Äôs anything in particular you‚Äôre looking for, definitely reach out on the Great Tables discussion page."
  },
  {
    "objectID": "blog/polars-dot-style/index.html#in-conclusion",
    "href": "blog/polars-dot-style/index.html#in-conclusion",
    "title": "Great Tables: Becoming the Polars .style Property",
    "section": "In conclusion",
    "text": "In conclusion\nThis post looked at how interacting with the Polars community discord shaped Great Tables development early on, and how community members like Jerry ended up ensuring Great Tables and Polars played well together. We ended up putting a ring on it, and ensuring Great Tables design, dependencies, and architecture worked well enough to justify returning via polars.DataFrame.style. (Though this is still marked unstable in Polars!)\nWe‚Äôre excited to look at different use cases for Great Tables (and table styling in general) over the next year!"
  },
  {
    "objectID": "blog/bring-your-own-df/index.html",
    "href": "blog/bring-your-own-df/index.html",
    "title": "Great Tables is now BYODF (Bring Your Own DataFrame)",
    "section": "",
    "text": "A few months ago, we released a blog post about how much we loved the combination of Polars and Great Tables. We found that Polars lazy expression system opened up convenient ways to conditionally format tables for presentation. However, excited as we were, we were harboring a shameful secret: Great Tables enabled Polars as an optional dependency, but had a hard dependency on the alternative DataFrame library Pandas.\nWe‚Äôre happy to share that Great Tables v0.5.0 makes Pandas an optional dependency. Using Pandas DataFrames as inputs is still fully supported. The optional dependency simply allows users of one DataFrame library to not have to install the other.\nIn this post, I‚Äôll cover three important pieces:\nThis may seem over the top, but many DataFrame implementations exist in the Python world. Enabling folks to BYODF (Bring Your Own DataFrame) is a tricky, rewarding challenge!"
  },
  {
    "objectID": "blog/bring-your-own-df/index.html#the-state-of-great-tables-dependencies",
    "href": "blog/bring-your-own-df/index.html#the-state-of-great-tables-dependencies",
    "title": "Great Tables is now BYODF (Bring Your Own DataFrame)",
    "section": "The state of Great Tables dependencies",
    "text": "The state of Great Tables dependencies\nCurrently, Great Tables has two ‚Äúsizes‚Äù of libraries it depends on:\n\nSmall: utility libraries for things like datetime localization.\nBig: a lingering dependency on numpy in a few places (like nanoplots).\n\nFor small utilities, we depend on Babel, which makes it easier to say things like, ‚Äúformat this number as if I‚Äôm in Germany‚Äù.\nFor big dependencies, numpy should be fairly straightforward to remove (see this issue). We also still rely on Pandas for datasets in great_tables.data, but we will remove it soon (see this issue).\nRemoving dependencies like numpy and Pandas helps people who are in restricted computing environments, want a more lightweight install, or who are stuck depending on a much earlier version of a package. It also helps us keep a clean separation of concerns. Without clear boundaries, it‚Äôs too tempting to reach for things like pd.isna() in a pinch, or smear library specific versions of missingness across our code (e.g.¬†pd.NA, np.nan, polars.NullType)."
  },
  {
    "objectID": "blog/bring-your-own-df/index.html#the-challenge-of-removing-hard-dependencies",
    "href": "blog/bring-your-own-df/index.html#the-challenge-of-removing-hard-dependencies",
    "title": "Great Tables is now BYODF (Bring Your Own DataFrame)",
    "section": "The challenge of removing hard dependencies",
    "text": "The challenge of removing hard dependencies\nRemoving hard dependencies on DataFrame libraries is worthwhile, but requires special handling for all DataFrame specific actions. To illustrate consider the Great Tables output below, which is produced from a Pandas DataFrame:\n\nimport pandas as pd\nimport polars as pl\nfrom great_tables import GT\n\ndf_pandas = pd.DataFrame({\"x\": [\"a\", \"b\"], \"y\": [1.01, 2.0]})\ndf_polars = pl.from_pandas(df_pandas)\n\nGT(df_pandas)\n\n\n\n\n\n\n\n  x\n  y\n\n\n\n  \n    a\n    1.01\n  \n  \n    b\n    2.0\n  \n\n\n\n\n\n\n        \n\n\nProducing this table includes two actions on the DataFrame:\n\nGet column names: these are used for column labels (and other things).\nGet column types: these are used for alignment (e.g.¬†numeric column is right aligned).\n\nWhile these actions may seem simple, they require different methods for different DataFrame implementations. In this post, we‚Äôll focus specifically on the challenge of getting column names.\n\nGetting column names\nThe code below shows the different methods required to get column names as a list from Pandas and Polars.\n\ndf_pandas.columns.tolist()  # pandas\ndf_polars.columns           # polars\n\n['x', 'y']\n\n\nNotice that the two lines of code aren‚Äôt too different‚ÄîPandas just requires an extra .tolist() piece. We could create a special function, that returns a list of names, depending on the type of the input DataFrame.\n\ndef get_column_names(data) -&gt; list[str]:\n\n    # pandas specific ----\n    if isinstance(data, pd.DataFrame):\n        return data.columns.tolist()\n\n    # polars specific ----\n    elif isinstance(data, pl.DataFrame):\n        return data.columns\n\n    raise TypeError(f\"Unsupported type {type(data)}\")\n\nThe function works great, in that we can call it on either DataFrame, but it lacks two things. The first is dependency inversion, since it requires importing both Pandas and Polars (creating a hard dependency). The second is separation of concerns, since Pandas and Polars code is mixed together. In this case adding more DataFrame implementations would create a hot stew of logic."
  },
  {
    "objectID": "blog/bring-your-own-df/index.html#how-we-made-pandas-optional",
    "href": "blog/bring-your-own-df/index.html#how-we-made-pandas-optional",
    "title": "Great Tables is now BYODF (Bring Your Own DataFrame)",
    "section": "How we made Pandas optional",
    "text": "How we made Pandas optional\nWe were able to make Pandas optional in a sane manner through two moves:\n\ndatabackend: perform isinstance checks without importing anything.\nsingledispatch: split out functions like get_column_names() into DataFrame specific versions.\n\n\nInverting dependency with databackend\nInverting dependency on DataFrame libraries means that we check whether something is a specific type of DataFrame, without using imports. This is done through the package databackend, which we copied into Great Tables.\nIt works by creating placeholder classes, which stand in for the DataFrames they‚Äôre detecting:\n\nfrom great_tables._databackend import AbstractBackend\n\n\nclass PdDataFrame(AbstractBackend):\n    _backends = [(\"pandas\", \"DataFrame\")]\n\n\nclass PlDataFrame(AbstractBackend):\n    _backends = [(\"polars\", \"DataFrame\")]\n\n\nif isinstance(df_pandas, PdDataFrame):\n    print(\"I'm a pandas DataFrame!!!\")\n\nI'm a pandas DataFrame!!!\n\n\nNote that the PdDataFrame above is able to detect a Pandas DataFrame without importing Pandas, by taking advantage of a bit of logic called a counterfactual:\n\nassumption: if df_pandas is a Pandas DataFrame, then Pandas has been imported.\ncounterfactual: if Pandas has not been imported, then df_pandas is not a Pandas DataFrame.\n\nThis lets it quickly rule out a potential Pandas object by checking whether Pandas has been imported. Since this can be done by looking inside sys.modules, no imports are required. For more on this approach, see the databackend README.\n\n\nSeparating concerns with singledispatch\nWhile databackend removes dependencies, the use of singledispatch from the built-in functools module separates out the logic for handling Polars DataFrames from the logic for Pandas DataFrames. This makes it easier to think one DataFrame at a time, and also gets us better type hinting.\nHere‚Äôs a basic example, showing the get_column_names() function re-written using singledispatch:\n\nfrom functools import singledispatch\n\n\n# define the generic function ----\n#\n@singledispatch\ndef get_column_names(data) -&gt; list[str]:\n    raise TypeError(f\"Unsupported type {type(data)}\")\n\n\n# register a pandas implementation on it ----\n#\n@get_column_names.register\ndef _(data: PdDataFrame):\n    return data.columns.tolist()\n\n\n# register a polars implementation on it ----\n#\n@get_column_names.register\ndef _(data: PlDataFrame):\n    return data.columns\n\nNote three important pieces:\n\nThe initial @singledispatch decorates def get_column_names(...). This creates a special ‚Äúgeneric function‚Äù, which can define DataFrame specific implementations.\n@get_column_names.register implements the Pandas DataFrame.\nThe use of PdDataFrame is what signifies ‚Äúrun this for Pandas DataFrames‚Äù.\n\nWith the get_column_names implementations defined, we can call it like a normal function:\n\nget_column_names(df_pandas)  # pandas version\nget_column_names(df_polars)  # polars version\n\n['x', 'y']\n\n\nFor more on the benefits of singledispatch in data tooling, see the blog post Single Dispatch for Data Science Tools. For the nitty gritty on our DataFrame processing, see the Great Tables _tbl_data.py submodule."
  },
  {
    "objectID": "blog/bring-your-own-df/index.html#see-you-in-the-polarsverse",
    "href": "blog/bring-your-own-df/index.html#see-you-in-the-polarsverse",
    "title": "Great Tables is now BYODF (Bring Your Own DataFrame)",
    "section": "See you in the Polarsverse",
    "text": "See you in the Polarsverse\nThis was a long diversion into the strategy behind supporting both Pandas and Polars, but the results are worth it. Users are able to bring their DataFrame of choice without the collective baggage of every DataFrame option.\nFor more on the special things you can do with Polars expressions, see these resources:\n\nGuide: basic styling using Polars expressions\nPost: Great Tables, the Polars DataFrame Styler of Your Dreams\nThe narwhals library: a neat library for running Polars expressions on Pandas DataFrames.\n\nHope you make some stylish, publication ready tables!"
  },
  {
    "objectID": "blog/rendering-images/index.html",
    "href": "blog/rendering-images/index.html",
    "title": "Rendering images anywhere in Great Tables",
    "section": "",
    "text": "Rendering images in Great Tables is straightforward with GT.fmt_image() and vals.fmt_image(). In this post, we‚Äôll explore three key topics:"
  },
  {
    "objectID": "blog/rendering-images/index.html#rendering-images-in-the-body",
    "href": "blog/rendering-images/index.html#rendering-images-in-the-body",
    "title": "Rendering images anywhere in Great Tables",
    "section": "Rendering Images in the Body",
    "text": "Rendering Images in the Body\nGT.fmt_image() is the go-to tool for rendering images within the body of a table. Below, we‚Äôll present four examples corresponding to the cases outlined in the documentation:\n\nCase 1: Local file paths.\nCase 2: Full HTTP/HTTPS URLs.\nCase 3: Image names with the path= argument.\nCase 4: Image names using both the path= and file_pattern= arguments.\n\n\n\n\n\n\n\nFinding the Right Case for Your Needs\n\n\n\n\n\n\nCase 1 and Case 2 work best for data sourced directly from a database.\nCase 3 is ideal for users dealing with image names relative to a base directory or URL (e.g., /path/to/images).\nCase 4 is tailored for users working with patterned image names (e.g., metro_{}.svg).\n\n\n\n\n\nPreparations\nFor this demonstration, we‚Äôll use the first five rows of the built-in metro dataset, specifically the name and lines columns.\nTo ensure a smooth walkthrough, we‚Äôll manipulate the data (a Python dictionary) directly. However, in real-world applications, such operations are more likely performed at the DataFrame level to leverage the benefits of vectorized operations.\n\n\nShow the Code\nimport pandas as pd\nfrom great_tables import GT, vals, html\nfrom importlib_resources import files\n\npd.set_option('display.max_colwidth', 150)\n\ndata = {\n    \"name\": [\n        \"Argentine\",\n        \"Bastille\",\n        \"B√©rault\",\n        \"Champs-√âlys√©es‚ÄîClemenceau\",\n        \"Charles de Gaulle‚Äî√âtoile\",\n    ],\n    \"lines\": [\"1\", \"1, 5, 8\", \"1\", \"1, 13\", \"1, 2, 6\"],\n}\n\nprint(\"\"\"\\\ndata = {\n    \"name\": [\n        \"Argentine\",\n        \"Bastille\",\n        \"B√©rault\",\n        \"Champs-√âlys√©es‚ÄîClemenceau\",\n        \"Charles de Gaulle‚Äî√âtoile\",\n    ],\n    \"lines\": [\"1\", \"1, 5, 8\", \"1\", \"1, 13\", \"1, 2, 6\"],\n}\\\n\"\"\")\n\n\ndata = {\n    \"name\": [\n        \"Argentine\",\n        \"Bastille\",\n        \"B√©rault\",\n        \"Champs-√âlys√©es‚ÄîClemenceau\",\n        \"Charles de Gaulle‚Äî√âtoile\",\n    ],\n    \"lines\": [\"1\", \"1, 5, 8\", \"1\", \"1, 13\", \"1, 2, 6\"],\n}\n\n\nAttentive readers may have noticed that the values for the key lines are lists of strings, each containing one or more numbers separated by commas. GT.fmt_image() is specifically designed to handle such cases, allowing users to render multiple images in a single row.\n\n\nCase 1: Local File Paths\nCase 1 demonstrates how to simulate a column containing strings representing local file paths. We‚Äôll use images stored in the data/metro_images directory of Great Tables:\n\n1img_local_paths = files(\"great_tables\") / \"data/metro_images\"\n\n\n1\n\nThese image files follow a patterned naming convention, such as metro_1.svg, metro_2.svg, and so on.\n\n\n\n\nBelow is a Pandas DataFrame called metro_mini1, where the case1 column contains local file paths that we want to render as images.\n\n\nShow the Code\nmetro_mini1 = pd.DataFrame(\n    {\n        **data,\n        \"case1\": [\n            \", \".join(\n                str((img_local_paths / f\"metro_{item}\").with_suffix(\".svg\"))\n                for item in row.split(\", \")\n            )\n            for row in data[\"lines\"]\n        ],\n    }\n)\nmetro_mini1\n\n\n\n\n\n  \n    \n      \n      name\n      lines\n      case1\n    \n  \n  \n    \n      0\n      Argentine\n      1\n      /opt/hostedtoolcache/Python/3.10.17/x64/lib/python3.10/site-packages/great_tables/data/metro_images/metro_1.svg\n    \n    \n      1\n      Bastille\n      1, 5, 8\n      /opt/hostedtoolcache/Python/3.10.17/x64/lib/python3.10/site-packages/great_tables/data/metro_images/metro_1.svg, /opt/hostedtoolcache/Python/3.10....\n    \n    \n      2\n      B√©rault\n      1\n      /opt/hostedtoolcache/Python/3.10.17/x64/lib/python3.10/site-packages/great_tables/data/metro_images/metro_1.svg\n    \n    \n      3\n      Champs-√âlys√©es‚ÄîClemenceau\n      1, 13\n      /opt/hostedtoolcache/Python/3.10.17/x64/lib/python3.10/site-packages/great_tables/data/metro_images/metro_1.svg, /opt/hostedtoolcache/Python/3.10....\n    \n    \n      4\n      Charles de Gaulle‚Äî√âtoile\n      1, 2, 6\n      /opt/hostedtoolcache/Python/3.10.17/x64/lib/python3.10/site-packages/great_tables/data/metro_images/metro_1.svg, /opt/hostedtoolcache/Python/3.10....\n    \n  \n\n\n\n\n\n\n\n\n\n\nUse the pathlib Module to Construct Paths\n\n\n\n\n\nLocal file paths can vary depending on the operating system, which makes it easy to accidentally construct invalid paths. A good practice to mitigate this is to use Python‚Äôs built-in pathlib module to construct paths first and then convert them to strings. In this example, img_local_paths is actually an instance of pathlib.Path.\n\nfrom pathlib import Path\n\nisinstance(img_local_paths, Path)  # True\n\n\n\n\nThe case1 column is quite lengthy due to the inclusion of img_local_paths. In Case 3, we‚Äôll share a useful trick to avoid repeating the directory name each time‚Äîstay tuned!\nFor now, let‚Äôs use GT.fmt_image() to render images by passing \"case1\" as the first argument:\n\nGT(metro_mini1).fmt_image(\"case1\").cols_align(align=\"right\", columns=\"case1\")\n\n\n\n\n\n\n\n  name\n  lines\n  case1\n\n\n\n  \n    Argentine\n    1\n    \n  \n  \n    Bastille\n    1, 5, 8\n      \n  \n  \n    B√©rault\n    1\n    \n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n    1, 13\n     \n  \n  \n    Charles de Gaulle‚Äî√âtoile\n    1, 2, 6\n      \n  \n\n\n\n\n\n\n        \n\n\n\n\nCase 2: Full HTTP/HTTPS URLs\nCase 2 demonstrates how to simulate a column containing strings representing HTTP/HTTPS URLs. We‚Äôll use the same images as in Case 1, but this time, retrieve them from the Great Tables GitHub repository:\n\nimg_url_paths = \"https://raw.githubusercontent.com/posit-dev/great-tables/refs/heads/main/great_tables/data/metro_images\"\n\nBelow is a Pandas DataFrame called metro_mini2, where the case2 column contains full HTTP/HTTPS URLs that we aim to render as images.\n\n\nShow the Code\nmetro_mini2 = pd.DataFrame(\n    {\n        **data,\n        \"case2\": [\n            \", \".join(f\"{img_url_paths}/metro_{item}.svg\" for item in row.split(\", \"))\n            for row in data[\"lines\"]\n        ],\n    }\n)\nmetro_mini2\n\n\n\n\n\n  \n    \n      \n      name\n      lines\n      case2\n    \n  \n  \n    \n      0\n      Argentine\n      1\n      https://raw.githubusercontent.com/posit-dev/great-tables/refs/heads/main/great_tables/data/metro_images/metro_1.svg\n    \n    \n      1\n      Bastille\n      1, 5, 8\n      https://raw.githubusercontent.com/posit-dev/great-tables/refs/heads/main/great_tables/data/metro_images/metro_1.svg, https://raw.githubusercontent...\n    \n    \n      2\n      B√©rault\n      1\n      https://raw.githubusercontent.com/posit-dev/great-tables/refs/heads/main/great_tables/data/metro_images/metro_1.svg\n    \n    \n      3\n      Champs-√âlys√©es‚ÄîClemenceau\n      1, 13\n      https://raw.githubusercontent.com/posit-dev/great-tables/refs/heads/main/great_tables/data/metro_images/metro_1.svg, https://raw.githubusercontent...\n    \n    \n      4\n      Charles de Gaulle‚Äî√âtoile\n      1, 2, 6\n      https://raw.githubusercontent.com/posit-dev/great-tables/refs/heads/main/great_tables/data/metro_images/metro_1.svg, https://raw.githubusercontent...\n    \n  \n\n\n\n\nThe lengthy case2 column issue can also be addressed using the trick shared in Case 3.\nSimilarly, we can use GT.fmt_image() to render images by passing \"case2\" as the first argument:\n\nGT(metro_mini2).fmt_image(\"case2\").cols_align(align=\"right\", columns=\"case2\")\n\n\n\n\n\n\n\n  name\n  lines\n  case2\n\n\n\n  \n    Argentine\n    1\n    \n  \n  \n    Bastille\n    1, 5, 8\n      \n  \n  \n    B√©rault\n    1\n    \n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n    1, 13\n     \n  \n  \n    Charles de Gaulle‚Äî√âtoile\n    1, 2, 6\n      \n  \n\n\n\n\n\n\n        \n\n\n\n\nCase 3: Image Names with the path= Argument\nCase 3 demonstrates how to use the path= argument to specify images relative to a base directory or URL. This approach eliminates much of the repetition in file names, offering a solution to the issues in Case 1 and Case 2.\nBelow is a Pandas DataFrame called metro_mini3, where the case3 column contains file names that we aim to render as images.\n\n\nShow the Code\nmetro_mini3 = pd.DataFrame(\n    {\n        **data,\n        \"case3\": [\n            \", \".join(f\"metro_{item}.svg\" for item in row.split(\", \")) for row in data[\"lines\"]\n        ],\n    }\n)\nmetro_mini3\n\n\n\n\n\n  \n    \n      \n      name\n      lines\n      case3\n    \n  \n  \n    \n      0\n      Argentine\n      1\n      metro_1.svg\n    \n    \n      1\n      Bastille\n      1, 5, 8\n      metro_1.svg, metro_5.svg, metro_8.svg\n    \n    \n      2\n      B√©rault\n      1\n      metro_1.svg\n    \n    \n      3\n      Champs-√âlys√©es‚ÄîClemenceau\n      1, 13\n      metro_1.svg, metro_13.svg\n    \n    \n      4\n      Charles de Gaulle‚Äî√âtoile\n      1, 2, 6\n      metro_1.svg, metro_2.svg, metro_6.svg\n    \n  \n\n\n\n\nNow we can use GT.fmt_image() to render the images by passing \"case3\" as the first argument and specifying either img_local_paths or img_url_paths as the path= argument:\n\n# equivalent to `Case 1`\n(\n    GT(metro_mini3)\n    .fmt_image(\"case3\", path=img_local_paths)\n    .cols_align(align=\"right\", columns=\"case3\")\n)\n\n# equivalent to `Case 2`\n(\n    GT(metro_mini3)\n    .fmt_image(\"case3\", path=img_url_paths)\n    .cols_align(align=\"right\", columns=\"case3\")\n)\n\n\n\n\n\n\n\n  name\n  lines\n  case3\n\n\n\n  \n    Argentine\n    1\n    \n  \n  \n    Bastille\n    1, 5, 8\n      \n  \n  \n    B√©rault\n    1\n    \n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n    1, 13\n     \n  \n  \n    Charles de Gaulle‚Äî√âtoile\n    1, 2, 6\n      \n  \n\n\n\n\n\n\n        \n\n\nAfter exploring Case 1 and Case 2, you‚Äôll likely appreciate the functionality of the path= argument. However, manually constructing file names can still be a bit tedious. If your file names follow a consistent pattern, the file_pattern= argument can simplify the process. Let‚Äôs see how this works in Case 4 below.\n\n\nCase 4: Image Names Using Both the path= and file_pattern= Arguments\nCase 4 demonstrates how to use path= and file_pattern= to specify images with names following a common pattern. For example, you could use file_pattern=\"metro_{}.svg\" to reference images like metro_1.svg, metro_2.svg, and so on.\nBelow is a Pandas DataFrame called metro_mini4, where the case4 column contains a copy of data[\"lines\"], which we aim to render as images.\n\n\nShow the Code\nmetro_mini4 = pd.DataFrame({**data, \"case4\": data[\"lines\"]})\nmetro_mini4\n\n\n\n\n\n  \n    \n      \n      name\n      lines\n      case4\n    \n  \n  \n    \n      0\n      Argentine\n      1\n      1\n    \n    \n      1\n      Bastille\n      1, 5, 8\n      1, 5, 8\n    \n    \n      2\n      B√©rault\n      1\n      1\n    \n    \n      3\n      Champs-√âlys√©es‚ÄîClemenceau\n      1, 13\n      1, 13\n    \n    \n      4\n      Charles de Gaulle‚Äî√âtoile\n      1, 2, 6\n      1, 2, 6\n    \n  \n\n\n\n\nFirst, define a string pattern to illustrate the file naming convention, using {} to indicate the variable portion:\n\nfile_pattern = \"metro_{}.svg\"\n\nNext, pass \"case4\" as the first argument, along with img_local_paths or img_url_paths as the path= argument, and file_pattern as the file_pattern= argument. This allows GT.fmt_image() to render the images:\n\n# equivalent to `Case 1`\n(\n    GT(metro_mini4)\n    .fmt_image(\"case4\", path=img_local_paths, file_pattern=file_pattern)\n    .cols_align(align=\"right\", columns=\"case4\")\n)\n\n# equivalent to `Case 2`\n(\n    GT(metro_mini4)\n    .fmt_image(\"case4\", path=img_url_paths, file_pattern=file_pattern)\n    .cols_align(align=\"right\", columns=\"case4\")\n)\n\n\n\n\n\n\n\n  name\n  lines\n  case4\n\n\n\n  \n    Argentine\n    1\n    \n  \n  \n    Bastille\n    1, 5, 8\n      \n  \n  \n    B√©rault\n    1\n    \n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n    1, 13\n     \n  \n  \n    Charles de Gaulle‚Äî√âtoile\n    1, 2, 6\n      \n  \n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\nUsing file_pattern= Independently\n\n\n\n\n\nThe file_pattern= argument is typically used in conjunction with the path= argument, but this is not a strict rule. If your local file paths or HTTP/HTTPS URLs follow a pattern, you can use file_pattern= alone without path=. This allows you to include the shared portion of the file paths or URLs directly in file_pattern, as shown below:\n\nfile_pattern = str(img_local_paths / \"metro_{}.svg\")\n(\n    GT(metro_mini4)\n    .fmt_image(\"case4\", file_pattern=file_pattern)\n    .cols_align(align=\"right\", columns=\"case4\")\n)\n\n\n\n\n\n\n\n  name\n  lines\n  case4\n\n\n\n  \n    Argentine\n    1\n    \n  \n  \n    Bastille\n    1, 5, 8\n      \n  \n  \n    B√©rault\n    1\n    \n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n    1, 13\n     \n  \n  \n    Charles de Gaulle‚Äî√âtoile\n    1, 2, 6\n      \n  \n\n\n\n\n\n\n        \n\n\n\n\n\nCase 4 is undoubtedly one of the most powerful features of Great Tables. While mastering it may take some practice, we hope this example helps you render images effortlessly and effectively."
  },
  {
    "objectID": "blog/rendering-images/index.html#rendering-images-anywhere",
    "href": "blog/rendering-images/index.html#rendering-images-anywhere",
    "title": "Rendering images anywhere in Great Tables",
    "section": "Rendering Images Anywhere",
    "text": "Rendering Images Anywhere\nWhile GT.fmt_image() is primarily designed for rendering images in the table body, what if you need to display images in other locations, such as the header? In such cases, you can turn to the versatile vals.fmt_image().\nvals.fmt_image() is a hidden gem in Great Tables. Its usage is similar to GT.fmt_image(), but instead of working directly with DataFrame columns, it lets you pass a string or a list of strings as the first argument, returning a list of strings, each representing an image. You can then wrap these strings with html(), allowing Great Tables to render the images anywhere in the table.\n\nPreparations\nWe will create a Pandas DataFrame named metro_mini using the data dictionary. This will be used for demonstration in the following examples:\n\n\nShow the Code\nmetro_mini = pd.DataFrame(data)\nmetro_mini\n\n\n\n\n\n  \n    \n      \n      name\n      lines\n    \n  \n  \n    \n      0\n      Argentine\n      1\n    \n    \n      1\n      Bastille\n      1, 5, 8\n    \n    \n      2\n      B√©rault\n      1\n    \n    \n      3\n      Champs-√âlys√©es‚ÄîClemenceau\n      1, 13\n    \n    \n      4\n      Charles de Gaulle‚Äî√âtoile\n      1, 2, 6\n    \n  \n\n\n\n\n\n\nSingle Image\nThis example shows how to render a valid URL as an image in the title of the table header:\n\ngt_logo_url = \"https://posit-dev.github.io/great-tables/assets/GT_logo.svg\"\n\n1_gt_logo, *_ = vals.fmt_image(gt_logo_url, height=100)\ngt_logo = html(_gt_logo)\n\n(\n    GT(metro_mini)\n    .fmt_image(\"lines\", path=img_url_paths, file_pattern=\"metro_{}.svg\")\n    .tab_header(title=gt_logo)\n    .cols_align(align=\"right\", columns=\"lines\")\n    .opt_stylize(style=4, color=\"gray\")\n)\n\n\n1\n\nvals.fmt_image() returns a list of strings. Here, we use tuple unpacking to extract the first item from the list.\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n  name\n  lines\n\n\n\n  \n    Argentine\n    \n  \n  \n    Bastille\n      \n  \n  \n    B√©rault\n    \n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n     \n  \n  \n    Charles de Gaulle‚Äî√âtoile\n      \n  \n\n\n\n\n\n\n        \n\n\n\n\nMultiple Images\nThis example demonstrates how to render two valid URLs as images in the title and subtitle of the table header:\n\nmetro_logo_url = \"https://raw.githubusercontent.com/rstudio/gt/master/images/dataset_metro.svg\"\nlogo_urls = [gt_logo_url, metro_logo_url]\n\n1_gt_logo, _metro_logo = vals.fmt_image(logo_urls, height=100)\ngt_logo, metro_logo = html(_gt_logo), html(_metro_logo)\n\n(\n    GT(metro_mini)\n    .fmt_image(\"lines\", path=img_url_paths, file_pattern=\"metro_{}.svg\")\n    .tab_header(title=gt_logo, subtitle=metro_logo)\n    .cols_align(align=\"right\", columns=\"lines\")\n    .opt_stylize(style=4, color=\"gray\")\n)\n\n\n1\n\nNote that if you need to render images with different height or width, you might need to make two separate calls to vals.fmt_image().\n\n\n\n\n\n\n\n\n\n  \n    \n  \n  \n    \n  \n\n  name\n  lines\n\n\n\n  \n    Argentine\n    \n  \n  \n    Bastille\n      \n  \n  \n    B√©rault\n    \n  \n  \n    Champs-√âlys√©es‚ÄîClemenceau\n     \n  \n  \n    Charles de Gaulle‚Äî√âtoile"
  },
  {
    "objectID": "blog/rendering-images/index.html#manually-rendering-images-anywhere",
    "href": "blog/rendering-images/index.html#manually-rendering-images-anywhere",
    "title": "Rendering images anywhere in Great Tables",
    "section": "Manually Rendering Images Anywhere",
    "text": "Manually Rendering Images Anywhere\nRemember, you can always use html() to manually construct your desired output. For example, the previous table can be created without relying on vals.fmt_image() like this:\n\n(\n    GT(metro_mini)\n    .fmt_image(\"lines\", path=img_url_paths, file_pattern=\"metro_{}.svg\")\n    .tab_header(\n        title=html(f'&lt;img src=\"{gt_logo_url}\" height=\"100\"&gt;'),\n        subtitle=html(f'&lt;img src=\"{metro_logo_url}\" height=\"100\"&gt;'),\n    )\n    .cols_align(align=\"right\", columns=\"lines\")\n    .opt_stylize(style=4, color=\"gray\")\n)\n\nAlternatively, you can manually encode the image using Python‚Äôs built-in base64 module, specify the appropriate MIME type and HTML attributes, and then wrap it in html() to display the table."
  },
  {
    "objectID": "blog/rendering-images/index.html#final-words",
    "href": "blog/rendering-images/index.html#final-words",
    "title": "Rendering images anywhere in Great Tables",
    "section": "Final Words",
    "text": "Final Words\nIn this post, we focused on the most common use cases for rendering images in Great Tables, deliberately avoiding excessive DataFrame operations. Including such details could have overwhelmed the post with examples of string manipulations and the complexities of working with various DataFrame libraries.\nWe hope you found this guide helpful and enjoyed the structured approach. Until next time, happy table creation with Great Tables!\n\n\n\n\n\n\nAppendix: Related PRs\n\n\n\nIf you‚Äôre interested in the recent enhancements we‚Äôve made to image rendering, be sure to check out #444, #451 and #520 for all the details."
  },
  {
    "objectID": "blog/locbody-mask/index.html",
    "href": "blog/locbody-mask/index.html",
    "title": "Style Table Body with mask= in loc.body()",
    "section": "",
    "text": "In Great Tables 0.16.0, we introduced the mask= parameter in loc.body(), enabling users to apply conditional styling to rows on a per-column basis more efficiently when working with a Polars DataFrame. This post will demonstrate how it works and compare it with the ‚Äúold-fashioned‚Äù approach:\n\nLeveraging the mask= parameter in loc.body(): Use Polars expressions for streamlined styling.\nUtilizing the locations= parameter in GT.tab_style(): Pass a list of loc.body() objects.\n\nLet‚Äôs dive in.\n\nPreparations\nWe‚Äôll use the built-in dataset gtcars to create a Polars DataFrame. Next, we‚Äôll select the columns mfr, drivetrain, year, and hp to create a small pivoted table named df_mini. Finally, we‚Äôll pass df_mini to the GT object to create a table named gt, using drivetrain as the rowname_col= and mfr as the groupname_col=, as shown below:\n\n\nShow the Code\nimport polars as pl\nfrom great_tables import GT, loc, style\nfrom great_tables.data import gtcars\nfrom polars import selectors as cs\n\nyear_cols = [\"2014\", \"2015\", \"2016\", \"2017\"]\ndf_mini = (\n    pl.from_pandas(gtcars)\n    .filter(pl.col(\"mfr\").is_in([\"Ferrari\", \"Lamborghini\", \"BMW\"]))\n    .sort(\"drivetrain\")\n    .pivot(on=\"year\", index=[\"mfr\", \"drivetrain\"], values=\"hp\", aggregate_function=\"mean\")\n    .select([\"mfr\", \"drivetrain\", *year_cols])\n)\n\ngt = GT(df_mini).tab_stub(rowname_col=\"drivetrain\", groupname_col=\"mfr\").opt_stylize(color=\"cyan\")\ngt\n\n\n\n\n\n\n\n\n  \n  2014\n  2015\n  2016\n  2017\n\n\n\n  \n    Ferrari\n  \n  \n    awd\n    None\n    652.0\n    None\n    680.0\n  \n  \n    rwd\n    562.0\n    678.4\n    661.0\n    None\n  \n  \n    Lamborghini\n  \n  \n    awd\n    None\n    700.0\n    None\n    None\n  \n  \n    rwd\n    550.0\n    610.0\n    None\n    None\n  \n  \n    BMW\n  \n  \n    awd\n    None\n    None\n    357.0\n    None\n  \n  \n    rwd\n    None\n    None\n    465.0\n    None\n  \n\n\n\n\n\n\n        \n\n\nThe numbers in the cells represent the average horsepower for each combination of mfr and drivetrain for a specific year.\n\n\nLeveraging the mask= parameter in loc.body()\nThe mask= parameter in loc.body() accepts a Polars expression that evaluates to a boolean result for each cell.\nHere‚Äôs how we can use it to achieve the two goals:\n\nHighlight the cell text in red if the column datatype is numerical and the cell value exceeds 650.\nFill the background color as lightgrey if the cell value is missing in the last two columns (2016 and 2017).\n\n\n(\n    gt.tab_style(\n        style=style.text(color=\"red\"),\n        locations=loc.body(mask=cs.numeric().gt(650))\n    ).tab_style(\n        style=style.fill(color=\"lightgrey\"),\n        locations=loc.body(mask=pl.nth(-2, -1).is_null()),\n    )\n)\n\n\n\n\n\n\n\n  \n  2014\n  2015\n  2016\n  2017\n\n\n\n  \n    Ferrari\n  \n  \n    awd\n    None\n    652.0\n    None\n    680.0\n  \n  \n    rwd\n    562.0\n    678.4\n    661.0\n    None\n  \n  \n    Lamborghini\n  \n  \n    awd\n    None\n    700.0\n    None\n    None\n  \n  \n    rwd\n    550.0\n    610.0\n    None\n    None\n  \n  \n    BMW\n  \n  \n    awd\n    None\n    None\n    357.0\n    None\n  \n  \n    rwd\n    None\n    None\n    465.0\n    None\n  \n\n\n\n\n\n\n        \n\n\nIn this example:\n\ncs.numeric() targets numerical columns, and .gt(650) checks if the cell value is greater than 650.\npl.nth(-2, -1) targets the last two columns, and .is_null() identifies missing values.\n\nDid you notice that we can use Polars selectors and expressions to dynamically identify columns at runtime? This is definitely a killer feature when working with pivoted operations.\nThe mask= parameter acts as a syntactic sugar, streamlining the process and removing the need to loop through columns manually.\n\n\n\n\n\n\nUsing mask= Independently\n\n\n\n\n\nmask= should not be used in combination with the columns or rows arguments. Attempting to do so will raise a ValueError.\n\n\n\n\n\nUtilizing the locations= parameter in GT.tab_style()\nA more ‚Äúold-fashioned‚Äù approach involves passing a list of loc.body() objects to the locations= parameter in GT.tab_style():\n\n(\n    gt.tab_style(\n        style=style.text(color=\"red\"),\n        locations=[loc.body(columns=col, rows=pl.col(col).gt(650))\n                   for col in year_cols],\n    ).tab_style(\n        style=style.fill(color=\"lightgrey\"),\n        locations=[loc.body(columns=col, rows=pl.col(col).is_null())\n                   for col in year_cols[-2:]],\n    )\n)\n\nThis approach, though functional, demands additional effort:\n\nExplicitly preparing the column names in advance.\nSpecifying the columns= and rows= arguments for each loc.body() in the loop.\n\nWhile effective, it is less efficient and more verbose compared to the first approach.\n\n\nWrapping up\nWith the introduction of the mask= parameter in loc.body(), users can now style the table body in a more vectorized-like manner, akin to using df.apply() in Pandas, enhancing the overall user experience.\nWe extend our gratitude to @igorcalabria for suggesting this feature in #389 and providing an insightful explanation of its utility. A special thanks to @henryharbeck for providing the second approach.\nWe hope you enjoy this new functionality as much as we do! Have ideas to make Great Tables even better? Share them with us via GitHub Issues. We‚Äôre always amazed by the creativity of our users! See you, until the next great table."
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "Examples",
    "section": "",
    "text": "Show the Code\nimport polars as pl\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = (\n    pl.from_pandas(islands).sort(\"size\", descending=True)\n    .head(10)\n)\n\n(\n    GT(islands_mini)\n    .tab_header(\n        title=\"Large Landmasses of the World\",\n        subtitle=\"The top ten largest are presented\"\n    )\n    .tab_stub(rowname_col=\"name\")\n    .tab_source_note(source_note=\"Source: The World Almanac and Book of Facts, 1975, page 406.\")\n    .tab_source_note(\n        source_note=md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")\n    )\n    .tab_stubhead(label=\"landmass\")\n    .fmt_integer(columns=\"size\")\n)\n\n\n\n\n\n\n\n  \n    Large Landmasses of the World\n  \n  \n    The top ten largest are presented\n  \n\n  landmass\n  size\n\n\n\n  \n    Asia\n    16,988\n  \n  \n    Africa\n    11,506\n  \n  \n    North America\n    9,390\n  \n  \n    South America\n    6,795\n  \n  \n    Antarctica\n    5,500\n  \n  \n    Europe\n    3,745\n  \n  \n    Australia\n    2,968\n  \n  \n    Greenland\n    840\n  \n  \n    New Guinea\n    306\n  \n  \n    Borneo\n    280\n  \n\n  \n  \n  \n    Source: The World Almanac and Book of Facts, 1975, page 406.\n  \n\n\n  \n    Reference: McNeil, D. R. (1977) Interactive Data Analysis. Wiley.\n  \n\n\n\n\n\n\n        \n\n\n\n\n\n\nShow the Code\nfrom great_tables import GT, html\nfrom great_tables.data import airquality\n\nairquality_mini = airquality.head(10).assign(Year = 1973)\n\n(\n    GT(airquality_mini)\n    .tab_header(\n        title=\"New York Air Quality Measurements\",\n        subtitle=\"Daily measurements in New York City (May 1-10, 1973)\"\n    )\n    .tab_spanner(\n        label=\"Time\",\n        columns=[\"Year\", \"Month\", \"Day\"]\n    )\n    .tab_spanner(\n        label=\"Measurement\",\n        columns=[\"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"]\n    )\n    .cols_move_to_start(columns=[\"Year\", \"Month\", \"Day\"])\n    .cols_label(\n        Ozone = html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R = html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind = html(\"Wind,&lt;br&gt;mph\"),\n        Temp = html(\"Temp,&lt;br&gt;&deg;F\")\n    )\n)\n\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Time\n  \n  \n    Measurement\n  \n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Solar R.,cal/m2\n  Wind,mph\n  Temp,¬∞F\n\n\n\n  \n    1973\n    5\n    1\n    41.0\n    190.0\n    7.4\n    67\n  \n  \n    1973\n    5\n    2\n    36.0\n    118.0\n    8.0\n    72\n  \n  \n    1973\n    5\n    3\n    12.0\n    149.0\n    12.6\n    74\n  \n  \n    1973\n    5\n    4\n    18.0\n    313.0\n    11.5\n    62\n  \n  \n    1973\n    5\n    5\n    \n    \n    14.3\n    56\n  \n  \n    1973\n    5\n    6\n    28.0\n    \n    14.9\n    66\n  \n  \n    1973\n    5\n    7\n    23.0\n    299.0\n    8.6\n    65\n  \n  \n    1973\n    5\n    8\n    19.0\n    99.0\n    13.8\n    59\n  \n  \n    1973\n    5\n    9\n    8.0\n    19.0\n    20.1\n    61\n  \n  \n    1973\n    5\n    10\n    \n    194.0\n    8.6\n    69\n  \n\n\n\n\n\n\n        \n\n\n\n\n\n\nShow the Code\nfrom great_tables import GT\nfrom great_tables.data import countrypops\nimport polars as pl\nimport polars.selectors as cs\n\n# Get vectors of 2-letter country codes for each region of Oceania\noceania = {\n    \"Australasia\": [\"AU\", \"NZ\"],\n    \"Melanesia\": [\"NC\", \"PG\", \"SB\", \"VU\"],\n    \"Micronesia\": [\"FM\", \"GU\", \"KI\", \"MH\", \"MP\", \"NR\", \"PW\"],\n    \"Polynesia\": [\"PF\", \"WS\", \"TO\", \"TV\"],\n}\n\n# Create a dictionary mapping country to region (e.g. AU -&gt; Australasia)\ncountry_to_region = {\n    country: region for region, countries in oceania.items() for country in countries\n}\n\nwide_pops = (\n    pl.from_pandas(countrypops)\n    .filter(\n        pl.col(\"country_code_2\").is_in(list(country_to_region))\n        & pl.col(\"year\").is_in([2000, 2010, 2020])\n    )\n    .with_columns(pl.col(\"country_code_2\").replace(country_to_region).alias(\"region\"))\n    .pivot(index=[\"country_name\", \"region\"], on=\"year\", values=\"population\")\n    .sort(\"2020\", descending=True)\n)\n\n(\n    GT(wide_pops)\n    .tab_header(title=\"Populations of Oceania's Countries in 2000, 2010, and 2020\")\n    .tab_spanner(label=\"Total Population\", columns=cs.all())\n    .tab_stub(rowname_col=\"country_name\", groupname_col=\"region\")\n    .fmt_integer()\n)\n\n\n\n\n\n\n\n  \n    Populations of Oceania's Countries in 2000, 2010, and 2020\n  \n\n  \n  \n    Total Population\n  \n\n\n  2000\n  2010\n  2020\n\n\n\n  \n    Australasia\n  \n  \n    Australia\n    19,028,802\n    22,031,750\n    25,655,289\n  \n  \n    New Zealand\n    3,857,700\n    4,350,700\n    5,090,200\n  \n  \n    Melanesia\n  \n  \n    Papua New Guinea\n    5,508,297\n    7,583,269\n    9,749,640\n  \n  \n    Solomon Islands\n    429,978\n    540,394\n    691,191\n  \n  \n    Vanuatu\n    192,074\n    245,453\n    311,685\n  \n  \n    New Caledonia\n    213,230\n    249,750\n    272,460\n  \n  \n    Polynesia\n  \n  \n    French Polynesia\n    250,927\n    283,788\n    301,920\n  \n  \n    Samoa\n    184,008\n    194,672\n    214,929\n  \n  \n    Tonga\n    102,603\n    107,383\n    105,254\n  \n  \n    Tuvalu\n    9,638\n    10,550\n    11,069\n  \n  \n    Micronesia\n  \n  \n    Guam\n    160,188\n    164,905\n    169,231\n  \n  \n    Kiribati\n    88,826\n    107,995\n    126,463\n  \n  \n    Micronesia (Federated States)\n    111,709\n    107,588\n    112,106\n  \n  \n    Northern Mariana Islands\n    80,338\n    54,087\n    49,587\n  \n  \n    Marshall Islands\n    54,224\n    53,416\n    43,413\n  \n  \n    Palau\n    19,726\n    18,540\n    17,972\n  \n  \n    Nauru\n    10,377\n    10,241\n    12,315\n  \n\n\n\n\n\n\n        \n\n\n\n\n\n\nShow the Code\nfrom great_tables import GT, html\nfrom great_tables.data import towny\n\ntowny_mini = (\n    towny[[\"name\", \"website\", \"density_2021\", \"land_area_km2\", \"latitude\", \"longitude\"]]\n    .sort_values(\"density_2021\", ascending=False)\n    .head(10)\n)\n\ntowny_mini[\"url_name\"] = [\"[\"] + towny_mini[\"name\"] + [\"]\"] + [\"(\"] + towny_mini[\"website\"] + [\")\"]\n\ntowny_mini[\"location\"] = (\n    [\"[map](http://maps.google.com/?ie=UTF8&hq=&ll=\"]\n    + towny_mini[\"latitude\"].astype(str)\n    + [\",\"]\n    + towny_mini[\"longitude\"].astype(str)\n    + [\"&z=13)\"]\n)\n\n(\n    GT(\n        towny_mini[[\"url_name\", \"location\", \"land_area_km2\", \"density_2021\"]],\n        rowname_col=\"url_name\",\n    )\n    .tab_header(\n        title=\"The Municipalities of Ontario\",\n        subtitle=\"The top 10 highest population density in 2021\",\n    )\n    .tab_stubhead(label=\"Municipality\")\n    .fmt_markdown(columns=[\"url_name\", \"location\"])\n    .fmt_number(columns=[\"land_area_km2\", \"density_2021\"], decimals=1)\n    .cols_label(\n        land_area_km2=html(\"land area, &lt;br&gt;km&lt;sup&gt;2&lt;/sup&gt;\"),\n        density_2021=html(\"density, &lt;br&gt;people/km&lt;sup&gt;2&lt;/sup&gt;\"),\n    )\n)\n\n\n\n\n\n\n\n  \n    The Municipalities of Ontario\n  \n  \n    The top 10 highest population density in 2021\n  \n\n  Municipality\n  location\n  land area, km2\n  density, people/km2\n\n\n\n  \n    Toronto\n    map\n    631.1\n    4,427.8\n  \n  \n    Brampton\n    map\n    265.9\n    2,469.0\n  \n  \n    Mississauga\n    map\n    292.7\n    2,452.6\n  \n  \n    Newmarket\n    map\n    38.5\n    2,284.2\n  \n  \n    Richmond Hill\n    map\n    100.8\n    2,004.4\n  \n  \n    Orangeville\n    map\n    15.2\n    1,989.9\n  \n  \n    Ajax\n    map\n    66.6\n    1,900.8\n  \n  \n    Waterloo\n    map\n    64.1\n    1,895.7\n  \n  \n    Kitchener\n    map\n    136.8\n    1,877.7\n  \n  \n    Guelph\n    map\n    87.4\n    1,644.1\n  \n\n\n\n\n\n\n        \n\n\n\n\n\n\nShow the Code\nfrom great_tables import GT, html\nfrom great_tables.data import sza\nimport polars as pl\nimport polars.selectors as cs\n\nsza_pivot = (\n    pl.from_pandas(sza)\n    .filter((pl.col(\"latitude\") == \"20\") & (pl.col(\"tst\") &lt;= \"1200\"))\n    .select(pl.col(\"*\").exclude(\"latitude\"))\n    .drop_nulls()\n    .pivot(values=\"sza\", index=\"month\", on=\"tst\", sort_columns=True)\n)\n\n(\n    GT(sza_pivot, rowname_col=\"month\")\n    .data_color(\n        domain=[90, 0],\n        palette=[\"rebeccapurple\", \"white\", \"orange\"],\n        na_color=\"white\",\n    )\n    .tab_header(\n        title=\"Solar Zenith Angles from 05:30 to 12:00\",\n        subtitle=html(\"Average monthly values at latitude of 20&deg;N.\"),\n    )\n    .sub_missing(missing_text=\"\")\n)\n\n\n\n\n\n\n\n  \n    Solar Zenith Angles from 05:30 to 12:00\n  \n  \n    Average monthly values at latitude of 20¬∞N.\n  \n\n  \n  0530\n  0600\n  0630\n  0700\n  0730\n  0800\n  0830\n  0900\n  0930\n  1000\n  1030\n  1100\n  1130\n  1200\n\n\n\n  \n    jan\n    \n    \n    \n    84.9\n    78.7\n    72.7\n    66.1\n    61.5\n    56.5\n    52.1\n    48.3\n    45.5\n    43.6\n    43.0\n  \n  \n    feb\n    \n    \n    88.9\n    82.5\n    75.8\n    69.6\n    63.3\n    57.7\n    52.2\n    47.4\n    43.1\n    40.0\n    37.8\n    37.2\n  \n  \n    mar\n    \n    \n    85.7\n    78.8\n    72.0\n    65.2\n    58.6\n    52.3\n    46.2\n    40.5\n    35.5\n    31.4\n    28.6\n    27.7\n  \n  \n    apr\n    \n    88.5\n    81.5\n    74.4\n    67.4\n    60.3\n    53.4\n    46.5\n    39.7\n    33.2\n    26.9\n    21.3\n    17.2\n    15.5\n  \n  \n    may\n    \n    85.0\n    78.2\n    71.2\n    64.3\n    57.2\n    50.2\n    43.2\n    36.1\n    29.1\n    26.1\n    15.2\n    8.8\n    5.0\n  \n  \n    jun\n    89.2\n    82.7\n    76.0\n    69.3\n    62.5\n    55.7\n    48.8\n    41.9\n    35.0\n    28.1\n    21.1\n    14.2\n    7.3\n    2.0\n  \n  \n    jul\n    88.8\n    82.3\n    75.7\n    69.1\n    62.3\n    55.5\n    48.7\n    41.8\n    35.0\n    28.1\n    21.2\n    14.3\n    7.7\n    3.1\n  \n  \n    aug\n    \n    83.8\n    77.1\n    70.2\n    63.3\n    56.4\n    49.4\n    42.4\n    35.4\n    28.3\n    21.3\n    14.3\n    7.3\n    1.9\n  \n  \n    sep\n    \n    87.2\n    80.2\n    73.2\n    66.1\n    59.1\n    52.1\n    45.1\n    38.1\n    31.3\n    24.7\n    18.6\n    13.7\n    11.6\n  \n  \n    oct\n    \n    \n    84.1\n    77.1\n    70.2\n    63.3\n    56.5\n    49.9\n    43.5\n    37.5\n    32.0\n    27.4\n    24.3\n    23.1\n  \n  \n    nov\n    \n    \n    87.8\n    81.3\n    74.5\n    68.3\n    61.8\n    56.0\n    50.2\n    45.3\n    40.7\n    37.4\n    35.1\n    34.4\n  \n  \n    dec\n    \n    \n    \n    84.3\n    78.0\n    71.8\n    66.1\n    60.5\n    55.6\n    50.9\n    47.2\n    44.2\n    42.4\n    41.8\n  \n\n\n\n\n\n\n        \n\n\n\n\nView notebook ‚¨Ä\n\n\n\n\n\n\n  \n    Highest Paid Athletes in 2023\n  \n\n  \n  Name\n  icon\n  Sport\n  \n    Earnings\n  \n\n\n  Total $M\n  Off field $M\n  Off field %\n\n\n\n  1\n  Cristiano Ronaldo\n  \n  Soccer\n  136.0\n  90.0\n                      \n\n\n  2\n  Lionel Messi\n  \n  Soccer\n  130.0\n  65.0\n                      \n\n\n  3\n  Kylian Mbapp√©\n  \n  Soccer\n  120.0\n  20.0\n                      \n\n\n  4\n  LeBron James\n  \n  Basketball\n  119.5\n  75.0\n                      \n\n\n  5\n  Canelo Alvarez\n  \n  Boxing\n  110.0\n  10.0\n                      \n\n\n  6\n  Dustin Johnson\n  \n  Golf\n  107.0\n  5.0\n                      \n\n\n  7\n  Phil Mickelson\n  \n  Golf\n  106.0\n  2.0\n                      \n\n\n  8\n  Stephen Curry\n  \n  Basketball\n  100.4\n  52.0\n                      \n\n\n  9\n  Roger Federer\n  \n  Tennis\n  95.1\n  95.0\n                      \n\n\n  \n  \n  \n    Original table: @LisaHornung_ | Sports icons: Firza Alamsyah | Data: Forbes\n  \n\n\n\n\n\n\n        \n\n\n\n\n\nView source ‚¨Ä ¬†¬†¬†¬†Blog post (R code) ‚¨Ä\n\n\n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n  \n    2023 Mean Carbon Intensity (gCO2eq/kWh) and Power Consumption Breakdown (%)\n  \n\n  Zone\n  CO2 Intensity\n  Hydro\n  Nuclear\n  Wind\n  Solar\n  Geothermal\n  Biomass\n  Gas\n  Coal\n  Oil\n  Unknown\n  Hydro Discharge\n  Battery Discharge\n\n\n\n  \n    Sweden\n    26\n    39.1%\n    26.8%\n    27.7%\n    0.1%\n    0.0%\n    0.4%\n    0.4%\n    0.8%\n    0.0%\n    4.6%\n    0.1%\n    0.0%\n  \n  \n    Iceland\n    28\n    69.4%\n    0.0%\n    0.0%\n    0.0%\n    30.6%\n    0.0%\n    0.0%\n    0.0%\n    0.0%\n    0.0%\n    0.0%\n    0.0%\n  \n  \n    Quebec\n    35\n    90.1%\n    2.1%\n    4.4%\n    0.0%\n    0.0%\n    1.9%\n    1.4%\n    0.0%\n    0.0%\n    0.0%\n    0.0%\n    0.0%\n  \n  \n    France\n    46\n    12.3%\n    65.4%\n    10.3%\n    1.8%\n    0.0%\n    1.0%\n    7.1%\n    0.3%\n    0.3%\n    0.1%\n    1.4%\n    0.0%\n  \n  \n    Ontario\n    104\n    23.3%\n    49.4%\n    8.7%\n    0.1%\n    0.0%\n    0.2%\n    18.1%\n    0.0%\n    0.0%\n    0.0%\n    0.0%\n    0.0%\n  \n  \n    New Zealand\n    106\n    60.5%\n    0.0%\n    7.7%\n    0.1%\n    19.0%\n    0.0%\n    6.8%\n    3.7%\n    0.0%\n    2.2%\n    0.0%\n    0.0%\n  \n  \n    Finland\n    107\n    20.2%\n    36.5%\n    24.1%\n    0.1%\n    0.0%\n    6.2%\n    3.0%\n    8.1%\n    0.0%\n    1.8%\n    0.0%\n    0.0%\n  \n  \n    South Australia\n    132\n    0.7%\n    0.0%\n    42.6%\n    33.7%\n    0.0%\n    0.0%\n    13.3%\n    9.0%\n    0.0%\n    0.0%\n    0.0%\n    0.7%\n  \n  \n    Spain\n    132\n    17.1%\n    24.2%\n    25.1%\n    8.0%\n    0.0%\n    2.0%\n    18.8%\n    1.3%\n    0.2%\n    0.3%\n    3.0%\n    0.0%\n  \n  \n    Belgium\n    147\n    1.3%\n    39.6%\n    25.2%\n    3.6%\n    0.0%\n    2.8%\n    19.4%\n    1.7%\n    0.1%\n    4.9%\n    1.2%\n    0.0%\n  \n  \n    Tasmania\n    162\n    49.0%\n    0.0%\n    22.6%\n    10.8%\n    0.0%\n    0.0%\n    1.5%\n    16.1%\n    0.0%\n    0.0%\n    0.0%\n    0.0%\n  \n  \n    East Denmark\n    184\n    6.4%\n    5.5%\n    48.4%\n    1.3%\n    0.0%\n    16.8%\n    7.7%\n    10.8%\n    1.4%\n    1.4%\n    0.4%\n    0.0%\n  \n  \n    West Denmark\n    188\n    8.8%\n    2.2%\n    56.3%\n    1.6%\n    0.0%\n    7.6%\n    8.5%\n    13.0%\n    0.9%\n    0.4%\n    0.6%\n    0.0%\n  \n  \n    Great Britain\n    214\n    3.8%\n    12.4%\n    35.9%\n    2.7%\n    0.0%\n    6.2%\n    35.1%\n    2.0%\n    0.0%\n    1.0%\n    1.0%\n    0.0%\n  \n  \n    Netherlands\n    218\n    1.1%\n    3.9%\n    46.7%\n    10.8%\n    0.0%\n    4.6%\n    22.4%\n    8.6%\n    0.8%\n    1.1%\n    0.2%\n    0.0%\n  \n  \n    New York ISO\n    275\n    23.7%\n    22.8%\n    4.9%\n    0.0%\n    0.0%\n    0.1%\n    46.9%\n    0.0%\n    0.0%\n    1.6%\n    0.0%\n    0.0%\n  \n  \n    Italy (North)\n    307\n    22.7%\n    14.5%\n    3.9%\n    2.9%\n    0.2%\n    3.1%\n    38.4%\n    1.5%\n    0.2%\n    9.3%\n    3.3%\n    0.0%\n  \n  \n    California\n    328\n    8.4%\n    12.7%\n    7.9%\n    12.0%\n    3.0%\n    1.8%\n    48.5%\n    2.1%\n    0.0%\n    1.2%\n    0.0%\n    2.6%\n  \n  \n    Germany\n    389\n    4.4%\n    2.8%\n    39.7%\n    3.3%\n    0.0%\n    8.7%\n    14.4%\n    23.3%\n    0.6%\n    0.6%\n    2.1%\n    0.0%\n  \n  \n    Ireland\n    389\n    3.7%\n    0.8%\n    38.5%\n    0.2%\n    0.0%\n    2.5%\n    42.4%\n    9.7%\n    2.0%\n    0.1%\n    0.1%\n    0.0%\n  \n  \n    Western Australia\n    417\n    0.0%\n    0.0%\n    14.1%\n    33.8%\n    0.0%\n    0.3%\n    24.2%\n    27.1%\n    0.3%\n    0.0%\n    0.0%\n    0.3%\n  \n  \n    Texas\n    432\n    0.0%\n    9.1%\n    22.3%\n    6.0%\n    0.0%\n    0.0%\n    46.1%\n    16.1%\n    0.0%\n    0.4%\n    0.0%\n    0.0%\n  \n  \n    Alberta\n    447\n    1.9%\n    0.0%\n    12.4%\n    1.1%\n    0.0%\n    2.5%\n    70.7%\n    7.2%\n    0.0%\n    4.1%\n    0.0%\n    0.0%\n  \n  \n    Victoria\n    508\n    3.9%\n    0.0%\n    17.5%\n    19.0%\n    0.0%\n    0.0%\n    0.3%\n    59.1%\n    0.0%\n    0.0%\n    0.0%\n    0.2%\n  \n  \n    New South Wales\n    578\n    3.2%\n    0.0%\n    9.5%\n    23.7%\n    0.0%\n    0.2%\n    0.7%\n    62.6%\n    0.0%\n    0.0%\n    0.0%\n    0.1%\n  \n  \n    Queensland\n    662\n    1.9%\n    0.0%\n    3.8%\n    21.1%\n    0.0%\n    0.0%\n    7.2%\n    65.7%\n    0.2%\n    0.0%\n    0.0%\n    0.1%\n  \n  \n    South Africa\n    685\n    2.2%\n    4.3%\n    5.8%\n    3.8%\n    0.0%\n    0.0%\n    0.0%\n    79.9%\n    2.0%\n    0.1%\n    2.0%\n    0.0%\n  \n  \n    India (North)\n    693\n    9.3%\n    2.2%\n    0.1%\n    10.6%\n    0.0%\n    0.0%\n    1.8%\n    75.2%\n    0.0%\n    0.9%\n    0.0%\n    0.0%\n  \n\n  \n  \n  \n    Source: api.electricitymap.org | Methodology: https://www.electricitymaps.com/methodology. Some emissions factors are based on IPCC 2014 defaults, while some are based on more accurate regional factors. All zones are publicly available on the Carbon intensity and emission factors tab via Google docs link\n  \n\n\n\n\n\n\n        \n\n\n\n\nView source ‚¨Ä ¬†¬†¬†¬†Notebook ‚¨Ä\n\n\nShow the Code\nimport polars as pl\nimport polars.selectors as cs\nfrom great_tables import GT, loc, style\n\ncoffee_sales = pl.read_ndjson(\"./_data/coffee-sales.ndjson\")\n\nsel_rev = cs.starts_with(\"revenue\")\nsel_prof = cs.starts_with(\"profit\")\n\n# yo\n\ncoffee_table = (\n    GT(coffee_sales)\n    .tab_header(\"Sales of Coffee Equipment\")\n    .tab_spanner(label=\"Revenue\", columns=sel_rev)\n    .tab_spanner(label=\"Profit\", columns=sel_prof)\n    .cols_label(\n        revenue_dollars=\"Amount\",\n        profit_dollars=\"Amount\",\n        revenue_pct=\"Percent\",\n        profit_pct=\"Percent\",\n        monthly_sales=\"Monthly Sales\",\n        icon=\"\",\n        product=\"Product\",\n    )\n    # formatting ----\n    .fmt_number(\n        columns=cs.ends_with(\"dollars\"),\n        compact=True,\n        pattern=\"${x}\",\n        n_sigfig=3,\n    )\n    .fmt_percent(columns=cs.ends_with(\"pct\"), decimals=0)\n    # style ----\n    .tab_style(\n        style=style.fill(color=\"aliceblue\"),\n        locations=loc.body(columns=sel_rev),\n    )\n    .tab_style(\n        style=style.fill(color=\"papayawhip\"),\n        locations=loc.body(columns=sel_prof),\n    )\n    .tab_style(\n        style=style.text(weight=\"bold\"),\n        locations=loc.body(rows=pl.col(\"product\") == \"Total\"),\n    )\n    .fmt_nanoplot(\"monthly_sales\", plot_type=\"bar\")\n    .fmt_image(\"icon\", path=\"_data/coffee-table-icons/\")\n    .sub_missing(missing_text=\"\")\n)\n\ncoffee_table\n\n\n\n\n\n\n\n  \n    Sales of Coffee Equipment\n  \n\n  \n  Product\n  \n    Revenue\n  \n  \n    Profit\n  \n  Monthly Sales\n\n\n  Amount\n  Percent\n  Amount\n  Percent\n\n\n\n  \n    \n    Grinder\n    $904K\n    3%\n    $568K\n    4%\n    7650521494596613667748765686607594568751\n  \n  \n    \n    Moka pot\n    $2.05M\n    7%\n    $181K\n    1%\n    6.87K04.73K4.74K4.79K5.51K6.16K6.62K6.87K6.03K5.30K4.88K4.65K6.28K\n  \n  \n    \n    Cold brew\n    $289K\n    1%\n    $242K\n    2%\n    2.70K02442494389811.77K2.70K2.61K2.35K1.74K896499244\n  \n  \n    \n    Filter\n    $404K\n    1%\n    $70.0K\n    0%\n    2.74K02.07K1.81K1.84K2.12K2.25K2.63K2.56K2.37K2.16K2.19K2.07K2.74K\n  \n  \n    \n    Drip machine\n    $2.63M\n    9%\n    $1.37M\n    9%\n    2.58K02.14K1.62K1.97K2.10K2.58K2.46K2.34K2.32K2.05K1.97K1.84K2.33K\n  \n  \n    \n    AeroPress\n    $2.60M\n    9%\n    $1.29M\n    9%\n    9.27K06.33K5.20K6.37K7.02K7.91K8.70K8.69K7.80K6.83K6.96K6.88K9.27K\n  \n  \n    \n    Pour over\n    $846K\n    3%\n    $365K\n    2%\n    2.18K01.56K1.29K1.51K1.69K1.94K2.18K2.14K1.86K1.72K1.81K1.60K2.16K\n  \n  \n    \n    French press\n    $1.11M\n    4%\n    $748K\n    5%\n    4.82K03.51K2.88K3.35K3.79K3.90K4.10K4.18K4.43K3.28K3.42K3.30K4.82K\n  \n  \n    \n    Cezve\n    $2.51M\n    9%\n    $1.97M\n    13%\n    17.1K012.2K11.5K11.8K13.6K15.4K16.5K17.1K14.4K13.0K12.9K11.6K15.9K\n  \n  \n    \n    Chemex\n    $3.14M\n    11%\n    $818K\n    6%\n    7.22K04.94K4.17K5.24K6.00K6.36K6.77K7.11K6.25K5.60K6.08K4.98K7.22K\n  \n  \n    \n    Scale\n    $3.80M\n    13%\n    $2.91M\n    20%\n    3.18K01.54K1.57K1.68K2.03K2.42K2.55K2.57K2.23K2.04K2.09K1.69K3.18K\n  \n  \n    \n    Kettle\n    $756K\n    3%\n    $618K\n    4%\n    1.53K01.14K1.02K1.09K1.13K1.41K1.48K1.46K1.30K1.14K1.23K1.19K1.53K\n  \n  \n    \n    Espresso Machine\n    $8.41M\n    29%\n    $3.64M\n    25%\n    2.58K06868406185982.15K5337979961.00K6688582.58K\n  \n  \n    \n    Total\n    $29.4M\n    100%\n    $14.8M\n    100%"
  }
]